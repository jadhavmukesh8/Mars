sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/Filter",
    "sap/m/MessageToast",
    "sap/ui/model/FilterOperator",
    "com/airbus/zcfe2meautorc/model/formatter",
    "sap/m/BusyDialog",
    "sap/ui/richtexteditor/RichTextEditor",
    "sap/m/MessageBox",
    "sap/ui/core/message/Message",
    "sap/ui/model/json/JSONModel",
    "sap/ui/core/Fragment",
    "sap/ui/core/dnd/DragInfo",
    "sap/ui/core/dnd/DropInfo",
    "sap/ui/core/library"
],
    /**
     * @param {typeof sap.ui.core.mvc.Controller} Controller
     */
    function (Controller, Filter, MessageToast, FilterOperator, formatter, BusyDialog, RichTextEditor, MessageBox, Message, JSONModel, Fragment, DragInfo, DropInfo, coreLibrary) {
        "use strict";
        return Controller.extend("com.airbus.zcfe2meautorc.controller.UpdateRouting", {
            formatter: formatter,
            onInit: function () {
                this.getOwnerComponent().getRouter().attachRoutePatternMatched(this.onPatternMatched, this);
                this.getView().setModel("i18n");
                this.getView().setModel(this.getOwnerComponent().getModel("oRefOprSetModel"), "oRefOprSetModel");
                var that = this;
                var oMessageManager = sap.ui.getCore().getMessageManager();
                this.getView().setModel(oMessageManager.getMessageModel(), "message");
                //Launchpad ShellUIService is used to navigate back
                this.getOwnerComponent().getService("ShellUIService").then(function (oShellService) {
                    oShellService.setBackNavigation(function () {
                        that.fnNavBack();
                    });
                });
                // Set default selectedKey to Category combobox in work center dialog
                that.getOwnerComponent().getModel("oRoutingHeaderModel").setProperty("/searchWCCategory", "");
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bClearFilters", false);
                oVisibilityModel.setProperty("/bDelComp", false);
                var flexBox = this.getView().byId("flexBox");
                flexBox.attachBrowserEvent(
                    "click",
                    function (event) {
                        this.fnExpandBOM();
                    },
                    this
                );
            },
            // /*This adjust the width of Splitter*/
            // This method is used for changing the decimal notaion issue
            fnloadSettings: function () {
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                oDataModel.read("/ET_User_DefaultsSet", {
                    success: function (oData) {
                        oOperationItemsModel.setProperty("/DCPFM", oData.results[0].DCPFM);
                        oOperationItemsModel.setProperty("/DATFM", oData.results[0].DATFM);
                        oOperationItemsModel.setProperty("/BNAME", oData.results[0].BNAME);
                    }
                });
            },
            /* Params : oEvent This method is triggered everytime when to view reloads during navigation */
            onPatternMatched: function (oEvent) {
                this.fnCloseBusyDialog();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sDatalostMsg = oBundle.getText("closeTempmsg");
                var sConfirmMsg = oBundle.getText("okTempmsg");
                var sParameters = this.getOwnerComponent().getComponentData().startupParameters;
                var sRoute = oEvent.getParameter("name");
                var oApplicationModel = this.getOwnerComponent().getModel("oApplicationModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oRoutingHeaderModel.setProperty("/sExpandPanel", true);
                //this.getView().byId("oButtonRoutingPanel").setTooltip(oBundle.getText("phantom.allcollapse"));
                //creating a property for View Template in visibility Model.
                oVisibilityModel.setProperty('/sViewTemplate', '');
                if (sParameters.nMode === undefined) {
                    sParameters.nMode = [];
                    sParameters.nMode[0] = "ChangeRouting";
                }
                if ((sParameters.nMode[0] === "ViewTemplate")
                    && (this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj") === undefined)) {
                    sap.ushell.Container.setDirtyFlag(false);
                    MessageBox.warning(sDatalostMsg, {
                        actions: [sConfirmMsg],
                        emphasizedAction: sConfirmMsg,
                        onClose: function (sAction) {
                            if (sAction === sConfirmMsg) {
                                sap.ushell.Container.setDirtyFlag(false);
                                var oCrossAppNavigator = sap.ushell.Container.getService("CrossApplicationNavigation");
                                var oShellHome = oCrossAppNavigator.hrefForExternal({
                                    target: {
                                        shellHash: "#Shell-home",
                                    },
                                });
                                oCrossAppNavigator.toExternal({
                                    target: {
                                        shellHash: oShellHome,
                                    },
                                });
                            }
                        }
                    });
                }
                // updating the properties of massupdate and viewtemplate to disable controls in view 
                // hiding the back button if its view template
                if (sParameters.nMode[0] === "ViewTemplate") {
                    oVisibilityModel.setProperty('/sMassUpdateUser', 'X');
                    oVisibilityModel.setProperty('/sViewTemplate', 'X');
                    sap.ushell.Container.getRenderer("fiori2").hideHeaderItem("backBtn", false);
                }
                if (sParameters.nMode[0] === "ChangeRouting" || sParameters.nMode[0] === "ChangeTemp") {
                    sap.ushell.Container.getRenderer("fiori2").hideHeaderItem("backBtn", false);
                }
                var oRoutingModificationsLocalModel = this.getOwnerComponent().getModel("oRoutingModel");
                oRoutingHeaderModel.setProperty("/AllocManlDate", "");
                oRoutingHeaderModel.setProperty("/AllocManlType", "");
                oRoutingHeaderModel.setProperty("/AllocDateEnable", false);
                oRoutingHeaderModel.setProperty("/AllocDateTypeEnable ", false);
                oRoutingHeaderModel.setProperty("/MLCompAsgnMultiCIs", "");
                oRoutingHeaderModel.setProperty("/MLMultiCITooltip", "");
                //Mass update properties
                oRoutingModificationsLocalModel.setProperty("/aMassUpdateAffectedOperationList", []);
                oRoutingModificationsLocalModel.setProperty("/aMassUpdateModifiedWorkCenters", []);
                oRoutingModificationsLocalModel.setProperty("/aMassUpdateModifiedShortTxtDesc", []);
                oRoutingModificationsLocalModel.setProperty("/aMassUpdateModifiedLngTxtDesc", []);
                oRoutingModificationsLocalModel.setProperty("/aMassUpdateModifiedPRTDesc", []);
                oRoutingModificationsLocalModel.setProperty("/aMassUpdateModifiedNoEmployees", []);
                oRoutingModificationsLocalModel.setProperty("/aMassUpdateModifiedOprClassification", []);
                this.getView().getModel("oOperationItemsModel").setProperty("/aModifyclassificationData", []);
                this.getView().getModel("oOperationItemsModel").setProperty("/sErrorMessage", "");
                this.getView().getModel("oOperationItemsModel").setProperty("/aVornrTempAddedOper", []);
                this.getView().getModel("oRoutingHeaderModel").setProperty("/aTempAddedOperButton", false);
                this.getView().getModel("oOperationItemsModel").setProperty("/aTempAddedOper", []);
                oApplicationModel.setProperty("/sCurrentRoute", sRoute);
                oVisibilityModel.setProperty("/sAssignType", "Default");
                oVisibilityModel.setProperty("/bRuleSetMessage", false);
                oApplicationModel.setProperty("/sRichTextEditorEnabled", false);
                oApplicationModel.setProperty("/bICPopUpDelayIdentifier", false);
                this.getView().byId("oButtonExpandCollapse").setTooltip(oBundle.getText("hideDetails"));
                var sBtnProposeToolTip = oBundle.getText("proposal.BtnTxtToolTip");
                oRoutingHeaderModel.setProperty("/bEnableRichTextMU", true);
                if (sRoute === "CreateRouting" || sRoute === "CreateTemplate") {
                    return;
                }
                //Getting PRT type data to prepopulate control key
                this.fnGetPRTTypeData();
                if (sParameters.nMode === undefined) {
                    sParameters.nMode = [];
                    sParameters.nMode[0] = "";
                }
                if (sParameters.nMode[0] === "ViewTemplate") {
                    var bNavfromselection = true;
                }
                else {
                    var bNavfromselection = this.getView().getModel("oRoutingModel").getProperty("/bNavfromselection");
                }
                if (!bNavfromselection) {
                    if (sRoute === "UpdateRouting") {
                        this.getOwnerComponent().getRouter().navTo("CreateRouting");
                        return;
                    } else if (sRoute === "UpdateTemplate") {
                        this.getOwnerComponent().getRouter().navTo("CreateTemplate");
                        return;
                    }
                }
                if (
                    this.getView().getModel("oVisibilityModel").getProperty("/sMassUpdateUser") === "X"
                ) {
                    oVisibilityModel.setProperty("/sSelectedOperations", []);
                    oVisibilityModel.setProperty("/sSelectedAction", "");
                    oVisibilityModel.setProperty("/AtcnState", "None");
                    oVisibilityModel.setProperty("/bMassCheck", false);
                    oVisibilityModel.setProperty("/bDelComp", false);
                    var oBundle = this.getView().getModel("i18n").getResourceBundle();
                    var oOprListData = {
                        items: [
                            {
                                id: "1",
                                text: oBundle.getText("update.addoperation"),
                                opr_no: "1",
                            },
                            {
                                id: "2",
                                text: oBundle.getText("update.remoperation"),
                                opr_no: "2",
                            },
                            {
                                id: "3",
                                text: oBundle.getText("update.modiwork"),
                                opr_no: "3",
                            },
                            {
                                id: "4",
                                text: oBundle.getText("update.modiOprShrtTxt"),
                                opr_no: "4",
                            },
                            {
                                id: "5",
                                text: oBundle.getText("update.modiLngTxt"),
                                opr_no: "5",
                            },
                            {
                                id: "6",
                                text: oBundle.getText("update.adPRTS"),
                                opr_no: "6",
                            },
                            {
                                id: "7",
                                text: oBundle.getText("update.rmPRTS"),
                                opr_no: "7",
                            },
                            {
                                id: "8",
                                text: oBundle.getText("update.NoOfEmployees"),
                                opr_no: "8",
                            },
                            {
                                id: "9",
                                text: oBundle.getText("update.Classification"),
                                opr_no: "9",
                            },
                        ],
                    };
                    oRoutingHeaderModel.setProperty("/oActionListData", oOprListData);
                    oRoutingHeaderModel.setProperty("/bEnableRichTextMU", false);
                }
                //show pop over to users on click of close tab and back button
                sap.ushell.Container.setDirtyFlag(true);

                /*destror the list items to avoid the rich text editor inconsistency -- Ergonomy changes*/
                if (this.getView().byId("listBindingOpr")) {
                    this.getView().byId("listBindingOpr").destroyItems();
                }
                if (this.getView().byId("idRte")) {
                    this.getView().byId("idRte").destroy();
                }
                this.getOwnerComponent().getModel("oRoutingHeaderModel").setProperty("/isLongTextRender", true);
                var oRichTextEditor = new RichTextEditor(this.createId("idRte"), {
                    width: "49%",
                    height: "200px",
                    value: "{oRoutingHeaderModel>/sLongText}",
                    editable: "{oRoutingHeaderModel>/bEnableRichTextMU}",
                    change: function () {
                        this.fnChangeRoutingheaderlongtext();
                    }.bind(this),
                    ready: function () {
                        this.fnReadyRoutingHeaderLongText();
                    }.bind(this),
                    beforeEditorInit: function (oEvent) {
                        this.fnOnBeforeEditorInit(oEvent);
                    }.bind(this),
                    showGroupClipboard: false,
                    showGroupFontStyle: false,
                    showGroupStructure: false,
                    showGroupTextAlign: false,
                    showGroupInsert: false,
                }).addStyleClass("sapUiTinyMarginEnd rteBorderTop");
                var oRoutingHeaderPanel = this.getView().byId("RoutingHeaderId");
                setTimeout(
                    function () {
                        oRoutingHeaderPanel.addContent(oRichTextEditor);
                    }.bind(this),
                    500
                );
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.setSizeLimit(500);
                //set back navigation button icon
                this.getView().byId("bomNavigIcon").setSrc("sap-icon://navigation-right-arrow");
                this.getView().byId("bomNavigIcon1").setSrc("sap-icon://navigation-right-arrow");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                // MASS UPDATE......
                oVisibilityModel.setProperty("/bActionCombo", true);
                oVisibilityModel.setProperty("/bOprCombo", false);
                oVisibilityModel.setProperty("/bBOMVisible", false);
                oVisibilityModel.setProperty("/bBOMSplitBtnEnabled", true);
                oVisibilityModel.setProperty("/bExpandBOMItemsVisible", true);
                oVisibilityModel.setProperty("/bUnsavedChange", false);
                oVisibilityModel.setProperty("/bSmartCopySuccessHeaderVisible", false);
                if (
                    this.getView().getModel("oRoutingModel").getProperty("/selectedCIPlantSetDate") &&
                    this.getView().getModel("oRoutingModel").getProperty("/sSetAllocDateConsidered") === "Y"
                ) {
                    oRoutingHeaderModel.setProperty("/AllocDate", this.getView().getModel("oRoutingModel").getProperty("/selectedCIPlantSetDate"));
                    oRoutingHeaderModel.setProperty("/AllocDateMode", "CREATION DATE");
                } else {
                    oRoutingHeaderModel.setProperty("/AllocDate", "");
                    oRoutingHeaderModel.setProperty("/AllocDateMode", "");
                }
                oRoutingHeaderModel.setProperty("/AllocDateValidation", "None");
                oRoutingHeaderModel.setProperty("/AllocTypeVald", "None");
                var aModeData = [
                    {
                        modeKey: "CREATION DATE",
                        modeName: "Creation date",
                    },
                    {
                        modeKey: "CHANGE DATE",
                        modeName: "Change date",
                    },
                ];
                oRoutingHeaderModel.setProperty("/aAllocDateModeData", aModeData);
                //View Template 
                if (sParameters.nMode === undefined) {
                    sParameters.nMode = [];
                    sParameters.nMode[0] = "";
                }
                if (sParameters.nMode[0] === "ViewTemplate") {
                    var sMode = "Change";
                } else {
                    var sMode = this.getView().getModel("oRoutingModel").getProperty("/sRadioMode");
                }
                if (
                    sMode === "Change"
                ) {
                    this.getView().getModel("oRoutingModel").setProperty("/selectedCIPlantSetDate", "");
                    oRoutingHeaderModel.setProperty("/AllocDate", "");
                    oRoutingHeaderModel.setProperty("/AllocDateMode", "CREATION DATE");
                }
                var sKeyUser = this.getView().getModel("oRoutingModel").getProperty("/keyUser");
                if (sKeyUser === "X") {
                    var sRoutingIndex = this.getView().getModel("oRoutingModel").getProperty("/sRoutingIndex");
                    if (sRoutingIndex === 0) {
                        oVisibilityModel.setProperty("/bTiconJobStatus", false);
                    } else {
                        oVisibilityModel.setProperty("/bTiconJobStatus", true);
                    }
                } else {
                    oVisibilityModel.setProperty("/bTiconJobStatus", true);
                }
                oVisibilityModel.setProperty("/bSavedBomSplitData", true);
                oVisibilityModel.setProperty("/bUnsavedSelectAltBom", true);
                oVisibilityModel.setProperty("/bProposedBtnEnabled", true);
                oVisibilityModel.setProperty("/bProposeQuickAssignBtn", true);
                oVisibilityModel.setProperty("/sAlternateGrpCntrForProposedML", "");
                oVisibilityModel.setProperty("/ProposeByCategoryAccurate", true);
                oVisibilityModel.setProperty("/ProposeByCategoryHigh", true);
                oVisibilityModel.setProperty("/ProposeByCategoryMedium", true);
                oVisibilityModel.setProperty("/ProposeByCategoryLow", true);
                oVisibilityModel.setProperty("/ProposeByCategoryAccurateIcon", false);
                oVisibilityModel.setProperty("/ProposeByCategoryHighIcon", false);
                oVisibilityModel.setProperty("/ProposeByCategoryMediumIcon", false);
                oVisibilityModel.setProperty("/ProposeByCategoryLowIcon", false);
                oVisibilityModel.setProperty("/bProposeAllocateBtnVisible", false);
                oVisibilityModel.setProperty("/bAllocateSelectedCompEnable", false);
                oVisibilityModel.setProperty("/bTiconArray", []);
                oVisibilityModel.setProperty("/bProposedBtnEnabledTooltip", sBtnProposeToolTip);
                //Expand/ Collapse Butn Visibility in ML PopUp - GGUNO6VD
                oVisibilityModel.setProperty("/bMLClpAll", false);
                oVisibilityModel.setProperty("/bMLExpAll", true);
                //Expan/ collapse  Button Visibility property
                oVisibilityModel.setProperty("/sGobalExpand", true);
                oVisibilityModel.setProperty("/sGobalCollapse", false);
                // synchronisation text for routing header
                oRoutingHeaderModel.setProperty("/sSyncTasklistdesc", "");
                // Clear message manager
                sap.ui.getCore().getMessageManager().removeAllMessages();
                this.getView().getModel("message").refresh();
                //BOM Item selection disable
                var oALtBOM = this.getView().byId("altbomcombobox");
                var aAltBOMitems = oALtBOM.getItems();
                if (aAltBOMitems.length > 1) {
                    for (var i = 1; i < aAltBOMitems.length; i++) {
                        aAltBOMitems[i].setEnabled(false);
                    }
                }
                // BOM layout        
                oVisibilityModel.setProperty("/bMainViewBtnAcceptVisible", true);
                oVisibilityModel.setProperty("/bMainViewBtnVisible", false);
                oVisibilityModel.setProperty("/bClassificationViewBtnAcceptVisible", false);
                oVisibilityModel.setProperty("/bClassificationViewBtnVisible", true);
                oVisibilityModel.setProperty("/bViewforRitemsBtnAcceptVisible", false);
                oVisibilityModel.setProperty("/bViewforRitemsBtnVisible", true);
                oVisibilityModel.setProperty("/bMainViewColumnVisible", true);
                oVisibilityModel.setProperty("/bClassificationViewColumnVisible", false);
                oVisibilityModel.setProperty("/bViewforRitemsColumnVisible", false);
                //Set Operations length on add/del
                var sOprList = this.getView().byId("listBindingOpr");
                var oBindings = sOprList.getBinding("items");
                oBindings.attachChange(function (oEvnt) {
                    oRoutingHeaderModel.setProperty("/iOperLength", oEvnt.getSource().iLength);
                    oRoutingHeaderModel.refresh();
                });
                //Set Initial Operation Items length
                oRoutingHeaderModel.setProperty("/iOperLength", oBindings.getLength());
                oRoutingHeaderModel.refresh();
                //Only call if navigating to Details page
                // Commented bSaveVisible flag, for making Change button click work                
                if (sRoute === "UpdateRouting" || sRoute === "UpdateTemplate") {
                    var oRouteObj = this.getView()
                        .getModel("oRoutingModel")
                        .getProperty("/oRouteDetailsObj");
                    this.fnGetRoutingDetails(oRouteObj);
                    // Refresh Interval to check Ticon Background JOB status
                    // Enabled Ticon background job for both key user and end user.
                    var sIntervalID = setInterval(
                        this.fnCheckTiconJobStatus,
                        120000, this, "timeEvent"
                    );
                    oRoutingHeaderModel.setProperty("/sIntervalID", sIntervalID);
                    oRoutingHeaderModel.setProperty("/isStatustoShowmsg", true);
                    //Setting the selected alt bom path as undefined to show default bom details
                    oRoutingHeaderModel.setProperty("/sSelectedAltBOMPath", undefined);
                }
                if (sap.ui.getCore().getConfiguration()) {
                    oRoutingHeaderModel.setProperty("/searchLangDocValueHelp", sap.ui.getCore().getConfiguration().getLanguage().toLocaleUpperCase());
                } else {
                    oRoutingHeaderModel.setProperty("/searchLangDocValueHelp", "");
                }
                //Initially set Panels behavior to EXPANDED. If we don't set this here, whenever user collpases and navigate back & comes back, it does not reset.
                //We need to mnually set it expanded.
                var oButtonExpandCollapse = this.getView().byId("oButtonExpandCollapse");
                oButtonExpandCollapse.setIcon("sap-icon://drill-down");
                var oRoutingHeader = this.getView().byId("RoutingHeaderId");
                oRoutingHeader.setExpanded(true);
                //Only for Operations panel (Dynamic)
                var oListofPanels = this.getView().byId("listBindingOpr");
                var oPanelItems = oListofPanels.getItems();
                oPanelItems.forEach(function (n) {
                    var oPanelContent = n.getContent()[0];
                    oPanelContent.setExpanded(true);
                });
                // Initially seting BOM width to 90 px only.
                var oSplitter = this.getView().byId("SplitterID"),
                    oBomLayout = oSplitter.getContentAreas()[0].getLayoutData(),
                    sKeyUser = this.getView().getModel("oRoutingModel").getProperty("/keyUser");
                if (sKeyUser === "X") {
                    oBomLayout.setSize("0px");
                } else {
                    oBomLayout.setSize("30px");
                }
                if (this.getModel("oRoutingHeaderModel").getProperty("/AllocDateSourceSelected") === "MANUAL") {
                    oRoutingHeaderModel.setProperty("/AllocDateEnable", true);
                    oRoutingHeaderModel.setProperty("/AllocDateTypeEnable ", true);
                } else {
                    oRoutingHeaderModel.setProperty("/AllocDateEnable", false);
                    oRoutingHeaderModel.setProperty("/AllocDateTypeEnable ", false);
                }
                this.fnEnableVMPButton();
                this.fnGetStatusData();
            },
            /*This method used to get model attached to the view */
            getModel: function (sName) {
                return this.getView().getModel(sName);
            },
            /*This method is used to show busy indicator */
            fnOpenBusyDialog: function () {
                sap.ui.core.BusyIndicator.show(0);
            },
            /* This method is used to hide busy indicators */
            fnCloseBusyDialog: function () {
                sap.ui.core.BusyIndicator.hide();
            },
            /*This method used to Expand BOM area*/
            fnExpandBOM: function (oEvent) {
                var oSplitter = this.getView().byId("SplitterID");
                var oBomLayout = oSplitter.getContentAreas()[0].getLayoutData();
                var sIcon = this.getView().byId("bomNavigIcon").getSrc();
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                if (sIcon === "sap-icon://navigation-right-arrow") {
                    this.getView().byId("bomNavigIcon").setSrc("sap-icon://navigation-left-arrow");
                    this.getView().byId("bomNavigIcon1").setSrc("sap-icon://navigation-left-arrow");
                    oBomLayout.setSize("77%");
                    oBomLayout.setResizable(true);
                    oVisibilityModel.setProperty("/bBOMVisible", true);
                } else {
                    this.getView().byId("bomNavigIcon").setSrc("sap-icon://navigation-right-arrow");
                    this.getView().byId("bomNavigIcon1").setSrc("sap-icon://navigation-right-arrow");
                    oBomLayout.setResizable(false);
                    oVisibilityModel.setProperty("/bBOMVisible", false);
                    oBomLayout.setSize("30px");
                }
            },
            fnGetPRTTypeData: function () {
                var oRoutingModel = this.getOwnerComponent().getModel("oRoutingModel");
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oParameters = {
                    async: true,
                    success: function (oData, oResponse) {
                        oRoutingModel.setProperty("/aPRTTypeData", oData.results);
                    },
                    error: function (error) {
                        this.fnCheckError(error);
                    },
                };
                oDataModel.read("/ET_Doc_TypeSet", oParameters);
            },
            // Method to delay the time to open IC popup.
            fnCheckInspChar: function (oEvent) {
                var oApplicationModel = this.getOwnerComponent().getModel("oApplicationModel");
                oApplicationModel.setProperty("/bICPopUpDelayIdentifier", true);
                oApplicationModel.setProperty("/oEve", oEvent);

                jQuery.sap.delayedCall(2000, this, function () {
                    if (
                        oApplicationModel.getProperty("/bICPopUpDelayIdentifier") === true
                    ) {
                        oApplicationModel.setProperty("/bICPopUpDelayIdentifier", false);
                        this.fnOpenInspChar(oApplicationModel.getProperty("/oEve"));
                    }
                });
            },
            // Method to show Inspection characteristics on click of Bulb icon.
            fnOpenInspChar: function (oEvent) {
                // Based on Bulb color (orange or grey), we are opening popup.
                // If Bulb is active, we open opoup otherwise no popup.
                var sColor = oEvent.srcControl.getColor();
                if (sColor === "#e1e000") {
                    var idControl = oEvent.srcControl.getId();
                    var iOperationSequence = idControl.split("listBindingOpr-").pop();
                    var oObj = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj");
                    var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                    var aOperations = oOperationItemsModel.getProperty("/aOperationItems");
                    var iOperationNo = aOperations[iOperationSequence].Vornr;
                    var iRefGrpNumber = aOperations[iOperationSequence].Vplnr;
                    var iRefGrpCounter = aOperations[iOperationSequence].Vplal;
                    var oRoutingModel = this.getView().getModel("oRoutingModel");
                    var sKeyUser = oRoutingModel.getProperty("/keyUser");

                    if (sKeyUser === "X") {
                        oObj.Task_type = "S";
                    } else {
                        oObj.Task_type = "N";
                    }

                    if (oObj.Material && oObj.Plant && oObj.Group_No && oObj.Grp_Cntr) {
                        var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                        var aFilters = [
                            new sap.ui.model.Filter(
                                "Material",
                                "EQ",
                                oObj.Material.toString()
                            ),
                            new sap.ui.model.Filter("Plant", "EQ", oObj.Plant.toString()),
                            new sap.ui.model.Filter(
                                "Group_No",
                                "EQ",
                                oObj.Group_No.toString()
                            ),
                            new sap.ui.model.Filter(
                                "Grp_Cntr",
                                "EQ",
                                oObj.Grp_Cntr.toString()
                            ),
                            new sap.ui.model.Filter(
                                "Task_type",
                                "EQ",
                                oObj.Task_type.toString()
                            ),
                            new sap.ui.model.Filter("Vornr", "EQ", iOperationNo.toString()),
                            new sap.ui.model.Filter(
                                "S_Ref_Group_No",
                                "EQ",
                                iRefGrpNumber.toString()
                            ),
                            new sap.ui.model.Filter(
                                "S_Ref_Grp_Cntr",
                                "EQ",
                                iRefGrpCounter.toString()
                            ),
                        ];
                        var oBusyIndicator = new BusyDialog();
                        oBusyIndicator.open();
                        oDataModel.read("/ET_Insp_CharSet", {
                            filters: aFilters,
                            async: true,
                            success: function (oData) {
                                oBusyIndicator.close();
                                if (oData.results.length > 0) {
                                    //var aOperationResultsArray = oData.results[0].Operation.results;
                                    // Get IC of each operation by passing sequence number
                                    oOperationItemsModel.setProperty("/aOperationInspChar", oData.results);
                                    if (!this._InspectionCharDialog) {
                                        this._InspectionCharDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.InspectionCharTable", this);
                                        this.getView().addDependent(this._InspectionCharDialog);
                                        this._InspectionCharDialog.setModel(oOperationItemsModel);
                                        this._InspectionCharDialog.getContent()[0].setModel(oOperationItemsModel);
                                        this._InspectionCharDialog.setModel("i18n");
                                    }
                                    this._InspectionCharDialog.open();
                                    oOperationItemsModel.refresh();
                                }
                            }.bind(this),
                            error: function (error) {
                                oBusyIndicator.close();
                                this.fnCheckError(error);
                            }.bind(this),
                        });
                    }
                }
            },
            // Method to cancel to open IC popup if the user come out of icon before 3 seconds.
            fnCancelCheckInspCharPopUp: function () {
                var oApplicationModel = this.getOwnerComponent().getModel("oApplicationModel");
                oApplicationModel.setProperty("/bICPopUpDelayIdentifier", false);
            },
            /* Params : oEvent This method used to prompt user for data loss on navigation back.*/
            fnNavBack: function () {
                var that = this;
                var oApplicationModel = this.getOwnerComponent().getModel("oApplicationModel");
                var sRoute = oApplicationModel.getProperty("/sCurrentRoute");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sDatalostMsg = oBundle.getText("update.datalostmsg");
                var sConfirmMsg = oBundle.getText("update.confirmmsg");
                // Navigating back to Launchpad home using Cross App Navigation service
                if (sRoute === "CreateRouting" || sRoute === "CreateTemplate") {
                    var oCrossAppNavigator = sap.ushell.Container.getService(
                        "CrossApplicationNavigation"
                    );
                    var oShellHome = oCrossAppNavigator.hrefForExternal({
                        target: {
                            shellHash: "#Shell-home",
                        },
                    });
                    oCrossAppNavigator.toExternal({
                        target: {
                            shellHash: oShellHome,
                        },
                    });
                } else if (sRoute === "RoutingModification") {
                    sap.ushell.Container.setDirtyFlag(false);
                    var oHistory = sap.ui.core.routing.History.getInstance(),
                        sPreviousHash = oHistory.getPreviousHash();
                    if (sPreviousHash !== undefined) {
                        // The history contains a previous entry
                        history.go(-1);
                    } else {
                        var oCrossAppNavigator = sap.ushell.Container.getService("CrossApplicationNavigation");
                        var oShellHome = oCrossAppNavigator.hrefForExternal({
                            target: {
                                shellHash: "#Shell-home",
                            },
                        });
                        oCrossAppNavigator.toExternal({
                            target: {
                                shellHash: oShellHome,
                            },
                        });
                    }
                } else {
                    MessageBox.error(sDatalostMsg, {
                        actions: [sConfirmMsg, MessageBox.Action.CLOSE],
                        emphasizedAction: sConfirmMsg,
                        onClose: function (sAction) {
                            if (sAction === sConfirmMsg) {
                                //show pop over to users on click of close tab and back button
                                sap.ushell.Container.setDirtyFlag(false);
                                if (sRoute === "UpdateRouting") {
                                    that.getOwnerComponent().getRouter().navTo("CreateRouting");
                                } else if (sRoute === "UpdateTemplate") {
                                    that.getOwnerComponent().getRouter().navTo("CreateTemplate");
                                }
                                //Cancelling Interval call
                                var oRoutingHeaderModel = that.getView().getModel("oRoutingHeaderModel");
                                var sIntervalID = oRoutingHeaderModel.getProperty("/sIntervalID");
                                if (sIntervalID !== undefined) {
                                    clearInterval(sIntervalID);
                                    oRoutingHeaderModel.setProperty("/sIntervalID", undefined);
                                }
                                // Clear message manager
                                sap.ui.getCore().getMessageManager().removeAllMessages();
                                that.getView().getModel("message").refresh();
                                // Reset List selected checkboxes if user is navigated.
                                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                                oOperationItemsModel.setProperty("/aSelectedCheckBoxes", []);
                                that.getView().byId("listBindingOpr").removeSelections(true);
                            }
                        },
                    });
                }
            },
            /* Params :error This is method used to display error in message box */
            fnCheckError: function (error) {
                var msgText;
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                if (error.statusCode === 500) {
                    msgText = error.message;
                } else {
                    msgText = (JSON.parse(error.responseText)).error.message.value;
                }
                MessageBox.show(msgText, {
                    icon: sap.m.MessageBox.Icon.ERROR,
                    title: oBundle.getText("globalError"),
                    actions: [sap.m.MessageBox.Action.OK],
                    styleClass: "sapUiSizeCompact"
                });
            },
            /* Description : This method is Expand and collapes routing panal from sun header (Mini user story)*/
            fnExpandCollapseRoutingPanel: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sIcon = this.getView().byId("oButtonRoutingPanel").getIcon();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                if (sIcon === "sap-icon://navigation-right-arrow") {
                    this.getView().byId("oButtonRoutingPanel").setIcon("sap-icon://navigation-down-arrow");
                    this.getView().byId("oButtonRoutingPanel").setTooltip(oBundle.getText("phantom.allcollapse"));
                    oRoutingHeaderModel.setProperty("/sExpandPanel", true);
                } else {
                    this.getView().byId("oButtonRoutingPanel").setIcon("sap-icon://navigation-right-arrow");
                    this.getView().byId("oButtonRoutingPanel").setTooltip(oBundle.getText("phantom.allexpand"));
                    oRoutingHeaderModel.setProperty("/sExpandPanel", false);
                }
            },
            /* Params : N/A This method used to trigger on change of routing header longtext */
            fnChangeRoutingheaderlongtext: function () {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sHTMLLongText = oRoutingHeaderModel.getProperty("/sLongText");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);

                //Setting First line of long text to Tasklist description
                if (sHTMLLongText) {
                    var aPlainText = formatter.fnPlainText(sHTMLLongText);
                    var sFirstLine = aPlainText[0].Line;
                    var sFormattedText = sFirstLine.replace(/(\r\n|\n|\r)/gm, ""); //remove newline and carriage return
                    sFormattedText = sFormattedText.replace(/&nbsp;/g, "");
                    sFormattedText = formatter.fnDecodeEntities(sFormattedText); //Reconvert Unicode characters
                    var sTasklistdesc = sFormattedText.substring(0, 40);
                    oRoutingHeaderModel.setProperty("/aHeaderDetails/Task_List_Desc", sTasklistdesc);
                    oRoutingHeaderModel.setProperty("/sSyncTasklistdesc", sTasklistdesc);
                } else {
                    oRoutingHeaderModel.setProperty("/aHeaderDetails/Task_List_Desc", "");
                    oRoutingHeaderModel.setProperty("/sSyncTasklistdesc", "");
                }
            },
            /* Params : N/A This method is triggered once the routing header long text ediotr is loaded */
            fnReadyRoutingHeaderLongText: function () {
                var sLongTextRenderVal = this.getView().getModel("oRoutingHeaderModel").getProperty("/sLongText");
                this.getView().byId("idRte").rerender();
                this.getView().byId("idRte").setValue(sLongTextRenderVal);
            },
            /*function to apply the custom CSS to Rich text editor*/
            fnOnBeforeEditorInit: function (oEvent) {
                var oConfig = oEvent.getParameter("configuration");
                //add paste plugin
                oConfig.plugins = "paste";
                //retain our custom CSS
                oConfig.paste_webkit_styles = "all";
                oConfig.setup = function (oEditor) {
                    //Apply custom css to restrict the line length
                    oEditor.contentStyles.push("body { font-family: monospace !important; max-width: 72ch !important; min-width: 72ch !important;}");
                };
            },
            /** Params : oObj This method used to fetch Routing details.*/
            fnGetRoutingDetails: function (oObj, mode) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oVisibilityModel = this.getView().getModel('oVisibilityModel');
                var sKeyUser = oRoutingModel.getProperty("/keyUser");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sBOMStatusMsg = oBundle.getText("proposal.BOMStatusMsg");
                var sBtnProposeToolTip = oBundle.getText("proposal.BtnTxtToolTip");
                if (oObj !== undefined) {
                    if ((oObj.Material || oObj.CI) && (oObj.Plant && oObj.Group_No && oObj.Grp_Cntr)) {
                        var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                        var aFilters = [
                            new sap.ui.model.Filter("Plant", FilterOperator.EQ, oObj.Plant),
                            new sap.ui.model.Filter("Group_No", FilterOperator.EQ, oObj.Group_No),
                            new sap.ui.model.Filter("Grp_Cntr", FilterOperator.EQ, oObj.Grp_Cntr),
                        ];
                        //This is to pass filter for Key User and End User
                        if (sKeyUser === "X") {
                            oObj.Task_type = "S";
                            aFilters.push(new sap.ui.model.Filter("Material", FilterOperator.EQ, oObj.CI));
                        } else {
                            oObj.Task_type = "N";
                            aFilters.push(new sap.ui.model.Filter("Material", FilterOperator.EQ, oObj.Material));
                        }
                        aFilters.push(new sap.ui.model.Filter("Task_type", FilterOperator.EQ, oObj.Task_type));
                        // End
                        var oBusyIndicator = new BusyDialog();
                        oBusyIndicator.open();

                        oDataModel.read("/ET_Rout_HdrSet", {
                            filters: aFilters,
                            async: true,
                            urlParameters: {
                                "$expand": ["Long_Text", "Operation/Long_Text", "Operation/PRT", "Operation/PRTCompare", "Classification", "Classification_DrpDown", "Multiple_AOCIs", "BOM/Items",
                                    "Operation/OprUserFields", "Operation/Opr_Classification", "Status_Check", "Comp_MultiAocis"
                                ]
                            },
                            success: function (oData) {
                                oBusyIndicator.close();
                                if (oData.results.length > 0) {
                                    this.getView().getModel("oRoutingHeaderModel").setProperty("/aHeaderDetails", oData.results[0]);
                                    var oRoutingModificationsLocalModel = this.getView().getModel("oRoutingModel");
                                    var sAOCIData = oData.results[0].Material;
                                    var oBundle = this.geti18nModel().getResourceBundle();
                                    var aAOCIArray = [sAOCIData];
                                    oRoutingModificationsLocalModel.setProperty("/sSelectedMultiAOCI", aAOCIArray);
                                    this.getModel("oVisibilityModel").setProperty("/sTxtsp", oData.results[0].Txtsp);
                                    this.getModel("oVisibilityModel").setProperty("/bRuleSetMessage", false);
                                    this.getModel("oVisibilityModel").setProperty("/Rule_InfoMsg", []);
                                    oRoutingModificationsLocalModel.setProperty("/sMAOCI", oData.results[0].Multiple_AOCIs.results);
                                    oRoutingModificationsLocalModel.setProperty("/sRMSelectedPlant", oData.results[0].Plant);
                                    oRoutingModificationsLocalModel.setProperty("/sStatusValidation", oData.results[0].Status);
                                    var aMulAOCI = oRoutingModificationsLocalModel.getProperty("/sMAOCI");
                                    this.getView().getModel("oRoutingHeaderModel").setProperty("/Ci_From", oData.results[0].Ci_From);
                                    this.getView().getModel("oRoutingHeaderModel").setProperty("/aComp_MultiAocis", oData.results[0].Comp_MultiAocis.results);
                                    if (aMulAOCI.length > 1 && this.getView().getModel('oVisibilityModel').getProperty('/sMassUpdateUser') === 'X' && this.getView().getModel('oVisibilityModel').getProperty('/sViewTemplate') === '') {
                                        var aAOCIData = [];
                                        for (var i = 0; aMulAOCI.length > i; i++) {
                                            var sAOCI = aMulAOCI[i].Material;
                                            aAOCIData.push(sAOCI);
                                        }
                                        var sAOCIList = aAOCIData.join(", ");
                                        var sMultiAOCimessage = oBundle.getText("update.MultiAOCI");
                                        MessageBox.information(sMultiAOCimessage + " " + sAOCIList);
                                    }
                                    if (sKeyUser === "X") {
                                        //add propoerties to AOCI data for UI porpose
                                        if (oData.results[0].Multiple_AOCIs.results.length > 0) {
                                            for (var k = 0; k < oData.results[0].Multiple_AOCIs.results.length; k++) {
                                                oData.results[0].Multiple_AOCIs.results[k].bExistingRecord = "X";
                                                oData.results[0].Multiple_AOCIs.results[k].bValidationStatusAOCI = "None";
                                                oData.results[0].Multiple_AOCIs.results[k].bValidationStatusPlant = "None";
                                                oData.results[0].Multiple_AOCIs.results[k].bDelBtnEnabled = true;
                                            }
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/aAOCIData", oData.results[0].Multiple_AOCIs.results);
                                        } else {
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/aAOCIData", []);
                                        }
                                    } else {
                                        if (oData.results[0].BOM.results[0].BomStatus === "12" || oData.results[0].BOM.results[0].BomStatus === "11" || oData.results[0].BOM.results[0].BomStatus === "10") {
                                            this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", true);
                                            this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBtnProposeToolTip);
                                        } else {
                                            this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", false);
                                            this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBOMStatusMsg);
                                        }
                                    }
                                    this.getView().getModel("oRoutingModel").setProperty("/sSetAllocDateAvailable", "No");
                                    //Fetch Classification details
                                    var aClassification = oData.results[0].Classification.results;
                                    if (aClassification.length > 0) {
                                        jQuery.each(aClassification, function (index, oClassification) {
                                            if (oClassification.CHARACT === "DEBITOR") {
                                                this.getView().getModel("oRoutingHeaderModel").setProperty("/DEBITOR", oClassification.VALUE_NEUTRAL);
                                            } else if (oClassification.CHARACT === "PLAN_INDEX") {
                                                this.getView().getModel("oRoutingHeaderModel").setProperty("/PLAN_INDEX", oClassification.VALUE_NEUTRAL);
                                            } else if (oClassification.CHARACT === "ME_AUTO_ALLOC_DATE") {
                                                if (this.getView().getModel("oRoutingModel").getProperty("/sRadioMode") !== "New") {
                                                    this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDate", oClassification.VALUE_NEUTRAL);
                                                    this.getView().getModel("oRoutingModel").setProperty("/selectedCIPlantSetDate", oClassification.VALUE_NEUTRAL);
                                                    this.getView().getModel("oRoutingModel").setProperty("/sSetAllocDateAvailable", "Yes");
                                                }
                                            } else if (oClassification.CHARACT === "ME_AUTO_ALLOC_DATE_TYPE") {
                                                if (this.getView().getModel("oRoutingModel").getProperty("/sRadioMode") !== "New") {
                                                    this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDateMode", oClassification.VALUE_NEUTRAL);
                                                }
                                            }
                                            else if (oClassification.CHARACT === "ME_AUTO_ALLOC_DATE_SOURCE") {
                                                if (this.getView().getModel("oRoutingModel").getProperty("/sRadioMode") !== "New") {
                                                    this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDateSourceSelected", oClassification.VALUE_NEUTRAL);
                                                }
                                            }
                                        }.bind(this));
                                    } else {
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/DEBITOR", "");
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/PLAN_INDEX", "");
                                        if (this.getView().getModel("oRoutingModel").getProperty("/selectedCIPlantSetDate") &&
                                            this.getView().getModel("oRoutingModel").getProperty("/sSetAllocDateConsidered") === "Y") {
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDate", this.getView().getModel("oRoutingModel").getProperty("/selectedCIPlantSetDate"));
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDateMode", "CREATION DATE");
                                        } else {
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDate", "");
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDateMode", "");
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDateSourceSelected", "");
                                        }
                                    }
                                    var Classification_DrpDown = oData.results[0].Classification_DrpDown.results;
                                    var previousObject = {};
                                    var iSourcelength = Classification_DrpDown.length,
                                        sAllocSource = this.getView().getModel("oRoutingHeaderModel").getProperty("/AllocDateSourceSelected"),
                                        sManlDate = this.getView().getModel("oRoutingHeaderModel").getProperty("/AllocDate"),
                                        sManlType = this.getView().getModel("oRoutingHeaderModel").getProperty("/AllocDateMode");
                                    this.getModel("oRoutingHeaderModel").setProperty("/AllocSourceLength", iSourcelength);
                                    if (Classification_DrpDown.length > 0) {
                                        jQuery.each(Classification_DrpDown, function (index, oClassification) {
                                            if (oClassification.CHARACT === "ME_AUTO_ALLOC_DATE") {
                                                previousObject.sDate = oClassification.VALUE_NEUTRAL;
                                            }
                                            if (oClassification.CHARACT === "ME_AUTO_ALLOC_DATE_TYPE") {
                                                previousObject.sDateType = oClassification.VALUE_NEUTRAL;
                                            }
                                            if (oClassification.CHARACT === "ME_AUTO_ALLOC_DATE_SOURCE") {
                                                if (this.getView().getModel("oRoutingModel").getProperty("/sRadioMode") !== "New") {
                                                    if (oClassification.VALUE_NEUTRAL === "TEMPLATE") {
                                                        this.getModel("oRoutingHeaderModel").setProperty("/AllocTempDate", previousObject.sDate);
                                                        this.getModel("oRoutingHeaderModel").setProperty("/AllocTempType", previousObject.sDateType);
                                                    }
                                                    if (oClassification.VALUE_NEUTRAL === "PLANT") {
                                                        this.getModel("oRoutingHeaderModel").setProperty("/AllocPlantDate", previousObject.sDate);
                                                        this.getModel("oRoutingHeaderModel").setProperty("/AllocPlantType", previousObject.sDateType);
                                                    }
                                                    if (oClassification.VALUE_NEUTRAL === "MANUAL") {
                                                        if (sAllocSource === "MANUAL") {
                                                            this.getModel("oRoutingHeaderModel").setProperty("/AllocManlDate", sManlDate);
                                                            this.getModel("oRoutingHeaderModel").setProperty('/AllocDateEnable', true);
                                                            this.getModel("oRoutingHeaderModel").setProperty("/AllocManlType", sManlType);
                                                        } else {
                                                            this.getModel("oRoutingHeaderModel").setProperty("/AllocManlDate", previousObject.sDate);
                                                            this.getModel("oRoutingHeaderModel").setProperty('/AllocDateEnable', false);
                                                            this.getModel("oRoutingHeaderModel").setProperty("/AllocManlType", previousObject.sDateType);
                                                        }
                                                    }
                                                }
                                            }
                                        }.bind(this));
                                    }
                                    //V2.5 -Set Allocation Date
                                    var aAllocSourceData = [];
                                    var sModeName = "";
                                    var j = 0;
                                    for (var i = 0; i < Classification_DrpDown.length; i++) {
                                        if (Classification_DrpDown[i].CHARACT === "ME_AUTO_ALLOC_DATE_SOURCE") {
                                            if (Classification_DrpDown[i].VALUE_NEUTRAL === "TEMPLATE") {
                                                sModeName = oBundle.getText("mlRef.TempDate");
                                            }
                                            if (Classification_DrpDown[i].VALUE_NEUTRAL === "PLANT") {
                                                sModeName = oBundle.getText("mlRef.PlantDate");
                                            }
                                            if (Classification_DrpDown[i].VALUE_NEUTRAL === "MANUAL") {
                                                sModeName = oBundle.getText("mlRef.ManulDate");
                                            }
                                            aAllocSourceData[j] = {
                                                modeKey: Classification_DrpDown[i].VALUE_NEUTRAL,
                                                modeName: sModeName
                                            };
                                            j++;
                                        }
                                    }
                                    this.getModel("oRoutingHeaderModel").setProperty("/aAllocDateSourceData", aAllocSourceData);
                                    var sLongText = formatter.fnHTMLFormat(oData.results[0].Long_Text.results) || ""; //Format to HTML text
                                    this.getView().getModel("oRoutingHeaderModel").setProperty("/sLongText", sLongText);
                                    this.getView().getModel("oRoutingHeaderModel").refresh();
                                    // GGUNO6VD -- MASS UPDATE.
                                    if (this.getView().getModel('oVisibilityModel').getProperty('/sMassUpdateUser') === 'X') {
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/bEnableKeyUserFileds", false);
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/bEnableKeyUserStatus", false);
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/bEnableKeyUserAddImpOprButton", false);
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/bEnableKeyUserOprDelButton", false);
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/aTempAddedOperButton", false);
                                    }
                                    var sMassUpdateUser = oVisibilityModel.getProperty('/sMassUpdateUser');
                                    // Adding Operation reference to Prt inside Operations.
                                    oData.results[0].Operation.results.map(function (oOpr) {
                                        var sRefOpr = oOpr.Vplnr;
                                        oOpr.bOPenPRTBtnEnable = false;
                                        oOpr.bEnableOprTiconFileds = true;
                                        if (sKeyUser === 'X') {
                                            if (oOpr.SLWID === "ZMEAUTO") {
                                                oOpr.bEnableKeyUserWorkCenter = false;
                                                oOpr.bEnableKeyUserNoEmployees = false;
                                                oOpr.bEnableOprClassification = false;
                                            }
                                            if (sMassUpdateUser === 'X') {
                                                oOpr.aTempAddedDelButton = false;
                                                oOpr.bEnableKeyUserFileds = false;
                                                oOpr.bEnableOprFileds = false;
                                                oOpr.bEnableOprTiconFileds = false;
                                                oOpr.bEnableOprDoc = false;
                                                oOpr.bEnableKeyUserOprLongTxt = false;
                                                oOpr.bEnableKeyUserWorkCenter = false;
                                                oOpr.bEnableKeyUserOprShortTxtDesc = false;
                                                oOpr.bEnableKeyUserPRTAdd = false;
                                                oOpr.bEnableKeyUserPRTDel = false;
                                                oOpr.bEnableKeyUserPRTTable = false;
                                                oOpr.bEnableKeyUserNoEmployees = false;
                                                oOpr.bEnableOprClassification = false;
                                            }
                                        }
                                        /*formatting long text -- Ergonomy changes*/
                                        oOpr.Long_Text.results = formatter.fnFormatRteValue(oOpr.Long_Text.results, oOpr.Ltxa1, oOpr.SyncOprText);
                                        oOpr.bLongText_isFormatted = true;
                                        var sLoginUserType = "";
                                        if (sMassUpdateUser === 'X') {
                                            sLoginUserType = "X";
                                        }
                                        oOpr.PRT.results.map(function (oPRT) {
                                            oPRT.sRefOpr = sRefOpr;
                                            oPRT.sLoginMassUpdateUser = sLoginUserType;
                                            oPRT.isChange = "";
                                        });
                                        //V2.3 changes -- STV background calculation --- 
                                        oOpr.bTiconCalInPrg = false;
                                    });
                                    var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                                    var aOperationResultsArray = oData.results[0].Operation.results;
                                    oOperationItemsModel.setProperty("/aOperationItems", aOperationResultsArray);
                                    oOperationItemsModel.setProperty("/bOPenPRTBtnEnable", false);

                                    //function call to check Ticon Background JOB status on initial load of  each routing
                                    this.fnCheckTiconJobStatus(this, "initialLoading");
                                    //Function call to fetch target group numbers for Smart Copy dialog
                                    this.fnGetTargetGroup();
                                    //Function call to fetch BOM Details for Smart Copy dialog
                                    this.fnGetBomDetails();
                                    //function to get the TVRVC standared key list 
                                    this.fnGetStdKeyList();
                                    // New OData call to new TICON service to get values (Ticon_status_1, Ticon_status_2, Ticon_status_3)
                                    this.fnGetTICONStatusValues();
                                    // End
                                    if (sKeyUser === "X") { //Keyuser
                                        sap.m.MessageToast.show(oBundle.getText("loadtemplatesuccessmsg"));
                                    } else { //Enduser
                                        this.fnGetBom(); //To Get BOM data
                                        // v2.3 --- combine bom -
                                        this.fnMangeMergeBtnVisibility();
                                        sap.m.MessageToast.show(oBundle.getText("loadroutingsuccessmsg"));
                                    }
                                    // V2.4 -- MASS UPDATE
                                    this.fnGetOperationList();
                                }
                                this.getView().getModel("oRoutingHeaderModel").updateBindings(true);
                                this.getModel("oVisibilityModel").updateBindings(true);
                                this.getView().getModel("oOperationItemsModel").updateBindings(true);
                            }.bind(this),
                            error: function (error) {
                                oBusyIndicator.close();
                                this.fnCheckError(error);
                            }.bind(this)
                        });
                    }
                } else {
                    if (sKeyUser === "X") {
                        var aMultipleAOCI = oRoutingModel.getProperty("/aMAOCI");
                        var aNewMAOCI = [];
                        var sMMaterial = oRoutingModel.getProperty("/selectedCI");
                        var sMPlant = oRoutingModel.getProperty("/selectedCIPlant");
                        aNewMAOCI.push({
                            Material: sMMaterial,
                            Plant: sMPlant,
                            Loekz: "",
                            bExistingRecord: "N",
                            bValidationStatusAOCI: "None",
                            bValidationStatusPlant: "None",
                            bDelBtnEnabled: true
                        });
                        aMultipleAOCI.map(function (oItem) {
                            aNewMAOCI.push({
                                Material: oItem.Material,
                                Plant: oItem.Plant,
                                Loekz: "",
                                bExistingRecord: "N",
                                bValidationStatusAOCI: "None",
                                bValidationStatusPlant: "None",
                                bDelBtnEnabled: true
                            });
                        });
                        this.getView().getModel("oRoutingHeaderModel").setProperty("/aAOCIData", aNewMAOCI);
                    }
                }
            },
            fnCheckTiconJobStatus: function (that, sSource) {
                // Modified below code to pass correct Operation path.
                var sOprPath = "";
                //Job Status
                if (sSource === "refreshBtn") {
                    that.fnCheckJobStatus(
                        this.getView().getController(),
                        sSource,
                        sOprPath
                    );
                } else {
                    that.fnCheckJobStatus(that, sSource, sOprPath);
                }
            },
            fnCheckJobStatus: function (that, sSource, sOprPath) {
                //console.log("Refresh Odata call Made to backend to check session issue", new Date());
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                var oTiconModel = that.getOwnerComponent().getModel("oTiconModel");
                var oRoutingHeaderModel = that.getView().getModel("oRoutingHeaderModel");
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var aOperationItems = oOperationItemsModel.getProperty("/aOperationItems");
                var sKeyUser;
                var aFilters = [new sap.ui.model.Filter("Plnnr", "EQ", oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No")),
                new sap.ui.model.Filter("Plnal", "EQ", oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr"))
                ];
                /*PlnnrAlt value : MARS-templatenumber-groupno
                Below code is to get template group number and set filter values accordingly depending on KeyUser/EndUser application
                */
                var plnnrS; //Template group number
                var vornr; //Operation number
                var plntyS; //Template Type S/N
                var PlnnrAlt = oRoutingHeaderModel.getProperty("/aHeaderDetails/PlnnrAlt");
                // Pass Routing N / S based on key user / end user
                sKeyUser = that.getView().getModel("oRoutingModel").getProperty("/keyUser");
                if (sKeyUser === "X") {
                    //Key User
                    aFilters.push(new sap.ui.model.Filter("Plnty", "EQ", "S"));
                    var sRoutingIndex = that.getView().getModel("oRoutingModel").getProperty("/sRoutingIndex");
                    //sRoutingIndex to check selected radio button
                    //0:New Template 1:Copy From Routing 2:Copy From Template 3:Change Template
                    if (sRoutingIndex === 0) {
                        var oVisibilityModel = that.getView().getModel("oVisibilityModel");
                        oVisibilityModel.setProperty("/bTiconJobStatus", false);
                        oVisibilityModel.refresh();
                    } else if (sRoutingIndex === 1) {
                        //Passing the selectedGroup number from initial screen
                        plnnrS = that.getView().getModel("oRoutingModel").getProperty("/selectedGroup");
                        plntyS = "N";
                        //commenting below line as back end now require any one operation number 21/02/23
                        //Fetching one normal operation number from aOperationItems
                        if (aOperationItems.length > 0) {
                            for (var i = 0; i < aOperationItems.length; i++) {
                                if (aOperationItems[i].Vornr !== "" && aOperationItems[i].Vplnr === "") {
                                    vornr = aOperationItems[i].Vornr;
                                    break;
                                }
                            }
                        }
                    } else if (sRoutingIndex === 2) {
                        //Passing the selectedGroup number from initial screen
                        plnnrS = that.getView().getModel("oRoutingModel").getProperty("/selectedGroup");
                        plntyS = "S";
                        //commenting below line as back end now require any one operation number 21/02/23
                        //Fetching one normal operation number from aOperationItems
                        if (aOperationItems.length > 0) {
                            for (var i = 0; i < aOperationItems.length; i++) {
                                if (aOperationItems[i].Vornr !== "" && aOperationItems[i].Vplnr === "") {
                                    vornr = aOperationItems[i].Vornr;
                                    break;
                                }
                            }
                        }
                    } else if (sRoutingIndex === 3) {
                        plnnrS = "";
                        plntyS = "";
                        //Fetching one normal operation number from aOperationItems
                        if (aOperationItems.length > 0) {
                            for (var i = 0; i < aOperationItems.length; i++) {
                                if (aOperationItems[i].Vornr !== "" && aOperationItems[i].Vplnr === "") {
                                    vornr = aOperationItems[i].Vornr;
                                    break;
                                }
                            }
                        }
                    } else {
                        plnnrS = "";
                        plntyS = "";
                        vornr = "";
                    }
                } else {
                    //End User
                    aFilters.push(new sap.ui.model.Filter("Plnty", "EQ", "N"));
                    //Checking if PlnnrAlt value is null or not
                    if (PlnnrAlt !== "") {
                        var PlnnrAltArray = PlnnrAlt.split("-");
                        //Checking whether first index value is MARS or not
                        if (PlnnrAltArray[0] === "MARS") {
                            plnnrS = PlnnrAltArray[1]; //Template Group Number
                            plntyS = "S";
                            //vornr = sOprPath; //sOprPath value is null
                            if (aOperationItems.length > 0) {
                                for (i = 0; i < aOperationItems.length; i++) {
                                    if (aOperationItems[i].Vornr !== "" && aOperationItems[i].Vplnr === "") {
                                        vornr = aOperationItems[i].Vornr;
                                        break;
                                    }
                                }
                            }
                        } else {
                            plnnrS = "";
                            plntyS = "";
                            if (aOperationItems.length > 0) {
                                for (i = 0; i < aOperationItems.length; i++) {
                                    if (aOperationItems[i].Vornr !== "" && aOperationItems[i].Vplnr === "") {
                                        vornr = aOperationItems[i].Vornr;
                                        break;
                                    }
                                }
                            }
                        }
                    } else {
                        //If PlnnrAlt value null, then pass template number and type as null
                        plnnrS = "";
                        plntyS = "";
                        if (aOperationItems.length > 0) {
                            for (i = 0; i < aOperationItems.length; i++) {
                                if (aOperationItems[i].Vornr !== "" && aOperationItems[i].Vplnr === "") {
                                    vornr = aOperationItems[i].Vornr;
                                    break;
                                }
                            }
                        }
                    }
                }
                aFilters.push(new sap.ui.model.Filter("Plnnr_s", "EQ", plnnrS));
                aFilters.push(new sap.ui.model.Filter("Plnty_s", "EQ", plntyS));
                aFilters.push(new sap.ui.model.Filter("Vornr", "EQ", vornr));
                // End
                oTiconModel.read("/ET_Job_StatusSet", {
                    filters: aFilters,
                    async: true,
                    success: function (oData) {
                        var status = oData.results[0].Status;
                        //var oMessageToast = sap.m.MessageToast();
                        if (status === "F") {
                            var sIntervalID = oRoutingHeaderModel.getProperty("/sIntervalID");
                            var isStatustoShowmsg = oRoutingHeaderModel.getProperty("/isStatustoShowmsg");
                            if (sIntervalID !== undefined && (sSource === "timeEvent" || sSource === "initialLoading")) {
                                //jQuery.sap.clearIntervalCall(sIntervalID);
                                clearInterval(sIntervalID);
                                oRoutingHeaderModel.setProperty("/sIntervalID", undefined);
                            }
                            oVisibilityModel = that.getView().getModel("oVisibilityModel");
                            if (isStatustoShowmsg) {
                                sap.m.MessageToast.show(oBundle.getText("update.jobcomplete"), {
                                    duration: 5000
                                });
                                oRoutingHeaderModel.setProperty("/isStatustoShowmsg", false);
                            }
                            oVisibilityModel.setProperty("/bTiconJobStatus", false);
                            oVisibilityModel.refresh();
                        } else {
                            if (sSource === "refreshBtn") {
                                sap.m.MessageToast.show(oBundle.getText("update.jobrunning"), {
                                    duration: 5000
                                });
                            }
                        }
                    }.bind(that),
                    error: function (error) {
                        that.fnCheckError(error);
                    }.bind(that)
                });
            },
            /**Description : This method is used to get Smart Copy Target Group numbers */
            fnGetTargetGroup: function () {
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel"),
                    oBundle = this.getView().getModel("i18n").getResourceBundle(),
                    sLinedCis = oBundle.getText("linkedCis"),
                    oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel"),
                    oRoutingModel = this.getOwnerComponent().getModel("oRoutingModel"),
                    sMaterial = oRoutingHeaderModel.getProperty("/aHeaderDetails/Material"),
                    sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant");
                var oMultiCIs = [];
                var sMultiCIML = "";
                var aGroup;
                var sSelTargetGroup;
                var aFilters = [
                    new sap.ui.model.Filter("End_User", FilterOperator.EQ, "X"),
                    new sap.ui.model.Filter("Key_User", FilterOperator.EQ, ""),
                    new sap.ui.model.Filter("Material", FilterOperator.EQ, sMaterial),
                ];
                oDataModel.read("/ET_MaterialSet", {
                    filters: aFilters,
                    urlParameters: {
                        $expand: ["Plant/Group/Available_GC", "Plant/CI"],
                    },
                    async: true,
                    success: function (oData) {
                        if (oData.results.length > 0) {
                            var aPlant = oData.results[0].Plant.results;
                            if (aPlant.length > 0) {
                                for (var i = 0; i < aPlant.length; i++) {
                                    if (sPlant === aPlant[i].Plant) {
                                        oRoutingModel.setProperty("/sDefaultPlantSetDate", aPlant[i].Alloc_date);
                                        if (oRoutingModel.getProperty("/sRadioMode") === "Change" &&
                                            oRoutingModel.getProperty("/sSetAllocDateAvailable") === "No"
                                        ) {
                                            oRoutingModel.setProperty("/selectedCIPlantSetDate", aPlant[i].Alloc_date);
                                            oRoutingHeaderModel.setProperty("/AllocDate", aPlant[i].Alloc_date);
                                            oRoutingHeaderModel.setProperty("/AllocDateMode", "CREATION DATE");
                                        }
                                        break;
                                    } else {
                                        aGroup = "";
                                    }
                                }
                                aGroup = aPlant[i].Group.results;
                                for (var i = 0; i < aPlant.length; i++) {
                                    if (sPlant === aPlant[i].Plant) {
                                        var sMultiCI = aPlant[i].CI.results;
                                        sMultiCI.forEach(function (oEle) {
                                            oMultiCIs.push(oEle.CI);
                                        });
                                    } else {
                                        continue;
                                    }
                                }
                                sMultiCIML = oMultiCIs.join(", ");
                                oRoutingHeaderModel.setProperty("/MLCompAsgnMultiCIs", sMultiCIML);
                                var sMultiCITooltip;
                                if (oMultiCIs.length >= 1) {
                                    sMultiCITooltip = [];
                                    for (var i = 1; i <= oMultiCIs.length; i++) {
                                        sMultiCITooltip[i] = oMultiCIs[i - 1];
                                    }
                                    sMultiCITooltip[0] = sLinedCis;
                                    sMultiCITooltip = sMultiCITooltip.join('\n');
                                } else {
                                    sMultiCITooltip = oMultiCIs.join();
                                }
                                oRoutingHeaderModel.setProperty("/MLMultiCITooltip", sMultiCITooltip);
                                if (aGroup.length > 0) {
                                    oOperationItemsModel.setProperty("/aTargetGroupNo", aGroup);
                                } else {
                                    oOperationItemsModel.setProperty("/aTargetGroupNo", "");
                                }
                                if (aGroup.length === 1) {
                                    sSelTargetGroup = aGroup[0].Group_No;
                                    oOperationItemsModel.setProperty("/selTargetGroupNo", sSelTargetGroup);
                                } else {
                                    sSelTargetGroup = "";
                                    oOperationItemsModel.setProperty("/selTargetGroupNo", sSelTargetGroup);
                                }
                            }
                        }
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            /**Description : This method is used to get Smart Copy Bom number and AltBom details*/
            fnGetBomDetails: function () {
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sMaterial = oRoutingHeaderModel.getProperty("/aHeaderDetails/Material");
                var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant");
                var sTask_type = oRoutingHeaderModel.getProperty("/aHeaderDetails/Task_type");
                var aFilters = [
                    new sap.ui.model.Filter("Material", FilterOperator.EQ, sMaterial),
                    new sap.ui.model.Filter("Plant", FilterOperator.EQ, sPlant),
                    new sap.ui.model.Filter("Task_type", FilterOperator.EQ, sTask_type),
                ];
                oDataModel.read("/ET_BOM_HedrSet", {
                    filters: aFilters,
                    urlParameters: {
                        $expand: ["Items"],
                    },
                    async: true,
                    success: function (oData) {
                        if (oData.results.length > 0) {
                            oOperationItemsModel.setProperty("/aSmartCopyBomDetails", oData.results);
                        } else {
                            oOperationItemsModel.setProperty("/aSmartCopyBomDetails", []);
                        }
                        oOperationItemsModel.updateBindings(true);
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            /* //function to get the TVRVC standared key list //StdKey US --- SKAGP1R5  */
            fnGetStdKeyList: function () {
                var oRoutingModel = this.getView().getModel("oRoutingModel"),
                    oDataModel = this.getOwnerComponent().getModel("oSrvModel"),
                    oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    aOprItems = oOperationItemsModel.getProperty("/aOperationItems"),
                    aStdKeys;
                oDataModel.read("/ET_PRT_STD_TXT_KEY_WERKSSet", {
                    success: function (oData) {
                        aStdKeys = oData.results.map(function (oItem) {
                            return oItem.WERKS;
                        });
                        aOprItems.forEach(function (oItem) {
                            if (aStdKeys.indexOf(oItem.Werks) > -1) {
                                oItem.bStdKeyReq = true;
                            } else {
                                oItem.bStdKeyReq = false;
                            }
                        });
                        oRoutingModel.setProperty("/stdKeyList", aStdKeys);
                        oOperationItemsModel.setProperty("/aOperationItems", aOprItems);
                    },
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this)
                })

            },
            // New OData call to new TICON service to get values (Ticon_status_1, Ticon_status_2, Ticon_status_3)
            fnGetTICONStatusValues: function (ref) {
                var that = this;
                var oRoutingModel = that.getView().getModel("oRoutingModel");
                var sKeyUser = oRoutingModel.getProperty("/keyUser");
                var oTiconModel = that.getOwnerComponent().getModel("oTiconModel");
                var oRoutingHeaderModel = that.getView().getModel("oRoutingHeaderModel");
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var aOperationItems = oOperationItemsModel.getProperty("/aOperationItems");
                //This is to pass filter for Key User and End User
                if (sKeyUser === "X") {
                    var Task_type = "S";
                } else {
                    Task_type = "N";
                }
                // End
                var aFilters = [
                    new sap.ui.model.Filter("Material", sap.ui.model.FilterOperator.EQ, oRoutingHeaderModel.getProperty("/aHeaderDetails/Material")),
                    new sap.ui.model.Filter("Plant", sap.ui.model.FilterOperator.EQ, oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant")),
                    new sap.ui.model.Filter("Group_No", sap.ui.model.FilterOperator.EQ, oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No")),
                    new sap.ui.model.Filter("Grp_Cntr", sap.ui.model.FilterOperator.EQ, oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr")),
                    new sap.ui.model.Filter("Task_type", sap.ui.model.FilterOperator.EQ, Task_type)
                ];
                oTiconModel.read("/ET_Ticon_StatusSet", {
                    filters: aFilters,
                    async: true,
                    success: function (oData) {
                        if (oData.results.length > 0) {
                            var aData = oData.results;
                            oOperationItemsModel.setProperty("/aOperationTiconItems", aData);
                            // Looping to get values to old service
                            for (var i = 0; i < aData.length; i++) {
                                for (var y = 0; y < aOperationItems.length; y++) {
                                    if (aData[i]["Vornr"] === aOperationItems[y]["Vornr"]) {
                                        aOperationItems[y]["Ticon_status_1"] = aData[i]["Ticon_status_1"];
                                        aOperationItems[y]["Ticon_status_2"] = aData[i]["Ticon_status_2"];
                                        aOperationItems[y]["Ticon_status_3"] = aData[i]["Ticon_status_3"];
                                    }
                                }
                            }
                            oOperationItemsModel.refresh();
                        }
                    }.bind(this),
                    error: function (error) {
                        that.fnCheckError(error);
                    }.bind(this)
                });
            },
            /*Params : N/A This method used to fetch bom details*/
            fnGetBom: function () {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sBOMStatusMsg = oBundle.getText("proposal.BOMStatusMsg");
                var sBtnProposeToolTip = oBundle.getText("proposal.BtnTxtToolTip");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                oRoutingHeaderModel.setProperty("/BOM", {
                    "Items": {
                        "results": []
                    }
                });
                var aHeaderDetails = oRoutingHeaderModel.getProperty("/aHeaderDetails");
                if (aHeaderDetails.BOM.results.length > 0) {
                    oRoutingHeaderModel.setProperty("/BOM", aHeaderDetails.BOM.results[0]);
                    oRoutingHeaderModel.setProperty("/selectedBomNo", aHeaderDetails.BOM.results[0].BomNo);
                    oRoutingHeaderModel.setProperty("/selectedAltBOM", aHeaderDetails.BOM.results[0].AltBom);
                    oRoutingHeaderModel.setProperty("/aBomNos", aHeaderDetails.BOM.results);
                    oRoutingHeaderModel.setProperty("/noBomText", "");
                    if (aHeaderDetails.BOM.results[0].BomStatus === "12" || aHeaderDetails.BOM.results[0].BomStatus === "11" || aHeaderDetails.BOM.results[0].BomStatus === "10") {
                        this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", true);
                        this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBtnProposeToolTip);
                    } else {
                        this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", false);
                        this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBOMStatusMsg);
                    }
                    oRoutingHeaderModel.updateBindings(true);
                    var sSelectedAltBOMPath = oRoutingHeaderModel.getProperty("/sSelectedAltBOMPath");
                    if (sSelectedAltBOMPath !== undefined) {
                        var oBOM = oRoutingHeaderModel.getProperty(sSelectedAltBOMPath);
                        oRoutingHeaderModel.setProperty("/BOM", oBOM);
                        oRoutingHeaderModel.setProperty("/selectedBomNo", oBOM.BomNo);
                        oRoutingHeaderModel.setProperty("/selectedAltBOM", oBOM.AltBom);
                        oRoutingHeaderModel.refresh();
                        if (oBOM.BomStatus === "12" || oBOM.BomStatus === "11" || oBOM.BomStatus === "10") {
                            this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", true);
                            this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBtnProposeToolTip);
                        } else {
                            this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", false);
                            this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBOMStatusMsg);
                        }
                    }
                    // delect allocation adding individual icon property for BOM items
                    var oBomItems = oRoutingHeaderModel.getProperty("/BOM/Items/results");
                    for (var i = 0; i < oBomItems.length; i++) {
                        var oBomItem = oBomItems[i];
                        if (oBomItem.Vornr === '') {
                            oBomItem.delComp = false;
                        } else {
                            oBomItem.delComp = true;
                        }
                    }
                } else {
                    var HTMLBomText = oBundle.getText("bom.nobom");
                    oRoutingHeaderModel.setProperty("/noBomText", HTMLBomText);
                    oRoutingHeaderModel.setProperty("/BOM", {
                        "Items": {
                            "results": []
                        }
                    });
                    oRoutingHeaderModel.setProperty("/selectedBomNo", "");
                    oRoutingHeaderModel.setProperty("/selectedAltBOM", "");
                    oRoutingHeaderModel.setProperty("/aBomNos", []);
                }
                var oTable = this.byId("BOMItemsId");
                var oBinding = oTable.getBinding("rows");
                var filter1 = new sap.ui.model.Filter("Child_indicator", sap.ui.model.FilterOperator.NE, 'X');
                var filter2 = oBinding.aFilters[0];
                var oCombinedFilter = [].concat(filter2 || [], filter1);
                oBinding.filter(oCombinedFilter);
            },
            /* function to mange the visibility of Merge Button*/
            fnMangeMergeBtnVisibility: function () {
                var oData = this.getView().getModel("oRoutingHeaderModel").getProperty("/BOM/Items/results");
                for (var i = 0; i < oData.length; i++) {
                    if (oData[i].ItemCateg === "L" && !oData[i].bShowMergeBtn) {
                        for (var j = i + 1; j < oData.length; j++) {
                            if (oData[i].ItemCateg === oData[j].ItemCateg && oData[i].Component === oData[j].Component && oData[j].Comp_level === "0" && oData[i].Comp_level === "0") {
                                oData[i].bShowMergeBtn = true;
                                oData[j].bShowMergeBtn = true;
                            }
                        }
                    }
                }
                this.getView().getModel("oRoutingHeaderModel").updateBindings(true);
            },
            fnGetOperationList: function () {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var aOpData = oOperationItemsModel.getProperty("/aOperationItems");
                var aOprList = [];
                for (var i = 0; i < aOpData.length; i++) {
                    aOprList.push({
                        sOprText: aOpData[i].Vornr,
                        sOprKey: aOpData[i].Vornr,
                        sOpTyp: aOpData[i].SLWID
                    });
                }
                oOperationItemsModel.setProperty("/sOperationList", aOprList);
            },
            /*Description : Method to enable Open VMP_Maintain button*/
            fnEnableVMPButton: function () {
                var sUrl = "/ET_VMP_CHECKSet";
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel"),
                    Material = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj").Material;
                var aFilter = [new Filter("Material", FilterOperator.EQ, Material)];
                oDataModel.read(sUrl, {
                    filters: aFilter,
                    success: function (oData) {
                        if (oData.results[0].VMP_FLAG === "X")
                            this.getModel("oVisibilityModel").setProperty(
                                "/VMPButtonEnabled",
                                true
                            );
                        else
                            this.getModel("oVisibilityModel").setProperty(
                                "/VMPButtonEnabled",
                                false
                            );
                    }.bind(this),
                    error: function (error) { },
                });
            },
            fnGetStatusData: function (oEvent) {
                var that = this;
                var oDataModel = that.getOwnerComponent().getModel("oSrvModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oParameters = {
                    async: true,
                    success: function (oData, oResponse) {
                        oRoutingHeaderModel.setProperty("/aStatusData", oData.results);
                        oRoutingHeaderModel.setProperty("/sKeyUserCheck", oData.results[0].Key_User);
                    },
                    error: function (err) {
                        that.fnCheckError(err);
                    },
                };
                oDataModel.read("/ET_Status_NSet", oParameters);
            },
            /* Params : N/A This method triggered  after BOM resizing */
            fnResize: function () {
                var oRoutingId = this.getView().byId("SplitterID").getId() + "-content-1";
                var oRoutingWidth = $("#" + oRoutingId).width();
                if (Number(oRoutingWidth) < 1299) {
                    this.getView().byId("listBindingOpr").setWidth("1220px");
                    this.getView().byId("RoutingHeaderId").setWidth("1220px");
                } else {
                    this.getView().byId("listBindingOpr").setWidth("96%");
                    this.getView().byId("RoutingHeaderId").setWidth("96%");
                }
                this.getView().byId("ScrollId").setWidth(oRoutingWidth + "px");
            },
            /* Params : oEvent This method used to fetch bom details from selected BOM Number*/
            fnfetchBom: function (oEvent) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sBOMStatusMsg = oBundle.getText("proposal.BOMStatusMsg");
                var sBtnProposeToolTip = oBundle.getText("proposal.BtnTxtToolTip");
                var sSelectedKey = oEvent.getSource().getSelectedKey();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                if (sSelectedKey) {
                    var oBOM = oEvent.getSource().getSelectedItem().getBindingContext("oRoutingHeaderModel").getObject();
                    var sPath = oEvent.getSource().getSelectedItem().getBindingContext("oRoutingHeaderModel").getPath();
                    oRoutingHeaderModel.setProperty("/sSelectedAltBOMPath", sPath);
                    oRoutingHeaderModel.setProperty("/BOM", oBOM);
                    oRoutingHeaderModel.setProperty("/selectedBomNo", oBOM.BomNo);
                    oRoutingHeaderModel.setProperty("/selectedAltBOM", oBOM.AltBom);
                    // v2.3 --- combine bom --- SKAGP1R5
                    this.fnMangeMergeBtnVisibility();
                    oRoutingHeaderModel.refresh();
                    if (
                        oBOM.BomStatus === "12" ||
                        oBOM.BomStatus === "11" ||
                        oBOM.BomStatus === "10"
                    ) {
                        this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", true);
                        this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBtnProposeToolTip);
                    } else {
                        this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", false);
                        this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBOMStatusMsg);
                    }
                }
            },
            /* function to mange the visibility of Merge Button*/
            fnMangeMergeBtnVisibility: function () {
                var oData = this.getView().getModel("oRoutingHeaderModel").getProperty("/BOM/Items/results");
                for (var i = 0; i < oData.length; i++) {
                    if (oData[i].ItemCateg === "L" && !oData[i].bShowMergeBtn) {
                        for (var j = i + 1; j < oData.length; j++) {
                            if (oData[i].ItemCateg === oData[j].ItemCateg && oData[i].Component === oData[j].Component && oData[j].Comp_level === "0" && oData[i].Comp_level === "0") {
                                oData[i].bShowMergeBtn = true;
                                oData[j].bShowMergeBtn = true;
                                //break;
                            }
                        }
                    }
                }
                this.getView().getModel("oRoutingHeaderModel").updateBindings(true);
            },
            // Method for opening BOM CS02 WEB GUI link.
            fnOpenWEBGUICS02: function () {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel"),
                    sBOMUsage = oRoutingHeaderModel.getProperty("/BOM/BomUsage"),
                    sAltBOM = oRoutingHeaderModel.getProperty("/BOM/AltBom"),
                    sChangeNum = oRoutingHeaderModel.getProperty("/BOM/ChgNo"),
                    sPlant = oRoutingHeaderModel.getProperty("/BOM/Plant"),
                    sMaterial = oRoutingHeaderModel.getProperty("/aHeaderDetails/Material");
                var aFilters = [
                    new sap.ui.model.Filter("TCode", FilterOperator.EQ, "CS02"),
                ];
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.read("/ET_Web_GuiSet", {
                    filters: aFilters,
                    success: function (oData) {
                        var sLink = oData.results[0].Link;
                        sap.m.URLHelper.redirect(
                            sLink +
                            "?%20RC29N-MATNR=" +
                            sMaterial +
                            "&RC29N-WERKS=" +
                            sPlant +
                            "&RC29N-STLAN=" +
                            sBOMUsage +
                            "&RC29N-STLAL=" +
                            sAltBOM +
                            "&RC29N-AENNR=" +
                            sChangeNum +
                            "&~OKCODE=FCPU#",
                            true
                        );
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            // Method to refresh BOM details when the details are changed using SAP GUI screen when clicked on BOM change CS02.
            fnRefreshBOMDetails: function () {
                var oObj = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sBOMStatusMsg = oBundle.getText("proposal.BOMStatusMsg");
                var sBtnProposeToolTip = oBundle.getText("proposal.BtnTxtToolTip");
                if (oObj.Material && oObj.Plant && oObj.Group_No && oObj.Grp_Cntr) {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilters = [new sap.ui.model.Filter("Material", FilterOperator.EQ, oObj.Material),
                    new sap.ui.model.Filter("Plant", FilterOperator.EQ, oObj.Plant),
                    new sap.ui.model.Filter("Group_No", FilterOperator.EQ, oObj.Group_No),
                    new sap.ui.model.Filter("Grp_Cntr", FilterOperator.EQ, oObj.Grp_Cntr),
                    //passing task type as we are passing same in main call while fetching the data -- 28-10-2022 
                    new sap.ui.model.Filter("Task_type", FilterOperator.EQ, oObj.Task_type)
                    ];
                    var oBusyIndicator = new BusyDialog();
                    oBusyIndicator.open();
                    oDataModel.read("/ET_Rout_HdrSet", {
                        filters: aFilters,
                        async: true,
                        urlParameters: {
                            "$expand": ["BOM/Items"]
                        },
                        success: function (oData) {
                            oBusyIndicator.close();
                            if (oData.results.length > 0) {
                                this.getView().getModel("oRoutingHeaderModel").setProperty("/aHeaderDetails", oData.results[0]);
                                this.fnGetBom(); //To Get BOM data
                                this.fnMangeMergeBtnVisibility();
                                this.getView().getModel("oRoutingHeaderModel").refresh();
                            }
                            //enable save button
                            this.getModel("oVisibilityModel").setProperty("/bSavedBomSplitData", true);
                            this.getModel("oVisibilityModel").setProperty("/bUnsavedSelectAltBom", true);
                            this.getModel("oVisibilityModel").setProperty("/bProposeQuickAssignBtn", true);
                            this.getModel("oVisibilityModel").setProperty("/sAlternateGrpCntrForProposedML", "");
                            this.getModel("oVisibilityModel").setProperty("/bProposeAllocateBtnVisible", false);
                            this.getModel("oVisibilityModel").setProperty("/ProposeByCategoryAccurate", true);
                            this.getModel("oVisibilityModel").setProperty("/ProposeByCategoryHigh", true);
                            this.getModel("oVisibilityModel").setProperty("/ProposeByCategoryMedium", true);
                            this.getModel("oVisibilityModel").setProperty("/ProposeByCategoryLow", true);
                            this.getModel("oVisibilityModel").setProperty("/ProposeByCategoryAccurateIcon", false);
                            this.getModel("oVisibilityModel").setProperty("/ProposeByCategoryHighIcon", false);
                            this.getModel("oVisibilityModel").setProperty("/ProposeByCategoryMediumIcon", false);
                            this.getModel("oVisibilityModel").setProperty("/ProposeByCategoryLowIcon", false);
                            this.getModel("oVisibilityModel").setProperty("/bBOMSplitBtnEnabled", true);
                            this.getModel("oVisibilityModel").setProperty("/sGobalExpand", true);
                            this.getModel("oVisibilityModel").setProperty("/sGobalCollapse", false);
                        }.bind(this),
                        error: function (error) {
                            oBusyIndicator.close();
                            this.fnCheckError(error);
                        }.bind(this)
                    });
                }
            },
            /*function to call the backend odata service*/
            fnValidOrSaveBOM: function (oEvent, sAction) {
                var that = this;
                var oBomData = this.getModel("oRoutingHeaderModel").getData().BOM,
                    oPayload = JSON.parse(JSON.stringify(oBomData)),
                    oDataMdl = this.getModel("oSrvModel"),
                    oBusyIndicator = new BusyDialog(),
                    oBundle = this.getView().getModel("i18n").getResourceBundle(),
                    sFormat = this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM") || ",",
                    aItems = [];
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oPayload.Items.results.forEach(
                    function (oItem) {
                        delete oItem.__metadata;
                        delete oItem.iParentIndex;
                        delete oItem.bChild;
                        delete oItem.uid;
                        delete oItem.delComp;
                        delete oItem.iParentItemNo;
                        delete oItem.UnRead;
                        delete oItem.bBomCombineChange;
                        delete oItem.bShowMergeBtn;
                        delete oItem.ItemText1VS;
                        if (oItem.isNewComp !== undefined) {
                            delete oItem.isNewComp;
                            delete oItem.isNewSNo;
                        }
                        if (oItem.CapturedItemCat !== undefined) {
                            delete oItem.CapturedItemCat;
                        }
                        //send the value to in user format as backend expecting it
                        if (typeof oItem.Component_qty === "number") {
                            oItem.Component_qty = oItem.Component_qty.toString();
                        }
                        if (sAction === "save" || sAction === "validate") {
                            if (oItem.BulkMat === false) {
                                oItem.BulkMat_flag = "!";
                            } if (oItem.BulkMat === true) {
                                oItem.BulkMat_flag = "X";
                            } if (oItem.RecAllowd === false) {
                                oItem.RecAllowd_flag = "!";
                            } if (oItem.RecAllowd === true) {
                                oItem.RecAllowd_flag = "X";
                            }
                            if (oItem.RelCost === "") {
                                oItem.RelCost = "!";
                            }
                        }
                        oItem.VsiNo = oItem.VsiNo.toString();
                        aItems.push(oItem);
                    }.bind(this)
                );
                if (sAction === "save") {
                    oPayload.SaveFlag = "X";
                    oPayload.Items = aItems;
                    this.fnSavePayload(sAction, oPayload);
                }
                if (sAction === "validate") {
                    oPayload.SaveFlag = "";
                    oPayload.Items = aItems;
                    this.fnSavePayload(sAction, oPayload);
                }
                //For BOM status 10
                if (sAction === "status") {
                    var sMsg = oBundle.getText("statusT.confirmMsg");
                    oBomData.BomStatus = "10";
                    oPayload.SaveFlag = "T";
                    oPayload.Items = aItems;
                    var that = this;
                    MessageBox.confirm(sMsg, {
                        icon: MessageBox.Icon.CONFIRM,
                        actions: [MessageBox.Action.YES, MessageBox.Action.NO],
                        initialFocus: MessageBox.Action.YES,
                        onClose: function (sButton) {
                            if (sButton === MessageBox.Action.YES) {
                                that.getModel("oVisibilityModel").setProperty("/bRuleSetMessage", false);
                                that.getModel("oVisibilityModel").setProperty("/Rule_InfoMsg", []);
                                that.fnSavePayload(sAction, oPayload);
                            } else {
                                return;
                            }
                        },
                    });
                }

            },
            fnSavePayload: function (sAction, oPayload) {
                var oDataMdl = this.getOwnerComponent().getModel("oSrvModel");
                var oBusyIndicator = new BusyDialog();
                oBusyIndicator.open();
                //send the data to backend
                oDataMdl.create("/ET_BOM_HedrSet", oPayload, {
                    success: function (oData) {
                        oBusyIndicator.close();
                        this.fnRefreshBOMDetails();
                        if (sAction === "save") {
                            sap.m.MessageToast.show(
                                this.getView().getModel("i18n").getResourceBundle().getText("bomSaved")
                            );
                        } else if (sAction === "status") {
                            sap.m.MessageToast.show(
                                this.getView().getModel("i18n").getResourceBundle().getText("statusT.popUp")
                            );
                        } else {
                            sap.m.MessageToast.show(
                                this.getView().getModel("i18n").getResourceBundle().getText("bomValidated")
                            );
                        }
                        this.getView().getModel("message").refresh();
                    }.bind(this),
                    error: function (error) {
                        oBusyIndicator.close();
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            /* Method: fnGoToReuseBOM Description: this function is used to open the Reuse BOM Application in new tab...*/
            fnGoToReuseBOM: function () {
                var that = this;
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                var sReuseBOMWarningMsg = oBundle.getText("Reuse.ReuseBOMWarningMsg");
                var sUser = "EndUser";
                var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant");
                var sGroup = oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No");
                var sGroupCounter = oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr");
                var sMaterial = oRoutingHeaderModel.getProperty("/aHeaderDetails/Material");
                var sBOM = oRoutingHeaderModel.getProperty("/BOM/BomNo");
                var sBOMAlt = oRoutingHeaderModel.getProperty("/selectedAltBOM");
                var sBOMStatus = oRoutingHeaderModel.getProperty("/BOM/BomStatus");
                if (sBOMStatus === "10" || sBOMStatus === "11" || sBOMStatus === "12") {
                    var oParam = {
                        M: sMaterial,
                        P: sPlant,
                        G: sGroup,
                        GC: sGroupCounter,
                        BN: sBOM,
                        BA: sBOMAlt,
                        User: sUser,
                    };
                    var oCrossAppNavigator = sap.ushell.Container.getService("CrossApplicationNavigation");
                    // get a handle on the global XAppNav service
                    var hash = (oCrossAppNavigator && oCrossAppNavigator.hrefForExternal({
                        target: {
                            semanticObject: "ZSO_CFE2_ME_REUSE",
                            action: "display",
                        },
                        params: oParam,
                    })) || "";
                    var url = window.location.href.split("#")[0] + hash;
                    sap.m.URLHelper.redirect(url, true);
                    var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                    oVisibilityModel.setProperty("/bBOMSplitBtnEnabled", false);
                } else {
                    MessageBox.warning(sReuseBOMWarningMsg, {
                        icon: MessageBox.Icon.WARNING,
                        actions: [MessageBox.Action.OK],
                        initialFocus: MessageBox.Action.OK,
                        onClose: function (sButton) {
                            if (sButton === MessageBox.Action.OK) {
                            }
                        }.bind(this),
                    });
                }
            },
            /** Method : fnOpenWEBGUIIPPS
            ** Description : Function to jump to the  MM01 in new tab from BOM area.**/
            fnOpenWEBGUIIPPS: function (oEvent, sTcode) {
                sap.ushell.Container.setDirtyFlag(false);
                var aFilters = [
                    new sap.ui.model.Filter("TCode", FilterOperator.EQ, sTcode),
                ];
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.read("/ET_Web_GuiSet", {
                    filters: aFilters,
                    success: function (oData) {
                        sap.m.URLHelper.redirect(oData.results[0].Link, true);
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            /*Description : This method is used toopen Proposed BOM dialog and create Icon tab bars for various operations
             * for display poppuse only*/
            fnProposedBOMDailogOpen: function () {
                var that = this;
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                var sKindlyWait = oBundle.getText("proposal.kindlyWait");
                var oDialogOpen = new sap.m.BusyDialog({ text: sKindlyWait, });
                oDialogOpen.open();
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var aOpData = oOperationItemsModel.getProperty("/aOperationItems");
                var aTabs = [];
                aTabs.push({
                    sIcon: "sap-icon://activity-individual",
                    sText: "Quick Alloc",
                    sKey: "Quick Alloc",
                    sColor: "Neutral",
                    sVisible: false,
                });
                for (var i = 0; i < aOpData.length; i++) {
                    if (aOpData[i].Plnty !== "S") {
                        aTabs.push({
                            sIcon: "sap-icon://activity-individual",
                            sText: aOpData[i].Vornr,
                            sKey: aOpData[i].Vornr,
                            sColor: "Neutral",
                            sVisible: true,
                        });
                    }
                }
                oOperationItemsModel.setProperty("/aTabsResult", aTabs);
                oOperationItemsModel.setProperty("/sFirstOperationOnTab", aTabs[1].sText);
                oOperationItemsModel.setProperty("/aTableResultHeader", []);
                oOperationItemsModel.setProperty("/aTableResultPriority1", []);
                oOperationItemsModel.setProperty("/aTableResultPriority2", []);
                oOperationItemsModel.setProperty("/aTableResultPriority3", []);
                oOperationItemsModel.setProperty("/aTableResultPriority4", []);
                oOperationItemsModel.setProperty("/aTableResultPriority5", []);
                oOperationItemsModel.setProperty("/aTableResultPriority6", []);
                oOperationItemsModel.setProperty("/aTableResultPriority7", []);
                if (!this.oDialogListOfProposedBOMItems) {
                    this.oDialogListOfProposedBOMItems = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.ProposedListOfBOMItemsPopup", this);
                    this.getView().addDependent(this.oDialogListOfProposedBOMItems);
                }
                jQuery.sap.syncStyleClass(
                    "sapUiSizeCompact",
                    this.getView(),
                    this.oDialogListOfProposedBOMItems
                );
                var iconTabBar = sap.ui.getCore().byId("idIconTabBarProposed");
                iconTabBar.bindAggregation(
                    "items",
                    "oOperationItemsModel>/aTabsResult",
                    new sap.m.IconTabFilter({
                        text: "{oOperationItemsModel>sText}",
                        key: "{oOperationItemsModel>sKey}",
                        icon: "{oOperationItemsModel>sIcon}",
                        iconColor: "{oOperationItemsModel>sColor}",
                        visible: "{oOperationItemsModel>sVisible}",
                    }),
                    new sap.m.IconTabSeparator({
                        icon: "",
                    })
                );
                var iconTabBarTableLayout = sap.ui.getCore().byId("idProposedDynamicSideContent");
                var quickTab = sap.ui.getCore().byId("idQuickScroll");
                iconTabBar.addContent(quickTab);
                iconTabBar.addContent(iconTabBarTableLayout);
                oOperationItemsModel.setProperty("/aOprTabsContentVisible", true);
                oOperationItemsModel.setProperty("/aQuickTabContentVisible", false);
                //make 2nd tab as default as Quick alloc tab 1st one and it is hidden by default
                iconTabBar.setSelectedKey(
                    oOperationItemsModel.getProperty("/sFirstOperationOnTab")
                );
                this.oDialogListOfProposedBOMItems.open();
                oDialogOpen.close();
                that.fnGetProposedData();
            },
            /**Description : 1. Function to call ML Component Allocation Assignment Source Setting pop up.
                             2. Function modified to call ET_ML_COMPASSIGNSET to save data at user setting table.
                             3. Function modified the user settings in popup.   */
            fnProposeAssignSrcSetting: function (oEvent) {
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oUserId = sap.ushell.Container.getService("UserInfo").getUser().getId();
                oDataModel.read("/ET_UserSettingsSet(Aenam='" + oUserId + "')", {
                    success: function (oData) {
                        oRoutingHeaderModel.setProperty("/Ci_From", oData.Ci_From);
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this)
                });
                if (!this._MLCompSrcSettingDialog) {
                    this._MLCompSrcSettingDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.MLComponentSetting", this
                    );
                    this.getView().addDependent(this._MLCompSrcSettingDialog);
                    this._MLCompSrcSettingDialog.setModel(this.getView().getModel("i18n"), "i18n");
                    this._MLCompSrcSettingDialog.setModel(oRoutingHeaderModel, "oRoutingHeaderModel");
                    this._MLCompSrcSettingDialog.setModel(oVisibilityModel, "oVisibilityModel");
                }
                this._MLCompSrcSettingDialog.open();
            },
            /*Description : This method is used to prepare payload and get BOM proposed data from back end*/
            fnGetProposedData: function () {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var oDataModel = this.getOwnerComponent().getModel("oMLModel");
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                var aRoutingData = oRoutingModel.getProperty("/aHeaderDetails");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                var sThanksMsg = oBundle.getText("proposal.thanksMsg");
                //Prepare a data model to get Proposed BOM data
                var aOprData = oOperationItemsModel.getProperty("/aOperationItems");
                var aBOMData = oRoutingModel.getProperty("/BOM");
                var aBOMItemsData = oRoutingModel.getProperty("/BOM/Items/results");
                var aBOMItemsDataForPayload = [],
                    aOprDataForPayload = [];
                aOprData.map(function (oEle) {
                    if (oEle.Plnty !== "S") {
                        aOprDataForPayload.push({
                            Vornr: oEle["Vornr"],
                            Ltxa1: oEle["Ltxa1"] || "",
                            Plnal: oEle["Plnal"],
                            Plnfl: oEle["Plnfl"],
                            Plnty: oEle["Plnty"],
                            Plnnr: oEle["Plnnr"],
                            Plnkn: oEle["Plnkn"],
                            Zaehl: oEle["Zaehl"],
                            Arbpl: oEle["Arbpl"],
                            Ktsch: oEle["Ktsch"],
                            Steus: oEle["Steus"],
                        });
                    }
                });
                var aBOMDataForPayload = [
                    {
                        BomNo: aBOMData.BomNo,
                        BomStatus: aBOMData.BomStatus,
                        AltText: aBOMData.AltText,
                        Altsl: aBOMData.Altsl || "",
                        BomGroup: aBOMData.BomGroup,
                        ChgNo: aBOMData.ChgNo,
                        Plant: aBOMData.Plant,
                        Material: aBOMData.Material,
                        BomUsage: aBOMData.BomUsage,
                        AltBom: aBOMData.AltBom,
                        Alt_Grp_Cntr: oVisibilityModel.getProperty(
                            "/sAlternateGrpCntrForProposedML"
                        ),
                        Items: aBOMItemsDataForPayload,
                    },
                ];
                aBOMItemsData.map(function (oEle) {
                    aBOMItemsDataForPayload.push({
                        ItemCateg: oEle["ItemCateg"],
                        ItemNo: oEle["ItemNo"],
                        Component: oEle["Component"],
                        CompQty: oEle["CompQty"].trim(),
                        CompUnit: oEle["CompUnit"],
                        CompDesc: oEle["CompDesc"],
                        BomNo: oEle["BomNo"],
                        SNo: oEle["SNo"],
                        Grand_parent: oEle["Grand_parent"],
                        Keyword: oEle["Keyword"],
                        Parameter1: oEle["Parameter1"],
                        Parameter2: oEle["Parameter2"],
                        Parameter3: oEle["Parameter3"],
                        Parameter3_Multiple: oEle["Parameter3_Multiple"],
                        ItemCat_change: oEle["ItemCat_change"],
                        ItemCat_old: oEle["ItemCat_old"],
                        Line_Processed: oEle["Line_Processed"],
                    });
                });
                //ml undo
                var aAllocationDate = [
                    {
                        CHARACT: "ME_AUTO_ALLOC_DATE",
                        VALUE_NEUTRAL: oRoutingModel.getProperty("/AllocDate"),
                    },
                    {
                        CHARACT: "ME_AUTO_ALLOC_DATE_TYPE",
                        VALUE_NEUTRAL: oRoutingModel.getProperty("/AllocDateMode"),
                    },
                    {
                        CHARACT: "ME_AUTO_ALLOC_DATE_SOURCE",
                        VALUE_NEUTRAL: oRoutingModel.getProperty(
                            "/AllocDateSourceSelected"
                        ),
                    },
                ];
                var aPayload = {
                    Material: aRoutingData.Material,
                    Plant: aRoutingData.Plant,
                    Template_no: aRoutingData.Template_no,
                    Group_No: aRoutingData.Group_No,
                    Grp_Cntr: aRoutingData.Grp_Cntr,
                    Task_type: aRoutingData.Task_type,
                    AOCI: aRoutingData.Aoci,
                    Operation: aOprDataForPayload,
                    BOM: aBOMDataForPayload,
                    Classification: aAllocationDate,
                    Opr_comp_Items: [
                        {
                            Prob_Prio: [
                                {
                                    Items: [{}],
                                },
                            ],
                        },
                    ],
                };
                if (aOprData.length > 0) {
                    var oDialog = new sap.m.BusyDialog({
                        text: sThanksMsg,
                    });
                    oDialog.open();
                    // service call to push the data
                    var oParameters = {
                        success: function (oData, oResponse) {
                            //check whether proposed data is available or not
                            if (oData.Opr_comp_Items.results.length > 0) {
                                oOperationItemsModel.setProperty(
                                    "/aProposedTableResults",
                                    oData.Opr_comp_Items.results
                                );
                                that.fnGetDataForProposedComponents(
                                    oOperationItemsModel.getProperty("/sFirstOperationOnTab")
                                );
                                oOperationItemsModel.setProperty("/aQuickTabEnabled", true);
                            } else {
                                oOperationItemsModel.setProperty("/aProposedTableResults", []);
                                oOperationItemsModel.setProperty("/aQuickTabEnabled", false);
                            }
                            oDialog.close();
                        }.bind(this),
                        error: function (err) {
                            oDialog.close();
                            this.fnCheckError(err);
                        }.bind(this),
                    };
                    oDataModel.create("/ET_Rout_HdrSet", aPayload, oParameters);
                }
            },
            fnProposeQuickAssign: function (oEvent, sAction, oASPRItems, sMakeChangeASPR) {
                var that = this;
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oDataModel = this.getOwnerComponent().getModel("oMLModel");
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                var aRoutingData = oRoutingModel.getProperty("/aHeaderDetails");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sThanksMsg = oBundle.getText("proposal.thanksMsg");
                oVisibilityModel.setProperty("/bBOMSplitBtnEnabled", false);
                //Prepare a data model to get Proposed BOM data
                var aOprData = oOperationItemsModel.getProperty("/aOperationItems");
                var aBOMData = oRoutingModel.getProperty("/BOM");
                var aBOMItemsData = oRoutingModel.getProperty("/BOM/Items/results");
                var aBOMItemsDataForPayload = [],
                    aOprDataForPayload = [];
                aOprData.map(function (oEle) {
                    if (oEle.Plnty !== "S") {
                        aOprDataForPayload.push({
                            Vornr: oEle["Vornr"],
                            Ltxa1: oEle["Ltxa1"] || "",
                            Plnal: oEle["Plnal"],
                            Plnfl: oEle["Plnfl"],
                            Plnty: oEle["Plnty"],
                            Plnnr: oEle["Plnnr"],
                            Plnkn: oEle["Plnkn"],
                            Zaehl: oEle["Zaehl"],
                            Arbpl: oEle["Arbpl"],
                            Ktsch: oEle["Ktsch"],
                            Steus: oEle["Steus"],
                        });
                    }
                });
                var aBOMDataForPayload = [
                    {
                        BomNo: aBOMData.BomNo,
                        BomStatus: aBOMData.BomStatus,
                        AltText: aBOMData.AltText,
                        Altsl: aBOMData.Altsl || "",
                        BomGroup: aBOMData.BomGroup,
                        ChgNo: aBOMData.ChgNo,
                        Plant: aBOMData.Plant,
                        Material: aBOMData.Material,
                        BomUsage: aBOMData.BomUsage,
                        AltBom: aBOMData.AltBom,
                        Alt_Grp_Cntr: oVisibilityModel.getProperty("/sAlternateGrpCntrForProposedML"),
                        SaveFlag: aBOMData.SaveFlag,
                        Items: aBOMItemsDataForPayload,
                    },
                ];
                aBOMItemsData.map(function (oEle) {
                    aBOMItemsDataForPayload.push({
                        AiGroup: oEle["AiGroup"],
                        AiPrio: oEle["AiPrio"],
                        AiStrateg: oEle["AiStrateg"],
                        AleInd: oEle["AleInd"],
                        AltBom: oEle["AltBom"],
                        BomAlt: oEle["BomAlt"],
                        BomNo: oEle["BomNo"],
                        BulkMat: oEle["BulkMat"],
                        CadInd: oEle["CadInd"],
                        ChangeNo: oEle["ChangeNo"],
                        ChangedBy: oEle["ChangedBy"],
                        ChangedOn: oEle["ChangedOn"],
                        ChgNoTo: oEle["ChgNoTo"],
                        Class: oEle["Class"],
                        ClassType: oEle["ClassType"],
                        CoProduct: oEle["CoProduct"],
                        CompDesc: oEle["CompDesc"],
                        CompQty: oEle["CompQty"],
                        CompScrap: oEle["CompScrap"],
                        CompUnit: oEle["CompUnit"],
                        Component: oEle["Component"],
                        CostElem: oEle["CostElem"],
                        CreatedBy: oEle["CreatedBy"],
                        CreatedOn: oEle["CreatedOn"],
                        Cufactor: oEle["Cufactor"],
                        Currency: oEle["Currency"],
                        DelivTime: oEle["DelivTime"],
                        DepLink: oEle["DepLink"],
                        DisconGrp: oEle["DisconGrp"],
                        DistrKey: oEle["DistrKey"],
                        DocPart: oEle["DocPart"],
                        DocType: oEle["DocType"],
                        DocVers: oEle["DocVers"],
                        Document: oEle["Document"],
                        ExplType: oEle["ExplType"],
                        FixedQty: oEle["FixedQty"],
                        Fldelete: oEle["Fldelete"],
                        FollowGrp: oEle["FollowGrp"],
                        FshCriticalComp: oEle["FshCriticalComp"],
                        FshCriticalLevel: oEle["FshCriticalLevel"],
                        GrRcpt: oEle["GrRcpt"],
                        GrpTime: oEle["GrpTime"],
                        Identifier: oEle["Identifier"],
                        IssueLoc: oEle["IssueLoc"],
                        ItemCateg: oEle["ItemCateg"],
                        ItemCount: oEle["ItemCount"],
                        ItemGuid: oEle["ItemGuid"],
                        ItemNo: oEle["ItemNo"],
                        ItemNode: oEle["ItemNode"],
                        ItemText1: oEle["ItemText1"],
                        ItemText2: oEle["ItemText2"],
                        ItmIdent: oEle["ItmIdent"],
                        LeadTime: oEle["LeadTime"],
                        MatGroup: oEle["MatGroup"],
                        MatProvis: oEle["MatProvis"],
                        Modify: oEle["Modify"],
                        MultSelec: oEle["MultSelec"],
                        OpLeadTm: oEle["OpLeadTm"],
                        OpLtUnit: oEle["OpLtUnit"],
                        OpNetInd: oEle["OpNetInd"],
                        OpScrap: oEle["OpScrap"],
                        PmAssmbly: oEle["PmAssmbly"],
                        Price: oEle["Price"],
                        PriceUnit: oEle["PriceUnit"],
                        PurchGrp: oEle["PurchGrp"],
                        PurchOrg: oEle["PurchOrg"],
                        RecAllowd: oEle["RecAllowd"],
                        Recursive: oEle["Recursive"],
                        Refpoint: oEle["Refpoint"],
                        RelCost: oEle["RelCost"],
                        RelEngin: oEle["RelEngin"],
                        RelHlconf: oEle["RelHlconf"],
                        RelPmaint: oEle["RelPmaint"],
                        RelProd: oEle["RelProd"],
                        RelSales: oEle["RelSales"],
                        ReqdComp: oEle["ReqdComp"],
                        ResItmCt: oEle["ResItmCt"],
                        SNo: oEle["SNo"],
                        SegmentRelevant: oEle["SegmentRelevant"],
                        SegmentValue: oEle["SegmentValue"],
                        SelCond: oEle["SelCond"],
                        Sortstring: oEle["Sortstring"],
                        SparePart: oEle["SparePart"],
                        Spproctype: oEle["Spproctype"],
                        Supplyarea: oEle["Supplyarea"],
                        UnloadPt: oEle["UnloadPt"],
                        UsageProb: oEle["UsageProb"],
                        ValidFrom: oEle["ValidFrom"],
                        ValidTo: oEle["ValidTo"],
                        Vendor: oEle["Vendor"],
                        Vornr: oEle["Vornr"],
                        VsiFormul: oEle["VsiFormul"],
                        VsiNo: oEle["VsiNo"],
                        VsiQty: oEle["VsiQty"],
                        VsiSize1: oEle["VsiSize1"],
                        VsiSize2: oEle["VsiSize2"],
                        VsiSize3: oEle["VsiSize3"],
                        VsiSzunit: oEle["VsiSzunit"],
                        ZzbomPosnr: oEle["ZzbomPosnr"],
                        ZzciMatnr: oEle["ZzciMatnr"],
                        ZzdassyType: oEle["ZzdassyType"],
                        ZzdsIssue: oEle["ZzdsIssue"],
                        ZzdsMatnr: oEle["ZzdsMatnr"],
                        ZzesnFlag: oEle["ZzesnFlag"],
                        ZzfinMatnr: oEle["ZzfinMatnr"],
                        ZzmatLink: oEle["ZzmatLink"],
                        ZzpasyMatnr: oEle["ZzpasyMatnr"],
                        //    V-2.3 Phantom Part US properties
                        Merge_Flag: oEle["Merge_Flag"],
                        Vornr_Temp: oEle["Vornr_Temp"],
                        Comp_parent: oEle["Comp_parent"],
                        Phantom_indicator: oEle["Phantom_indicator"],
                        Child_indicator: oEle["Child_indicator"],
                        Phantom_expand_collapse: oEle["Phantom_expand_collapse"],
                        Comp_level: oEle["Comp_level"],
                        Component_qty: oEle["Component_qty"],
                        Vornr_c: "",
                        Prob_Prio: "",
                        AllocNo: "",
                        Colr_Status: 0,
                        Multi_Prio_Eq: "",
                        Multi_Prio: "",
                        BOM_Opr_Items: [
                            {
                                Opr_Score_Det: [],
                            },
                        ],
                        Grand_parent: oEle["Grand_parent"],
                        Keyword: oEle["Keyword"],
                        Parameter1: oEle["Parameter1"],
                        Parameter2: oEle["Parameter2"],
                        Parameter3: oEle["Parameter3"],
                        Parameter3_Multiple: oEle["Parameter3_Multiple"],
                        ItemCat_change: oEle["ItemCat_change"],
                        ItemCat_old: oEle["ItemCat_old"],
                        Line_Processed: oEle["Line_Processed"],
                        // "New_Comp_Ind":oEle["New_Comp_Ind"]
                    });
                });
                var aAllocationDate = [
                    {
                        CHARACT: "ME_AUTO_ALLOC_DATE",
                        VALUE_NEUTRAL: oRoutingModel.getProperty("/AllocDate"),
                    },
                    {
                        CHARACT: "ME_AUTO_ALLOC_DATE_TYPE",
                        VALUE_NEUTRAL: oRoutingModel.getProperty("/AllocDateMode"),
                    },
                ];
                var sMultiCIS = oRoutingModel.getProperty("/MLCompAsgnMultiCIs");
                sMultiCIS = sMultiCIS.split(","); //123,456,789
                var sFinalMultiCI = [];
                //Start-V4.0 USNO#1663806 - Component Allocation - MJADMK7Z
                var aTempAocis = oRoutingModel.getProperty("/aComp_MultiAocis");
                if (oRoutingModel.getProperty("/Ci_From") === oBundle.getText("proposal.Template")) {
                    if (aTempAocis.length > 0) {
                        for (var i = 0; i < aTempAocis.length; i++) {
                            sFinalMultiCI[i] = {
                                CI: aTempAocis[i].Material.trim(),
                            };
                        }
                    }
                } else {
                    //End-V4.0 USNO#1663806 - Component Allocation - MJADMK7Z
                    for (var i = 0; i < sMultiCIS.length; i++) {
                        sFinalMultiCI[i] = {
                            CI: sMultiCIS[i].trim(),
                        };
                    }
                }
                if (sAction) {
                    aBOMDataForPayload[0].ItemsProposal = [];
                    aBOMDataForPayload[0].ItemProposal = 'X';
                    aBOMDataForPayload[0].ProposalChange = '';
                    if (oASPRItems !== undefined) {
                        aBOMDataForPayload[0].ItemsProposal = oASPRItems;
                    }
                    if (sMakeChangeASPR) {
                        aBOMDataForPayload[0].ProposalChange = 'X';
                        aBOMDataForPayload[0].ItemProposal = '';

                    }
                }
                var aPayload = {
                    Material: aRoutingData.Material,
                    Plant: aRoutingData.Plant,
                    Template_no: aRoutingData.Template_no,
                    Group_No: aRoutingData.Group_No,
                    Grp_Cntr: aRoutingData.Grp_Cntr,
                    Task_type: aRoutingData.Task_type,
                    AOCI: aRoutingData.Aoci,
                    Operation: aOprDataForPayload,
                    BOM: aBOMDataForPayload,
                    CI: sFinalMultiCI,
                    Classification: aAllocationDate,
                    Opr_comp_Items: [
                        {
                            Prob_Prio: [
                                {
                                    Items: [{}],
                                },
                            ],
                        },
                    ],
                };
                /*** V4.0 Condition to check if it is ASPL/ASPR Button and calling the Rout_HdrSet service.*/
                if (sAction === 'ASPR' && oASPRItems === undefined && sMakeChangeASPR === undefined) {
                    var oBusyIndicator = new sap.m.BusyDialog();
                    //V4.0 - #1617593 - GGUNO6VD - Initialising a new JSONModel for ASPL / ASPR Popup . 
                    var oASPLJSONModel = new sap.ui.model.json.JSONModel();
                    oBusyIndicator.open();
                    var oParameters = {
                        success: function (oData, oResponse) {
                            var ItemsProposal = oData.BOM.results[0].ItemsProposal.results;
                            /**Make the Collapse All button to visible false , Set Expand All button to visible true and Select all to true on initial success.*/
                            oVisibilityModel.setProperty("/bAsplExpAll", true);
                            oVisibilityModel.setProperty("/bAsplSelection", 'X');
                            oVisibilityModel.setProperty("/bAsplClpAll", false);
                            oVisibilityModel.setProperty("/bAsplSelect", true);
                            var aLMaterial = []
                            // V4.0 - Setting initial values for UI properties , based on actual odata property.
                            ItemsProposal.forEach(oRow => {
                                aLMaterial.push(oRow.LMaterial);
                                if (oRow.RSel === 'X') {
                                    oRow.RUISelect = true;
                                } else {
                                    oRow.RUISelect = false;
                                }
                                if (oRow.LSel === 'X') {
                                    oRow.LUISelect = true;
                                } else {
                                    oRow.LUISelect = false;
                                }
                                // V4.0 - Setting '?' indicator and '>' button. 
                                if (oRow.MulRecIndi === 'X' && oRow.Default === 'X') {
                                    oRow.UIRMulRecIndi = 'X';
                                    oRow.UIRMulRecIndiC = '';
                                }
                            });
                            aLMaterial = aLMaterial.filter((currentVal, index) => { return index === aLMaterial.findIndex(current => { return JSON.stringify(current) === JSON.stringify(currentVal); }); });
                            aLMaterial.map(function (oEle) {
                                ItemsProposal.map(function (oElement) {
                                    if (oEle === oElement.RMaterial) {
                                        oElement.LMaterialNo = oElement.RMaterial;
                                    }
                                })
                            })
                            oASPLJSONModel.setProperty("/ItemsProposal", ItemsProposal);
                            oASPLJSONModel.setProperty("/Items", oData.BOM.results[0].Items.results);
                            this.setModel(oASPLJSONModel, "oASPLJSONModel");
                            this.fnOnAsplAspr();
                            oRoutingModel.setProperty("/BOM", oData.BOM.results[0]);
                            oBusyIndicator.close();
                        }.bind(this),
                        error: function (err) {
                            oBusyIndicator.close();
                            this.fnCheckError(err, 'ASPR');
                        }.bind(this),
                    };
                    oDataModel.create("/ET_Rout_HdrSet", aPayload, oParameters);
                } else {
                    if (aOprData.length > 0) {
                        var oDialog = new sap.m.BusyDialog({
                            text: sThanksMsg,
                        });
                        oDialog.open();
                        // service call to push the data
                        var oParameters = {
                            success: function (oData, oResponse) {
                                if (oData.BOM.results[0].Items.results.length > 0) { // added '.length' for comparision
                                    var oBomItems = oData.BOM.results[0].Items.results;
                                    for (var i = 0; i < oBomItems.length; i++) {
                                        var oBomItem = oBomItems[i];
                                        if (oBomItem.Vornr === '') {
                                            oBomItem.delComp = false;
                                        } else {
                                            oBomItem.delComp = true;
                                        }
                                        oBomItem.DeleteLineFlag = '';  // Add Empty deletion flag
                                    }
                                }
                                oRoutingModel.setProperty("/BOM", oData.BOM.results[0]);
                                oVisibilityModel.setProperty("/bProposeQuickAssignBtn", false);
                                oVisibilityModel.setProperty("/bProposeAllocateBtnVisible", true);
                                oDialog.close();
                            }.bind(this),
                            error: function (err) {
                                oDialog.close();
                                if (sAction === 'ASPR') {
                                    this.fnCheckError(err, 'ASPR');
                                } else {
                                    this.fnCheckError(err);
                                }

                            }.bind(this),
                        };
                        oDataModel.create("/ET_Rout_HdrSet", aPayload, oParameters);
                    }
                }
            },
            /** Description : Function Method to open ASPL ASPR Pop up */
            fnOnAsplAspr: function () {
                if (!this._oASPLASPRDialog) {
                    this._oASPLASPRDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.ASPLASPRDialog", this);
                    this.getView().addDependent(this._oASPLASPRDialog);
                }
                /* V4.0- Setting dynamic row height to the table. 
                *  Available height = Total Popup Height - Header Height - Footer Height ;
                *  Using Timeout in order for the screen element to load and avoid error of clientHeight.
                */
                setTimeout(function () {
                    var oASPLTable = sap.ui.getCore().byId("idAsplAsprTable"),
                        parent = oASPLTable.getParent(),
                        availableHeight = parent.getDomRef().clientHeight;
                    var footerElement = sap.ui.getCore().byId("AsplAsprDialog-footer");
                    availableHeight -= footerElement.getDomRef().clientHeight;
                    var visibleRows = Math.round((availableHeight / 36));
                    oASPLTable.setVisibleRowCount(visibleRows);
                }, 200);
                this._oASPLASPRDialog.open();
            },
            /*** Description : Function to expand and collapse all ASPR ASPL Items.*/
            fnExpandCollapseAsplAspr: function (oEvent, sAction) {
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel"),
                    oASPLJSONModel = this.getView().getModel("oASPLJSONModel"),
                    oTableData = this.getView().getModel("oASPLJSONModel").getProperty('/ItemsProposal');
                if (sAction === 'expand') {
                    oVisibilityModel.setProperty("/bAsplExpAll", false);
                    oVisibilityModel.setProperty("/bAsplClpAll", true);
                    oTableData.forEach(function (oEle) {
                        // V4.0 -Setting the UI Property to make all the rows visible.
                        oEle["UIDefault"] = 'X';
                        if (oEle.Default === 'X') {
                            if (oEle.MulRecIndi === 'X') {
                                oEle['UIRMulRecIndi'] = '';
                                oEle['UIRMulRecIndiC'] = 'X';
                            }
                        }
                    });
                    //V4.0 - Setting dynamic row height to the table. 
                    var oASPLTable = sap.ui.getCore().byId("idAsplAsprTable"),
                        parent = oASPLTable.getParent(),
                        availableHeight = parent.getDomRef().clientHeight;
                    var footerElement = sap.ui.getCore().byId("AsplAsprDialog-footer");
                    availableHeight -= footerElement.getDomRef().clientHeight;
                    var visibleRows = Math.round((availableHeight / 36));
                    oASPLTable.setVisibleRowCount(visibleRows);

                }
                if (sAction === 'collapse') {
                    oVisibilityModel.setProperty("/bAsplExpAll", true);
                    oVisibilityModel.setProperty("/bAsplClpAll", false);
                    oTableData.forEach(function (oEle) {
                        if (oEle.Default !== 'X') {
                            // V4.0 - Setting the UI Property to '' collapse all the rows.
                            oEle["UIDefault"] = '';
                        }
                        if (oEle.Default === 'X') {
                            if (oEle.MulRecIndi === 'X') {
                                oEle["UIRMulRecIndi"] = 'X';
                                oEle["UIRMulRecIndiC"] = '';
                            }
                        }
                    });
                }
                oASPLJSONModel.refresh(true);
                oASPLJSONModel.updateBindings(true);
            },
            /**Description : Function to Select / Deselect Item */
            fnRowSitchSel: function (oEvent, sAction) {
                var oASPLJSONModel = this.getView().getModel("oASPLJSONModel"),
                    oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel"),
                    oTableData = oASPLJSONModel.getProperty('/ItemsProposal'),
                    sPath = oEvent.getSource().getBindingContext('oASPLJSONModel').getPath();
                var oRow = oASPLJSONModel.getProperty(sPath);
                var oSelection;
                // V4.0 - Get Row , to see what is the state , identify if its Right or left.
                if (sAction === 'LEFT') {
                    oSelection = oRow.LUISelect;
                } else {
                    oSelection = oRow.RUISelect;
                }
                oVisibilityModel.setProperty('/bAsplSelect', false);
                oVisibilityModel.setProperty("/bAsplSelection", '');
                if (sAction === 'RIGHT') {
                    // V4.0 - Filter based on the Psno and make all state false.
                    var aRelatedRows = oTableData.filter(function (oEle) {
                        return oEle["ParentSNo"] === oRow.ParentSNo;
                    });
                    aRelatedRows.forEach((oItem) => {
                        if (oItem.SNo !== oRow.SNo) {
                            oItem.RUISelect = false;
                        }
                    });
                }
                oASPLJSONModel.refresh(true);
            },
            /**Description : Function to Select / Deselect all*/
            fnSelDelAllASPL: function (oEvent) {
                var oASPLJSONModel = this.getView().getModel("oASPLJSONModel"),
                    oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel"),
                    oTableData = oASPLJSONModel.getProperty('/ItemsProposal');
                var sSelectionState = oEvent.getSource().getState();
                // V4.0 - Get the state of the Global Select Toggle button.
                if (sSelectionState) {
                    // V4.0 - If Global select is True and initial state is already true , then setting the value to true, else resetting the value to false.
                    oTableData.forEach((oRow) => {
                        if (oRow.LSel === 'X') {
                            oRow.LUISelect = true;
                        } else {
                            oRow.LUISelect = false;
                        }
                        if (oRow.RSel === 'X') {
                            oRow.RUISelect = true;
                        } else {
                            oRow.RUISelect = false;
                        }
                    });
                    oVisibilityModel.setProperty("/bAsplSelection", 'X');
                } else {
                    // V4.0 - Resetting all the Toggle button to false, if the global toggle button is false.
                    oTableData.forEach((oRow) => {
                        oRow.LUISelect = false;
                        oRow.RUISelect = false;
                    });
                    oVisibilityModel.setProperty("/bAsplSelection", '');
                }
                oASPLJSONModel.refresh(true);
                oASPLJSONModel.updateBindings(true);
            },
            /*** Description : Function to expand and collapse ASPR ASPL individual Item*/
            fnExpColAspl: function (oEvent, sAction) {
                var oASPLJSONModel = this.getView().getModel("oASPLJSONModel"),
                    oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel"),
                    oTableData = oASPLJSONModel.getProperty('/ItemsProposal'),
                    sPath = oEvent.getSource().getBindingContext('oASPLJSONModel').getPath();
                var oRow = oASPLJSONModel.getProperty(sPath);
                // V4.0 - Filter the rows based on the selected row ParentSNo property , to get all the related rows.
                var aRelatedRows = oTableData.filter(function (oEle) {
                    return oEle["ParentSNo"] === oRow.SNo;
                });
                if (sAction === 'EXPAND') {
                    // V4.0 - If 'expand' then , setting the UI Specific properties to make it visible.
                    oRow.UILMulRecIndi = "";
                    oRow.UILMulRecIndiC = "X";
                    oRow.UIRMulRecIndi = "";
                    oRow.UIRMulRecIndiC = "X";
                    aRelatedRows.forEach((oItem) => {
                        if (oItem.Default === '') {
                            oItem.UIDefault = 'X';
                        }
                    });
                }
                if (sAction === 'COLLAPSE') {
                    // V4.0 - If 'collapse' then , resetting the UI Specific properties to '', inorder to hide.
                    oRow.UILMulRecIndi = "X";
                    oRow.UILMulRecIndiC = "";
                    oRow.UIRMulRecIndi = "X";
                    oRow.UIRMulRecIndiC = "";
                    aRelatedRows.forEach((oItem) => {
                        if (oItem.Default === '') {
                            oItem.UIDefault = '';
                        }
                    });
                }
                //V4.0 - Check if any expand button is available , inorder to handle global expand and collapse button.
                var aTableRowsExp = oTableData.filter(function (oEle) {
                    return oEle["UILMulRecIndi"] === 'X';
                });

                if (aTableRowsExp.length <= 0) {
                    oVisibilityModel.setProperty("/bAsplExpAll", false);
                    oVisibilityModel.setProperty("/bAsplClpAll", true);
                }
                var aTableRowsCol = oTableData.filter(function (oEle) {
                    return oEle["UILMulRecIndiC"] === 'X';
                });
                if (aTableRowsCol.length <= 0) {
                    oVisibilityModel.setProperty("/bAsplExpAll", true);
                    oVisibilityModel.setProperty("/bAsplClpAll", false);
                }
                oASPLJSONModel.refresh(true);
                oVisibilityModel.refresh(true);
            },
            /** Description : 1. Function to submit changes of the popup in ASPL ASPR.
             **               2. Payload to ET_BOM_HedrSet service*/
            fnMakeChangesAsplAspr: function (oEvent) {
                var oASPLJSONModel = this.getView().getModel("oASPLJSONModel"),
                    oVisibilityModel = this.getView().getModel("oVisibilityModel"),
                    oRoutingModel = this.getView().getModel("oRoutingHeaderModel"),
                    aBOMData = oRoutingModel.getProperty("/BOM"),
                    oDataModel = this.getOwnerComponent().getModel("oSrvModel"),
                    oTableData = oASPLJSONModel.getProperty('/ItemsProposal');
                var oBusyIndicator = new BusyDialog();
                oBusyIndicator.open();
                for (var i = 0; i < oTableData.length; i++) {
                    var oRow = oTableData[i];
                    //V4.0 - if the initial selection is different from the current changes , then sending the selection to backend.
                    if (oRow.RSel != oRow.RUISelect) {
                        oRow.RSel = oRow.RUISelect ? 'X' : '';
                    }
                    else if (oRow.LSel != oRow.LUISelect) {
                        oRow.LSel = oRow.LUISelect ? 'X' : '';
                    }
                    //V4.0- Deleting the UI Specific OData properties to not trigger XML Parse Error.
                    delete oRow.RUISelect;
                    delete oRow.LUISelect;
                    delete oRow.UIDefault;
                    delete oRow.UIRMulRecIndi;
                    delete oRow.UILMulRecIndi;
                    delete oRow.UILMulRecIndiC;
                    delete oRow.UIRMulRecIndi;
                    delete oRow.UIRMulRecIndiC;
                }
                //V4.0 - Calling the exsisting function for save to make post call. 
                this.fnProposeQuickAssign(oEvent, 'ASPR', oTableData, 'MakeChange');
                this.fnASPLASPRClose('MakeChanges');
                oBusyIndicator.close();
            },
            /*** Description : Function to close ASPL ASPR Dialog Box */
            fnASPLASPRClose: function (sAction) {
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel");
                oVisibilityModel.setProperty('/bBOMSplitBtnEnabled', true);
                this._oASPLASPRDialog.close();
            },
            fnAlternateGrpCntrForProposedML: function (oEvent) {
                var oSource = oEvent.getSource(),
                    oValue = oSource.getValue();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                if (oValue.length > 2 || isNaN(oValue)) {
                    oSource.setValue("");
                    sap.m.MessageToast.show(oBundle.getText("cat.AltGrpCntrToML"));
                }
            },
            fnProposeQuickAssignSelectedComp: function () {
                var that = this;
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sQuestionMark = oBundle.getText("QuestionMarkMsg");
                var sAlreadyassignedmsg = oBundle.getText("assign.alreadyassigned");
                var sQuestionMarkAssigned = oBundle.getText("QuestionMarkAssignedMsg");
                var oTbl = this.getView().byId("BOMItemsId");
                var bQuestionRows = false,
                    bAssignedOpr = false;
                var aSelectedItems = oTbl.getSelectedIndices();
                for (var j = 0; j < aSelectedItems.length; j++) {
                    var sContextPath = oTbl.getContextByIndex(aSelectedItems[j]);
                    var sQuestionRows = oRoutingModel.getProperty(
                        sContextPath.sPath + "/Colr_Status"
                    );
                    var sAssignedOpr = oRoutingModel.getProperty(
                        sContextPath.sPath + "/Vornr"
                    );
                    if (sQuestionRows === 9) {
                        bQuestionRows = true;
                    }
                    if (sAssignedOpr !== "") {
                        bAssignedOpr = true;
                    }
                }
                if (bQuestionRows && bAssignedOpr) {
                    MessageBox.warning(sQuestionMarkAssigned, {
                        actions: [oBundle.getText("yes"), MessageBox.Action.CANCEL],
                        onClose: function (sAction) {
                            if (sAction === oBundle.getText("yes")) {
                                that.fnProposeQuickAssignSelectedCompConfirm();
                            }
                        }.bind(this),
                    });
                } else if (bQuestionRows && !bAssignedOpr) {
                    MessageBox.warning(sQuestionMark, {
                        actions: [oBundle.getText("yes"), MessageBox.Action.CANCEL],
                        onClose: function (sAction) {
                            if (sAction === oBundle.getText("yes")) {
                                that.fnProposeQuickAssignSelectedCompConfirm();
                            }
                        }.bind(this),
                    });
                } else if (!bQuestionRows && bAssignedOpr) {
                    MessageBox.warning(sAlreadyassignedmsg, {
                        actions: [oBundle.getText("yes"), MessageBox.Action.CANCEL],
                        onClose: function (sAction) {
                            if (sAction === oBundle.getText("yes")) {
                                that.fnProposeQuickAssignSelectedCompConfirm();
                            }
                        }.bind(this),
                    });
                } else {
                    that.fnProposeQuickAssignSelectedCompConfirm();
                }
            },
            fnProposeQuickAssignSelectedCompConfirm: function () {
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oTbl = this.getView().byId("BOMItemsId");
                var aSelectedItems = oTbl.getSelectedIndices();
                for (var j = 0; j < aSelectedItems.length; j++) {
                    var sContextPath = oTbl.getContextByIndex(aSelectedItems[j]);
                    var sProposeOpr = oRoutingModel.getProperty(
                        sContextPath.sPath + "/Vornr_c"
                    );
                    var sColorCode = oRoutingModel.getProperty(
                        sContextPath.sPath + "/Colr_Status"
                    );
                    var sTempOpration = oRoutingModel.getProperty(
                        sContextPath.sPath + "/Vornr_Temp"
                    );
                    if (sColorCode !== 9) {
                        oRoutingModel.setProperty(
                            sContextPath.sPath + "/Vornr",
                            sProposeOpr
                        );
                        oRoutingModel.setProperty(
                            sContextPath.sPath + "/UnRead",
                            "Success"
                        );
                        if (sTempOpration !== sProposeOpr) {
                            oRoutingModel.setProperty(sContextPath.sPath + "/Modify", "X");
                        } else {
                            oRoutingModel.setProperty(sContextPath.sPath + "/Modify", ""); //Assign Modify Flag MJADMK7Z
                        }
                    }
                }
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oVisibilityModel.setProperty("/bBOMSplitBtnEnabled", false);
                oVisibilityModel.setProperty("/bUnsavedSelectAltBom", false);
                this.getView().byId("BOMItemsId").setSelectedIndex(-1); //remove table selections
            },
            fnProposeQuickAssignAllocByCategory: function (oEvent) {
                var oButton = oEvent.getSource();
                this.getView().byId("idAllocByCategory").openBy(oButton);
            },
            /*Description : This method is validate set allocation date for Key user */
            fnSetAllocDateValidation: function (oEvent) {
                var oEvt = oEvent.getSource();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                if (oEvent.getParameters().valid) {
                    if (this.getView().getModel("oRoutingModel").getProperty("/selectedCIPlantSetDate")) {
                        if (Number(oEvent.getParameters().value) < Number(this.getView().getModel("oRoutingModel").getProperty("/sDefaultPlantSetDate"))) {
                            var sPlantDate = this.getView().getModel("oRoutingModel").getProperty("/sDefaultPlantSetDate");
                            var sWarn = sPlantDate.substr(6, 2) + "/" + sPlantDate.substr(4, 2) + "/" + sPlantDate.substr(0, 4);
                            var sWarnMsg = this.getView().getModel("i18n").getResourceBundle().getText("SetAllocDateSelectionMsg", sWarn);
                            MessageBox.warning(sWarnMsg, {
                                icon: MessageBox.Icon.WARNING,
                                actions: [MessageBox.Action.OK],
                                initialFocus: MessageBox.Action.OK,
                                onClose: function (sButton) {
                                    if (sButton === MessageBox.Action.OK) {
                                        oRoutingHeaderModel.setProperty("/AllocDate", sPlantDate);
                                        oRoutingHeaderModel.setProperty("/AllocDateMode", "CREATION DATE");
                                    }
                                }.bind(this),
                            });
                        }
                        if (oRoutingHeaderModel.getProperty("/AllocDateMode") === "") {
                            oRoutingHeaderModel.setProperty("/AllocDateMode", "CREATION DATE");
                        }
                    } else {
                        if (oRoutingHeaderModel.getProperty("/AllocDateMode") === "") {
                            oRoutingHeaderModel.setProperty("/AllocDateMode", "CREATION DATE");
                        }
                    }
                    oRoutingHeaderModel.setProperty("/AllocDateValidation", "None");
                } else {
                    oRoutingHeaderModel.setProperty("/AllocDate", "");
                    oRoutingHeaderModel.setProperty("/AllocDateValidation", "Error");
                }
            },
            fnAllocationSourceChange: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel"),
                    oVisibilityModel = this.getView().getModel("oVisibilityModel"),
                    sTempDate = oRoutingHeaderModel.getProperty("/AllocTempDate"),
                    sTempMode = oRoutingHeaderModel.getProperty("/AllocTempType"),
                    sPlantDate = oRoutingHeaderModel.getProperty("/AllocPlantDate"),
                    sPlantMode = oRoutingHeaderModel.getProperty("/AllocPlantType"),
                    sManlDate = oRoutingHeaderModel.getProperty("/AllocManlDate"),
                    sManlMode = oRoutingHeaderModel.getProperty("/AllocManlType"),
                    oDateTypeSelection = this.getView().byId("idAllocDTyp"),
                    oDatePicker = this.getView().byId("idAllocDatePick"),
                    sselectedSource = oEvent.getSource().getSelectedKey();
                if (sselectedSource === "MANUAL") {
                    oRoutingHeaderModel.setProperty("/AllocDateSourceSelected", sselectedSource);
                    oDatePicker.setEnabled(true);
                    oDateTypeSelection.setEnabled(true);
                    oRoutingHeaderModel.setProperty("/AllocDate", sManlDate);
                    oRoutingHeaderModel.setProperty("/AllocDateMode", sManlMode);
                }
                if (sselectedSource === "TEMPLATE") {
                    oDatePicker.setEnabled(false);
                    oDateTypeSelection.setEnabled(false);
                    oRoutingHeaderModel.setProperty("/AllocDateSourceSelected", sselectedSource);
                    oRoutingHeaderModel.setProperty("/AllocDate", sTempDate);
                    oRoutingHeaderModel.setProperty("/AllocDateMode", sTempMode);
                }
                if (sselectedSource === "PLANT") {
                    oDatePicker.setEnabled(false);
                    oDateTypeSelection.setEnabled(false);
                    oRoutingHeaderModel.setProperty("/AllocDateSourceSelected", sselectedSource);
                    oRoutingHeaderModel.setProperty("/AllocDate", sPlantDate);
                    oRoutingHeaderModel.setProperty("/AllocDateMode", sPlantMode);
                }
            },
            fnOnRowSelectionChange: function (oEvent) {
                var oTable = this.getView().byId("BOMItemsId");
                var aSelectedItems = oTable.getSelectedIndices();
                var oBOMModel = this.getView().getModel("oRoutingHeaderModel");
                var that = this;
                if (aSelectedItems.length > 0) {
                    this.getModel("oVisibilityModel").setProperty("/bAllocateSelectedCompEnable", true);
                    var hasVornr = false;
                    aSelectedItems.forEach(function (index) {
                        var sRowPath = oTable.getContextByIndex(index).sPath;
                        var sBomOprNum = oBOMModel.getProperty(sRowPath + "/Vornr") || "";
                        if (sBomOprNum !== "") {
                            hasVornr = true;
                            return;
                        }

                    });
                    that.getModel("oVisibilityModel").setProperty("/bDelComp", hasVornr);
                } else {
                    that.getModel("oVisibilityModel").setProperty("/bAllocateSelectedCompEnable", false);
                    that.getModel("oVisibilityModel").setProperty("/bDelComp", false);
                }
            },
            fnTableMainView: function (oEvent) {
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bMainViewBtnAcceptVisible", true);
                oVisibilityModel.setProperty("/bMainViewBtnVisible", false);
                oVisibilityModel.setProperty("/bClassificationViewBtnAcceptVisible", false);
                oVisibilityModel.setProperty("/bClassificationViewBtnVisible", true);
                oVisibilityModel.setProperty("/bViewforRitemsBtnAcceptVisible", false);
                oVisibilityModel.setProperty("/bViewforRitemsBtnVisible", true);
                oVisibilityModel.setProperty("/bMainViewColumnVisible", true);
                oVisibilityModel.setProperty("/bClassificationViewColumnVisible", false);
                oVisibilityModel.setProperty("/bViewforRitemsColumnVisible", false);
            },
            fnTableClassificationView: function (oEvent) {
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bMainViewBtnAcceptVisible", false);
                oVisibilityModel.setProperty("/bMainViewBtnVisible", true);
                oVisibilityModel.setProperty("/bClassificationViewBtnAcceptVisible", true);
                oVisibilityModel.setProperty("/bClassificationViewBtnVisible", false);
                oVisibilityModel.setProperty("/bViewforRitemsBtnAcceptVisible", false);
                oVisibilityModel.setProperty("/bViewforRitemsBtnVisible", true);
                oVisibilityModel.setProperty("/bMainViewColumnVisible", false);
                oVisibilityModel.setProperty("/bClassificationViewColumnVisible", true);
                oVisibilityModel.setProperty("/bViewforRitemsColumnVisible", false);
            },
            fnTableViewforRitems: function (oEvent) {
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bMainViewBtnAcceptVisible", false);
                oVisibilityModel.setProperty("/bMainViewBtnVisible", true);
                oVisibilityModel.setProperty("/bClassificationViewBtnAcceptVisible", false);
                oVisibilityModel.setProperty("/bClassificationViewBtnVisible", true);
                oVisibilityModel.setProperty("/bViewforRitemsBtnAcceptVisible", true);
                oVisibilityModel.setProperty("/bViewforRitemsBtnVisible", false);
                oVisibilityModel.setProperty("/bMainViewColumnVisible", false);
                oVisibilityModel.setProperty("/bClassificationViewColumnVisible", false);
                oVisibilityModel.setProperty("/bViewforRitemsColumnVisible", true);
            },
            fnClearFilters: function (oEvent) {
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oBOMTableID = this.getView().byId("BOMItemsId"),
                    aBOMColumns = oBOMTableID.getColumns(),
                    iLength = aBOMColumns.length;
                // Clear Filters
                if (oEvent.getParameters().value !== "") {
                    oVisibilityModel.setProperty("/bClearFilters", true);
                } else {
                    for (var i = 0; i < iLength; i++) {
                        var isFiltered = aBOMColumns[i].getFiltered();
                        if (isFiltered) {
                            oVisibilityModel.setProperty("/bClearFilters", true);
                            break;
                        } else {
                            oVisibilityModel.setProperty("/bClearFilters", false);
                        }
                    }
                }
            },
            fnOnAllCollapse: function (oEvent) {
                var oModel = this.getModel("oVisibilityModel");
                oModel.setProperty("/sGobalExpand", true);
                oModel.setProperty("/sGobalCollapse", false);
                var oTable = this.byId("BOMItemsId");
                var oBinding = oTable.getBinding("rows");
                var oDataModel = this.getView().getModel("oRoutingHeaderModel");
                var oRows = oDataModel.getProperty("/BOM/Items/results");
                for (var i = 0; i < oRows.length; i++) {
                    var oRow = oRows[i];
                    if (oRow.Phantom_indicator === "X") {
                        oRow.Phantom_expand_collapse = "";
                    }
                    if (oRow.Comp_level === "1" || oRow.Comp_level === "2") {
                        oRow.Child_indicator = "X";
                    }
                }
                oDataModel.updateBindings(true);
            },
            /*Phantom Part Function for expand Phantam Part*/
            fnOnAllExpand: function (oEvent) {
                var oModel = this.getModel("oVisibilityModel");
                oModel.setProperty("/sGobalExpand", false);
                oModel.setProperty("/sGobalCollapse", true);
                this.fnResetTableLevelFilters();
                this.fnResetTableLevelSorting();
                var oDataModel = this.getView().getModel("oRoutingHeaderModel");
                var oTable = this.byId("BOMItemsId");
                var oBinding = oTable.getBinding("rows");
                var oRows = oDataModel.getProperty("/BOM/Items/results");
                for (var i = 0; i < oRows.length; i++) {
                    var oRow = oRows[i];
                    //to manage + and - buttons
                    if (oRow.Phantom_indicator === "X") {
                        if (oRow.Comp_level === "0") {
                            oRow.Phantom_expand_collapse = "X";
                        }
                    }
                    //to display level2 childs
                    if (oRow.Comp_level === "1") {
                        oRow.Child_indicator = "";
                    }
                }
                oDataModel.updateBindings(true);
            },
            /* v2.4 Description : Method to add BOM Component */
            fnAddBOMComponent: function () {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sAdd = oBundle.getText("bom.Add"),
                    AddTitle = oBundle.getText("bom.AddTitle"),
                    sItmCatTxt = oBundle.getText("bom.ItemCatVSTxt");
                if (!this.oDialogAddBom) {
                    this.oDialogAddBom = sap.ui.xmlfragment(
                        "AddBom", "com.airbus.zcfe2meautorc.fragment.AddBomComponent",
                        this
                    );
                    this.getView().addDependent(this.oDialogAddBom);
                }
                var aData = { items: [] };
                aData.items.push({
                    ItemNo: "0000",
                    Component: "",
                    CompDesc: "",
                    Component_qty: "0.000",
                    CompUnit: "",
                    ItemCateg: "",
                    ItemText1: "",
                    Price: "0.000",
                    PurchGrp: "",
                    MatGroup: "",
                    VsiSize1: "0.000",
                    VsiSize2: "0.000",
                    VsiSize3: "0.000",
                    VsiSzunit: "",
                    VsiNo: "0.000",
                    VsiFormul: "",
                    VsiQty: "0.000",
                    isNewComp: "Y",
                    isNewSNo: "1",
                    Fldelete: false,
                    PartNumberEnable: false, // For Part number enable/disable
                    ItemTextLineReq: false,
                    addBomVisible: true,
                    VsiSize1Req: false, // For VarSize1 number enable/disable
                    VsiSize2Req: false, // For VarSize1 number enable/disable
                    VsiSize3Req: false, // For VarSize1 number enable/disable
                    VsiSize1VS: "None", // For VarSize1 number value state
                    VsiSize2VS: "None", // For VarSize2 number value state
                    VsiSize3VS: "None", // For VarSize3 number value state
                    VsiSizeNoReq: false,
                    VsiQtyVS: "None",
                    VsiSizeNoUnitReq: false,
                    QtyVsizItem: false,
                    QtyVsizItemUnitReq: false,
                    formulaEnabled: false, // For Formulakey enable/disable
                    Component_qty_Editable: true,
                    formulakeyVS: "None", // For Formulakey value state
                    priceReq: false, //For Price enable/disable
                    priceVS: "None", //For Price value state
                    purchaseGroupReq: false, //For Purchase Group enable/disable
                    purchaseGroupVS: "None", //For Purchase Group value state
                    materialGroupReq: false, //For material group enable/disable
                    materialGroupVS: "None", //For material group value state
                    Component_qty_Vstate: "None", //For Qty Value state
                    ZzdsMatnrVS: "None",
                    CompUnitVS: "None",
                    ItemCategVS: "Error", //For Item category Value state
                    ItemCategVSText: sItmCatTxt, //For Item category Value state text
                    ItemNoVS: "None", //For ItemNo Value state
                    ItemNoVSText: "", //For ItemNo Value state text
                    ItemText1VS: "None", //FOr Item Text Value state
                    ItemText2: "",
                    RelCost: "",
                    BulkMat: false,
                    Recursive: false,
                    RecAllowd: false,
                    DeleteLineFlag: "",
                    aRTCeditable: true,
                    aBMeditable: true,
                    AddBomLine: "X"
                });
                this.oDialogAddBom.setModel(new JSONModel(aData), "addBomModel");
                this.oDialogAddBom.setTitle(AddTitle);
                this.oDialogAddBom.getCustomHeader().getContent()[0].setText(AddTitle);
                this.oDialogAddBom.getBeginButton().setText(sAdd);
                this.fnGetRTCData();
                this.oDialogAddBom.open();
            },
            /*Method : fnGetRTCData Description : This method is used to get RTC data for add and replace BOM*/
            fnGetRTCData: function (oEvent) {
                var that = this;
                var oDataModel = that.getOwnerComponent().getModel("oSrvModel");
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var oParameters = {
                    async: true,
                    success: function (oData, oResponse) {
                        oModel.setProperty("/aRTCData", oData.results);
                    },
                    error: function (err) {
                        that.fnCheckError(err);
                    },
                };
                oDataModel.read("/ET_RTCSet", oParameters);
            },
            /* v2.4 Description : Method to replace BOM Component.*/
            fnReplaceBOMComponent: function () {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sReplaceWarning = oBundle.getText("bom.ReplaceWarning");
                var sReplace = oBundle.getText("bom.Replace"),
                    ReplaceTitle = oBundle.getText("bom.ReplaceTitle");
                var aSelIndex = this.byId("BOMItemsId").getSelectedIndices();
                if (this.byId("BOMItemsId").getSelectedIndices().length === 0) {
                    MessageBox.warning(sReplaceWarning, {
                        icon: MessageBox.Icon.WARNING,
                        actions: [MessageBox.Action.OK],
                        initialFocus: MessageBox.Action.OK,
                        onClose: function (sButton) {
                            if (sButton === MessageBox.Action.OK) {
                            }
                        }.bind(this),
                    });
                } else {
                    if (!this.oDialogAddBom) {
                        this.oDialogAddBom = sap.ui.xmlfragment(
                            "ReplaceBom", "com.airbus.zcfe2meautorc.fragment.AddBomComponent",
                            this);
                        this.getView().addDependent(this.oDialogAddBom);
                    }
                    var WarningFlag,
                        aValidReplaceIndices = [];
                    aSelIndex.forEach(
                        function (x) {
                            var sPath = this.byId("BOMItemsId").getContextByIndex(x).sPath;
                            if (this.getView().getModel("oRoutingHeaderModel").getProperty(sPath + "/Comp_level") === "0") {
                                aValidReplaceIndices.push(x);
                            } else {
                                WarningFlag = "X";
                            }
                        }.bind(this)
                    );
                    if (WarningFlag === "X") {
                        var oBundle = this.geti18nModel().getResourceBundle();
                        var sReplacPhantomWarning = oBundle.getText("bom.PhantomReplaceWarning");
                        var that = this;
                        MessageBox.warning(sReplacPhantomWarning, {
                            icon: MessageBox.Icon.WARNING,
                            actions: [MessageBox.Action.OK],
                            initialFocus: MessageBox.Action.OK,
                            onClose: function (sButton) {
                                if (sButton === MessageBox.Action.OK) {
                                    var oData = { items: [] };
                                    if (aValidReplaceIndices.length != 0) {
                                        aValidReplaceIndices.forEach(
                                            function (x) {
                                                var sPath = that.byId("BOMItemsId").getContextByIndex(x).sPath;
                                                //capture the actual Item category of the Component
                                                if (
                                                    that.getView().getModel("oRoutingHeaderModel").getProperty(sPath + "/CapturedItemCat") === undefined) {
                                                    var sCatg = that.getView().getModel("oRoutingHeaderModel").getProperty(sPath + "/ItemCateg");
                                                    that.getView().getModel("oRoutingHeaderModel").setProperty(sPath + "/CapturedItemCat", sCatg);
                                                }
                                                oData.items.push(
                                                    that.getView().getModel("oRoutingHeaderModel").getProperty(sPath)
                                                );
                                            }.bind(this)
                                        );
                                        var aSelData = [];
                                        aSelData = JSON.parse(JSON.stringify(oData));
                                        that.oDialogAddBom.setModel(new JSONModel(aSelData), "addBomModel");
                                        // to disable the properties depending on item categories
                                        that.oDialogAddBom.getModel("addBomModel").getData().items.forEach(
                                            function (oItem, i) {
                                                that.fnValidateItemCategory(oItem.ItemCateg, "/items/" + i, "Replace");
                                            }.bind(that)
                                        );
                                        that.oDialogAddBom.getModel("addBomModel").setProperty("/addBomVisible", false);
                                        that.oDialogAddBom.getBeginButton().setText(sReplace);
                                        that.oDialogAddBom.setTitle(ReplaceTitle);
                                        that.fnGetRTCData();
                                        that.oDialogAddBom.getCustomHeader().getContent()[0].setText(ReplaceTitle);
                                        that.oDialogAddBom.open();
                                    }
                                }
                            },
                        });
                    }
                    if (WarningFlag !== "X") {
                        var oData = { items: [] };
                        aSelIndex.forEach(
                            function (x) {
                                var sPath = this.byId("BOMItemsId").getContextByIndex(x).sPath;
                                //capture the actual Item category of the Component
                                if (this.getView().getModel("oRoutingHeaderModel").getProperty(sPath + "/CapturedItemCat") === undefined) {
                                    var sCatg = this.getView().getModel("oRoutingHeaderModel").getProperty(sPath + "/ItemCateg");
                                    this.getView().getModel("oRoutingHeaderModel").setProperty(sPath + "/CapturedItemCat", sCatg);
                                }
                                oData.items.push(this.getView().getModel("oRoutingHeaderModel").getProperty(sPath)
                                );
                            }.bind(this)
                        );
                        var aSelData = [];
                        aSelData = JSON.parse(JSON.stringify(oData));
                        this.oDialogAddBom.setModel(new JSONModel(aSelData), "addBomModel");
                        // to disable the properties depending on item categories
                        this.oDialogAddBom.getModel("addBomModel").getData().items.forEach(
                            function (oItem, i) {
                                this.fnValidateItemCategory(oItem.ItemCateg, "/items/" + i, "Replace");
                            }.bind(this)
                        );
                        this.oDialogAddBom.getModel("addBomModel").setProperty("/addBomVisible", false);
                        this.oDialogAddBom.getBeginButton().setText(sReplace);
                        this.oDialogAddBom.setTitle(ReplaceTitle);
                        this.fnGetRTCData();
                        this.oDialogAddBom.getCustomHeader().getContent()[0].setText(ReplaceTitle);
                        this.oDialogAddBom.open();
                    }
                }
            },
            fnValidateItemCategory: function (Item, selectedRow, sMode) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sItmCatTxt = oBundle.getText("bom.ItemCatVSTxt");
                var sItem4Char = oBundle.getText("bom.Item4Char"),
                    sItem4CharC = oBundle.getText("bom.Item4CharC");
                if (Item.length !== undefined) {
                    var selectedRow = oModel.getData().SelectedRow || selectedRow;
                    oModel.setProperty(selectedRow + "/PartNumberEnable", false);
                    oModel.setProperty(selectedRow + "/VsiSize1Req", false);
                    oModel.setProperty(selectedRow + "/VsiSize2Req", false);
                    oModel.setProperty(selectedRow + "/VsiSize3Req", false);
                    oModel.setProperty(selectedRow + "/VsiSize1VS", "None");
                    oModel.setProperty(selectedRow + "/VsiSize2VS", "None");
                    oModel.setProperty(selectedRow + "/VsiSize3VS", "None");
                    oModel.setProperty(selectedRow + "/VsiSize3Req", false);
                    oModel.setProperty(selectedRow + "/VsiSizeNoReq", false);
                    oModel.setProperty(selectedRow + "/VsiSizeNoUnitReq", false);
                    oModel.setProperty(selectedRow + "/QtyVsizItem", false);
                    oModel.setProperty(selectedRow + "/QtyVsizItemUnitReq", false);
                    oModel.setProperty(selectedRow + "/formulaEnabled", false);
                    oModel.setProperty(selectedRow + "/Component_qty_Editable", true);
                    oModel.setProperty(selectedRow + "/formulakeyVS", "None");
                    oModel.setProperty(selectedRow + "/priceReq", false);
                    oModel.setProperty(selectedRow + "/priceVS", "None");
                    oModel.setProperty(selectedRow + "/purchaseGroupReq", false);
                    oModel.setProperty(selectedRow + "/purchaseGroupVS", "None");
                    oModel.setProperty(selectedRow + "/materialGroupReq", false);
                    oModel.setProperty(selectedRow + "/materialGroupVS", "None");
                    oModel.setProperty(selectedRow + "/Component_qty_Vstate", "None");
                    oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "None");
                    oModel.setProperty(selectedRow + "/CompUnitVS", "None");
                    oModel.setProperty(selectedRow + "/ItemCategVS", "None");
                    oModel.setProperty(selectedRow + "/ItemCategVSText", "");
                    oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                    oModel.setProperty(selectedRow + "/ItemText1VS", "None");
                    if (sMode !== "Replace") {
                        oModel.setProperty(selectedRow + "/ItemText1", "");
                        oModel.setProperty(selectedRow + "/Price", "");
                        oModel.setProperty(selectedRow + "/PurchGrp", "");
                        oModel.setProperty(selectedRow + "/MatGroup", "");
                        oModel.setProperty(selectedRow + "/VsiSize1", "");
                        oModel.setProperty(selectedRow + "/VsiSize2", "");
                        oModel.setProperty(selectedRow + "/VsiSize3", "");
                        oModel.setProperty(selectedRow + "/VsiSzunit", "");
                        oModel.setProperty(selectedRow + "/VsiNo", "");
                        oModel.setProperty(selectedRow + "/VsiFormul", "");
                    }
                    if (
                        Item === "E" ||
                        Item === "P" ||
                        Item === "S" ||
                        Item === "T" ||
                        Item === "X"
                    ) {
                        oModel.setProperty(selectedRow + "/PartNumberEnable", false);
                        oModel.setProperty(selectedRow + "/Component", "");
                        oModel.setProperty(selectedRow + "/CompUnit", "");
                        oModel.setProperty(selectedRow + "/CompDesc", "");
                        oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "None");
                        oModel.setProperty(selectedRow + "/CompUnitVS", "None");
                        if (oModel.getProperty(selectedRow + "/ItemText1") === "") {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "Error");
                        }
                        if (
                            Number(oModel.getProperty(selectedRow + "/Component_qty")) < 1
                        ) {
                            oModel.setProperty(selectedRow + "/Component_qty", "1");
                            oModel.setProperty(selectedRow + "/Component_qty_Vstate", "None");
                        }
                        var sEnterItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        var sValueC = sEnterItemNo.toUpperCase();
                        if (sEnterItemNo.length !== 4) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4Char);
                        } else {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", "");
                        }
                    } else if (Item === "Q") {
                        oModel.setProperty(selectedRow + "/PartNumberEnable", false);
                        oModel.setProperty(selectedRow + "/Component", "");
                        oModel.setProperty(selectedRow + "/CompDesc", "");
                        oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "None");
                        oModel.setProperty(selectedRow + "/CompUnitVS", "None");
                        if (oModel.getProperty(selectedRow + "/ItemText1") === "") {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "Error");
                        }
                        if (
                            Number(oModel.getProperty(selectedRow + "/Component_qty")) < 1
                        ) {
                            oModel.setProperty(selectedRow + "/Component_qty", "1");
                            oModel.setProperty(selectedRow + "/Component_qty_Vstate", "None");
                        }
                        var sEnterItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        if (sEnterItemNo.length !== 4) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4Char);
                        } else {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", "");
                        }
                    } else if (Item === "L" || Item === "Y") {
                        oModel.setProperty(selectedRow + "/PartNumberEnable", true);
                        if (oModel.getProperty(selectedRow + "/Component") === "") {
                            oModel.setProperty(selectedRow + "/Component", "");
                            oModel.setProperty(selectedRow + "/CompDesc", "");
                            oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "Error");
                        }
                        if (Number(oModel.getProperty(selectedRow + "/CompUnit")) === 0) {
                            oModel.setProperty(selectedRow + "/CompUnitVS", "Error");
                        }
                        if (
                            Number(oModel.getProperty(selectedRow + "/Component_qty")) === 0
                        ) {
                            oModel.setProperty(selectedRow + "/Component_qty", "0");
                            oModel.setProperty(
                                selectedRow + "/Component_qty_Vstate",
                                "Error"
                            );
                        }
                        var sEnterItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        var sValueC = sEnterItemNo.toUpperCase();
                        if (sEnterItemNo.length !== 4) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4Char);
                        } else {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", "");
                        }
                    } else if (Item.toUpperCase() === "C") {
                        oModel.setProperty(selectedRow + "/PartNumberEnable", false);
                        oModel.setProperty(selectedRow + "/Component", "");
                        oModel.setProperty(selectedRow + "/CompDesc", "");
                        oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "None");
                        oModel.setProperty(selectedRow + "/CompUnitVS", "None");
                        if (oModel.getProperty(selectedRow + "/ItemText1") === "") {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "Error");
                        }
                        var sEnterItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        var sValueC = sEnterItemNo.toUpperCase();
                        if (sEnterItemNo.length !== 4) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4CharC);
                        } else if (!sValueC.startsWith("C")) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4CharC);
                        } else {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", "");
                        }
                    } else if (Item === "N") {
                        oModel.setProperty(selectedRow + "/PartNumberEnable", true);
                        if (oModel.getProperty(selectedRow + "/Component") === "") {
                            oModel.setProperty(selectedRow + "/Component", "");
                            oModel.setProperty(selectedRow + "/CompDesc", "");
                            oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "None");
                            oModel.setProperty(selectedRow + "/CompUnitVS", "None");
                        } else {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "None");
                        }
                        if (
                            Number(oModel.getProperty(selectedRow + "/Component_qty")) === 0
                        ) {
                            oModel.setProperty(selectedRow + "/Component_qty", "0");
                            oModel.setProperty(
                                selectedRow + "/Component_qty_Vstate",
                                "Error"
                            );
                        }
                        if (
                            oModel.getProperty(selectedRow + "/Component") === "" &&
                            oModel.getProperty(selectedRow + "/ItemText1") === ""
                        ) {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "Error");
                        }
                        if (oModel.getProperty(selectedRow + "/Component") === "") {
                            oModel.setProperty(selectedRow + "/priceReq", true);
                            if (Number(oModel.getProperty(selectedRow + "/Price")) === 0) {
                                oModel.setProperty(selectedRow + "/priceVS", "Error");
                            }
                        } else {
                            oModel.setProperty(selectedRow + "/priceReq", false);
                            oModel.setProperty(selectedRow + "/priceVS", "None");
                        }
                        if (oModel.getProperty(selectedRow + "/Component") === "") {
                            oModel.setProperty(selectedRow + "/purchaseGroupReq", true);
                            if (oModel.getProperty(selectedRow + "/PurchGrp") === "") {
                                oModel.setProperty(selectedRow + "/purchaseGroupVS", "Error");
                            }
                        } else {
                            oModel.setProperty(selectedRow + "/purchaseGroupReq", false);
                            oModel.setProperty(selectedRow + "/purchaseGroupVS", "None");
                        }
                        if (oModel.getProperty(selectedRow + "/Component") === "") {
                            oModel.setProperty(selectedRow + "/materialGroupReq", true);
                            if (oModel.getProperty(selectedRow + "/MatGroup") === "") {
                                oModel.setProperty(selectedRow + "/materialGroupVS", "Error");
                            }
                        } else {
                            oModel.setProperty(selectedRow + "/materialGroupReq", false);
                            oModel.setProperty(selectedRow + "/materialGroupVS", "None");
                        }

                        var sEnterItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        var sValueC = sEnterItemNo.toUpperCase();
                        if (sEnterItemNo.length !== 4) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4Char);
                        } else {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", "");
                        }
                    } else if (Item === "R") {
                        oModel.setProperty(selectedRow + "/PartNumberEnable", true);
                        if (oModel.getProperty(selectedRow + "/Component") === "") {
                            oModel.setProperty(selectedRow + "/Component", "");
                            oModel.setProperty(selectedRow + "/CompDesc", "");
                            oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "Error");
                        }
                        if (Number(oModel.getProperty(selectedRow + "/CompUnit")) === 0) {
                            oModel.setProperty(selectedRow + "/CompUnitVS", "Error");
                        }
                        if (Number(oModel.getProperty(selectedRow + "/VsiNo")) === 0) {
                            oModel.setProperty(selectedRow + "/VsiSizeNoError", "Error");
                        }
                        if (Number(oModel.getProperty(selectedRow + "/VsiSize1")) === 0) {
                            oModel.setProperty(selectedRow + "/VsiSize1VS", "Error");
                        }
                        if (oModel.getProperty(selectedRow + "/VsiSzunit") === "") {
                            oModel.setProperty(selectedRow + "/VsiSzunitVS", "Error");
                        }
                        var sEnterItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        var sValueC = sEnterItemNo.toUpperCase();
                        if (sEnterItemNo.length !== 4) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4Char);
                        } else {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", "");
                        }
                        oModel.setProperty(selectedRow + "/VsiSize1Req", true);
                        oModel.setProperty(selectedRow + "/VsiSize2Req", true);
                        oModel.setProperty(selectedRow + "/VsiSize3Req", true);
                        oModel.setProperty(selectedRow + "/VsiSizeNoReq", true);
                        oModel.setProperty(selectedRow + "/VsiSizeNoUnitReq", true);
                        oModel.setProperty(selectedRow + "/QtyVsizItem", true);
                        oModel.setProperty(selectedRow + "/QtyVsizItemUnitReq", true);
                        oModel.setProperty(selectedRow + "/formulaEnabled", true);
                        oModel.setProperty(selectedRow + "/Component_qty_Editable", false);
                    }
                    oModel.refresh();
                } else {
                    var sValue = Item.getSource().getValue(),
                        sEvtSrc = Item.getSource(),
                        sPath = Item.getSource().getBindingContext("addBomModel").getPath();
                    var oBundle = this.geti18nModel().getResourceBundle(),
                        sMsg = oBundle.getText("routingheader.statusmsg");
                    oDataModel.read("/ET_ITEMSet", {
                        success: function (oData) {
                            for (var x = 0; x < oData.results.length; x++) {
                                if (
                                    sValue == oData.results[x].ItemCategory ||
                                    sValue == oData.results[x].ItemCategory.toLocaleLowerCase()
                                ) {
                                    oModel.setProperty(sPath + "/ItemCategVS", "None");
                                    oModel.setProperty(sPath + "/ItemCateg", sValue);
                                    break;
                                } else {
                                    oModel.setProperty(sPath + "/ItemCategVS", "Error");
                                    oModel.setProperty(sPath + "/ItemCateg", "");
                                    sEvtSrc.setValueStateText(sMsg);
                                }
                            }
                        }.bind(this),
                        error: function (error) {
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                }
            },
            // Added new method to clear BOM table filters and sorters.
            fnClearBOMFilters: function () {
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel");
                var oBOMTableID = this.getView().byId("BOMItemsId"),
                    aBOMColumns = oBOMTableID.getColumns(),
                    iLength = aBOMColumns.length,
                    aSortedCols = oBOMTableID.getSortedColumns();
                // Clear Filters
                for (var i = 0; i < iLength; i++) {
                    var isFiltered = aBOMColumns[i].getFiltered();
                    if (isFiltered) {
                        aBOMColumns[i].filter("");
                    }
                }
                // Clear Sorters
                for (var j = 0; j < iLength; j++) {
                    if (aSortedCols.indexOf(aBOMColumns[j]) < 0) {
                        aBOMColumns[j].setSorted(false);
                    }
                }
                oVisibilityModel.setProperty("/bClearFilters", false);
                //Refresh model
                this.getView().getModel("oRoutingHeaderModel").refresh(true);
                //Set Initial Sorter on Item no field.
                oBOMTableID.getBinding("rows").sort(new sap.ui.model.Sorter("ItemNo", false));
            },
            // Added new method to control the BOM table Filtering, Sorting & Columns visible/Invisible.
            fnOpenPersonalizationDialog: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel"),
                    oTable = this.getView().byId("BOMItemsId"),
                    oColumns = oTable.getColumns();
                // Push column names to array
                var aColumnNames = [];
                oColumns.forEach(function (n) {
                    //Get column name from table
                    var sColumnName = n.getLabel().getText();
                    //Get visible property from table
                    var bVisible = n.getVisible();
                    aColumnNames.push({
                        key: sColumnName,
                        text: sColumnName,
                        visible: bVisible,
                    });
                });
                // Set model
                oRoutingHeaderModel.setProperty("/aColumnNames", aColumnNames);
                // associate controller with the fragment
                this.oPersonalizationDialog = sap.ui.xmlfragment(
                    "com.airbus.zcfe2meautorc.fragment.PersonalizationDialog",
                    this
                );
                this.getView().addDependent(this.oPersonalizationDialog);
                this.oPersonalizationDialog.setModel(oRoutingHeaderModel);
                // toggle compact style
                jQuery.sap.syncStyleClass(
                    "sapUiSizeCompact",
                    this.getView(),
                    this.oPersonalizationDialog
                );
                this.oPersonalizationDialog.open();
            },
            /* Params : oEvent This method used to assign correspondig operation number to bom items on confirmation */
            fnBOMItemAssign: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                oRoutingModel.setProperty("/oBOMTable", this.getView().byId("BOMItemsId"));
                oRoutingModel.setProperty("/SelectedOpr", "");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sErrorMsg = oBundle.getText("assign.plsselectcomponents");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oSelectedIndices = this.getView().byId("BOMItemsId").getSelectedIndices();
                if (oSelectedIndices.length < 1) {
                    MessageBox.error(sErrorMsg);
                    return;
                }
                var sTitle = oBundle.getText("assign.title"),
                    sMsg = oBundle.getText("assign.chooseopr"),
                    sOk = oBundle.getText("assign.ok"),
                    sCancel = oBundle.getText("assign.cancel"),
                    sAlreadyassignedmsg = oBundle.getText("assign.alreadyassigned");
                if (!this.selectOperationDialog) {
                    var oOperationSelct = new sap.m.Select({ selectedKey: "{oRoutingModel>/SelectedOpr}", forceSelection: false, });
                    var oItemTemplate = new sap.ui.core.Item({ key: "{oOperationItemsModel>Vornr}", text: "{oOperationItemsModel>Vornr}", });
                    oOperationSelct.addStyleClass("sapUiSmallMarginBegin");
                    oOperationSelct.setModel(oOperationItemsModel, "oOperationItemsModel");
                    oOperationSelct.setModel(oRoutingModel, "oRoutingModel");
                    oOperationSelct.bindItems("oOperationItemsModel>/aOperationItems", oItemTemplate);
                    this.selectOperationDialog = new sap.m.Dialog({
                        title: sTitle,
                        content: new sap.m.FlexBox({
                            alignItems: "Center",
                            justifyContent: "Center",
                            items: [
                                new sap.m.Text({
                                    text: sMsg,
                                }),
                                oOperationSelct,
                            ],
                        }),
                        beginButton: new sap.m.Button({
                            type: "Emphasized",
                            text: sOk,
                            press: function () {
                                var oBOMMainModel = this.getView().getModel("oRoutingHeaderModel");
                                var oBOMTable = oRoutingModel.getProperty("/oBOMTable");
                                var oprIndex;
                                var sOprNum = oRoutingModel.getProperty("/SelectedOpr") || "";
                                //Get the Index of Operation
                                var aOperations = oOperationItemsModel.getProperty("/aOperationItems") || [];
                                if (aOperations.length > 0) {
                                    oprIndex = aOperations.findIndex(function (oprItem) {
                                        return oprItem.Vornr === sOprNum;
                                    });
                                }
                                var sVplnr = aOperations[oprIndex].Vplnr;
                                if (sVplnr !== "") {
                                    // Reference operations
                                    var sMessage = oBundle.getText("assign.errormsg");
                                    MessageBox.error(sMessage);
                                    return;
                                }
                                var oBOMModel = this.getView().getModel("oRoutingHeaderModel");
                                var aSelectedIndices = oBOMTable.getSelectedIndices() || [];
                                var aBOMData = oBOMModel.getProperty("/BOM/Items/results") || [];
                                var bAssign = true;
                                aSelectedIndices.map(function (index) {
                                    //var sBomOprNum = oBOMTable.getContextByIndex(index).getProperty("Vornr") || "";
                                    var sRowPath = oBOMTable.getContextByIndex(index).sPath;
                                    var sBomOprNum = oBOMMainModel.getProperty(sRowPath + "/Vornr") || "";
                                    if (sBomOprNum !== "") {
                                        bAssign = false;
                                    }
                                });
                                if (bAssign) {
                                    aSelectedIndices.map(function (index) {
                                        var sRowPath = oBOMTable.getContextByIndex(index).sPath;
                                        oBOMMainModel.setProperty(sRowPath + "/Vornr", sOprNum); //Assign Operaiton Number
                                        oBOMMainModel.setProperty(sRowPath + "/delComp", true);
                                        oBOMMainModel.setProperty(sRowPath + "/UnRead", "Success");
                                        if (
                                            oBOMMainModel.getProperty(sRowPath + "/Vornr_Temp") !==
                                            sOprNum
                                        ) {
                                            oBOMMainModel.setProperty(sRowPath + "/Modify", "X");
                                        } else {
                                            oBOMMainModel.setProperty(sRowPath + "/Modify", ""); //Assign Modify Flag MJADMK7Z
                                        }
                                    });
                                    oVisibilityModel.setProperty("/bUnsavedChange", true);
                                    oVisibilityModel.setProperty("/bUnsavedSelectAltBom", false);
                                    oVisibilityModel.setProperty("/bBOMSplitBtnEnabled", false);
                                    oBOMModel.refresh();
                                } else {
                                    MessageBox.warning(sAlreadyassignedmsg, {
                                        actions: ["Yes", MessageBox.Action.CANCEL],
                                        onClose: function (sAction) {
                                            if (sAction === "Yes") {
                                                aSelectedIndices.map(function (index) {
                                                    var sRowPath = oBOMTable.getContextByIndex(index).sPath;
                                                    oBOMMainModel.setProperty(sRowPath + "/Vornr", sOprNum); //Assign Operaiton Number
                                                    oBOMMainModel.setProperty(sRowPath + "/UnRead", "Success");
                                                    oBOMMainModel.setProperty(sRowPath + "/delComp", true);
                                                    if (oBOMMainModel.getProperty(sRowPath + "/Vornr_Temp") !== sOprNum) {
                                                        oBOMMainModel.setProperty(sRowPath + "/Modify", "X");
                                                    } else {
                                                        oBOMMainModel.setProperty(sRowPath + "/Modify", ""); //Assign Modify Flag MJADMK7Z
                                                    }
                                                });
                                                oVisibilityModel.setProperty("/bUnsavedChange", true);
                                                oVisibilityModel.setProperty("/bBOMSplitBtnEnabled", false);
                                                oVisibilityModel.setProperty("/bUnsavedSelectAltBom", false);
                                                oBOMModel.refresh();
                                            }
                                        }.bind(this),
                                    });
                                }
                                this.getView().byId("BOMItemsId").setSelectedIndex(-1); //remove table selections
                                this.selectOperationDialog.close();
                            }.bind(this),
                        }),
                        endButton: new sap.m.Button({
                            text: sCancel,
                            press: function () {
                                oEvent.preventDefault();
                                this.getView().byId("BOMItemsId").setSelectedIndex(-1); //remove table selections
                                this.selectOperationDialog.close();
                            }.bind(this),
                        }),
                    });
                    //to get access to the global model
                    this.getView().addDependent(this.selectOperationDialog);
                }
                this.selectOperationDialog.open();
            },
            fnDelAssignOprBtn: function (oEvent) {
                var oTable = this.getView().byId("BOMItemsId");
                var aSelectedItems = oTable.getSelectedIndices();
                var oBOMModel = this.getView().getModel("oRoutingHeaderModel");
                var that = this;
                aSelectedItems.forEach(function (index) {
                    var sRowPath = oTable.getContextByIndex(index).sPath;
                    var sBomOprNum = oBOMModel.getProperty(sRowPath + "/Vornr");
                    if (sBomOprNum != "") {
                        oBOMModel.setProperty(sRowPath + "/Vornr", '');
                        oBOMModel.setProperty(sRowPath + "/Modify", 'X');
                        oBOMModel.setProperty(sRowPath + "/delComp", false);
                    }
                });
                this.getView().byId("BOMItemsId").setSelectedIndex(-1);
                that.getModel("oVisibilityModel").setProperty("/bDelComp", false);
                oBOMModel.refresh();
            },
            fnOnExpand: function (oEvent) {
                this.fnResetTableLevelFilters();
                this.fnResetTableLevelSorting();
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getPath();
                var oModel = this.getView().getModel("oRoutingHeaderModel");
                var sSerialNo = oModel.getProperty(sPath + "/SNo");
                oModel.setProperty(sPath + "/Phantom_expand_collapse", "X");
                var oRows = oModel.getProperty("/BOM/Items/results");
                for (var i = 0; i < oRows.length; i++) {
                    var oRow = oRows[i];
                    if (oRow.Comp_parent === sSerialNo) {
                        oRow.Child_indicator = "";
                    }
                }
                oModel.updateBindings(true);
            },
            fnOnCollapse: function (oEvent) {
                var oTable = this.byId("BOMItemsId");
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getPath();
                var oModel = this.getView().getModel("oRoutingHeaderModel");
                var sSerialNo = oModel.getProperty(sPath + "/SNo");
                var sLevel = oModel.getProperty(sPath + "/Comp_level");
                oModel.setProperty(sPath + "/Phantom_expand_collapse", "");
                var oRows = oModel.getProperty("/BOM/Items/results");
                //if collaps is for level1
                if (sLevel === "0") {
                    //identify the no of child pantom parts to loop it and collaps all at a time
                    var aChildPhantom = oRows.filter(function (oEle) {
                        return (
                            oEle["Comp_parent"] === sSerialNo &&
                            oEle["Phantom_indicator"] === "X"
                        );
                    });
                    //if level 0 parent can have 1 or more child phantoms
                    if (aChildPhantom.length > 0) {
                        for (var j = 0; j < aChildPhantom.length; j++) {
                            var sLevel1SNo = aChildPhantom[j].SNo;
                            aChildPhantom[j].Phantom_expand_collapse = "";
                            for (var i = 0; i < oRows.length; i++) {
                                var oRow = oRows[i];
                                if (oRow.Comp_parent === sLevel1SNo) {
                                    oRow.Child_indicator = "X";
                                }
                                if (oRow.Comp_parent === sSerialNo) {
                                    oRow.Child_indicator = "X";
                                }
                            }
                        }
                    } else {
                        //if level 1 parent can have no child phantoms
                        for (var i = 0; i < oRows.length; i++) {
                            var oRow = oRows[i];
                            if (oRow.Comp_parent === sSerialNo) {
                                oRow.Child_indicator = "X";
                            }
                        }
                    }
                } else {
                    //if collaps is for level2
                    for (var i = 0; i < oRows.length; i++) {
                        var oRow = oRows[i];
                        if (oRow.Comp_parent === sSerialNo) {
                            oRow.Child_indicator = "X";
                        }
                    }
                }
                var oBinding = oTable.getBinding("rows");
                var filter1 = new sap.ui.model.Filter("Child_indicator", sap.ui.model.FilterOperator.NE, 'X');
                var filter2 = oBinding.aFilters[0];
                var oCombinedFilter = [].concat(filter2 || [], filter1);
                oBinding.filter(oCombinedFilter);
                oModel.updateBindings(true);
                oModel.updateBindings(true);
            },
            //PHANTON PARTS- Functions to clear column level filter and sorting
            fnResetTableLevelFilters: function () {
                var oTable = this.getView().byId("BOMItemsId");
                var aTableCols = oTable.getColumns();
                for (var index = 0; index < aTableCols.length; index++) {
                    oTable.filter(aTableCols[index], "");
                }
                var oBinding = oTable.getBinding("rows");
                var filter1 = [new sap.ui.model.Filter("DeleteLineFlag", sap.ui.model.FilterOperator.NE, 'X')];
                oBinding.filter(filter1);
            },
            fnResetTableLevelSorting: function () {
                var oTable = this.getView().byId("BOMItemsId");
                var aTableCols = oTable.getColumns();
                for (var index = 0; index < aTableCols.length; index++) {
                    oTable.sort(aTableCols[index], 'None');
                }
            },
            /*Description : Modify Effectivity for BOM are */
            fnOnPressBOMarea: function (oEvent) {
                var oRoutingHeaderModel = this.getOwnerComponent().getModel("oRoutingHeaderModel"),
                    sBOMMatNumber = oRoutingHeaderModel.getProperty("/BOM/Material"),
                    sBOMPlant = oRoutingHeaderModel.getProperty("/BOM/Plant"),
                    sBOMusage = oRoutingHeaderModel.getProperty("/BOM/BomUsage"),
                    sBOMaltbom = oRoutingHeaderModel.getProperty("/BOM/AltBom"),
                    sBOMNo = oRoutingHeaderModel.getProperty("/BOM/BomNo"),
                    sGrpCntr = oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr");
                var sStatusNo = "", sTcodeValue = "";
                if (oRoutingHeaderModel.getProperty("/BOM/BomStatus") === "11") {
                    sStatusNo = "X";
                    sTcodeValue = "ZM_MEAU_EFFCS02";
                } else {
                    sTcodeValue = "ZM_MEAU_EFFCS03";
                }
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getPath(),
                    oBOMItem = oRoutingHeaderModel.getProperty(sPath),
                    sBOMItemsCateg = oBOMItem.ItemCateg,
                    sBOMItemNo = oBOMItem.ItemNo,
                    sBOMComponent = oBOMItem.Component,
                    sBOMCompDesc = oBOMItem.CompDesc,
                    sBOMItemNode = oBOMItem.ItemNode,
                    sBOMChangeno = oBOMItem.ChangeNo,
                    sBOMDepLink = oBOMItem.DepLink;
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var aFilters = [
                    new sap.ui.model.Filter(
                        "TCode",
                        FilterOperator.EQ,
                        sTcodeValue
                    ),
                ];
                oDataModel.read("/ET_Web_GuiSet", {
                    filters: aFilters,
                    success: function (oData) {
                        var sLink = oData.results[0].Link;
                        sap.m.URLHelper.redirect(
                            sLink +
                            "?BOMOK=" +
                            sBOMMatNumber +
                            "&WERKS=" +
                            sBOMPlant +
                            "&WTEXT=FAL FRANCE" +
                            "&STLAN=" +
                            sBOMusage +
                            "&STLAL=" +
                            sBOMaltbom +
                            "&STLNR=" +
                            sBOMNo +
                            "&PLNAL=" +
                            sGrpCntr +
                            "&POSNR=" +
                            sBOMItemNo +
                            "&POSTP=" +
                            sBOMItemsCateg +
                            "&OBTSP=M" +
                            "&KNOBJ=" +
                            sBOMDepLink +
                            "&STLKN=" +
                            sBOMItemNode +
                            "&BOMOB=" +
                            sBOMComponent +
                            "&KTEXT=" +
                            sBOMCompDesc +
                            "&AENNR=" +
                            sBOMChangeno +
                            "&STATUS=" +
                            sStatusNo +
                            sBOMStlty +
                            "&STLTY=" +
                            "&P_FLAG=BOM&~OKCODE=ONLI/#",
                            true
                        );
                    },
                });
            },
            fnDelAssignOprIcon: function (oEvent) {
                var sItemPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").sPath;
                var oBOMModel = this.getView().getModel("oRoutingHeaderModel");
                var sBomOprNum = oBOMModel.getProperty(sItemPath + "/Vornr");
                if (sBomOprNum != "") {
                    oBOMModel.setProperty(sItemPath + "/Vornr", '');
                    oBOMModel.setProperty(sItemPath + "/Modify", 'X');
                    oBOMModel.setProperty(sItemPath + "/delComp", false);
                }
            },
            fnProposedOprArrow: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                oRoutingModel.setProperty("/aProposedMultiPopupData", []);
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").sPath;
                var oProposedMultiData = oRoutingModel.getProperty(sPath + "/BOM_Opr_Items/results");
                oRoutingModel.setProperty("/aProposedMultiPopupData", oProposedMultiData);
                oRoutingModel.setProperty("/aProposedMultiPopupRowPath", sPath);
                var oButton = oEvent.getSource(),
                    oView = this.getView();
                if (!this._pPopover) {
                    this._pPopover = Fragment.load({
                        name: "com.airbus.zcfe2meautorc.fragment.ProposedMLPopover",
                        controller: this,
                    }).then(function (oPopover) {
                        oView.addDependent(oPopover);
                        return oPopover;
                    });
                }
                this._pPopover.then(function (oPopover) {
                    oPopover.openBy(oButton);
                });
            },
            /*This method is used for New Component allocation and to set the expand/collapse btn visiblility in the new components popup.*/
            fnProposedOprArrowNewComp: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel"),
                    oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oRoutingModel.setProperty("/aProposedNewCompPopupData", []);
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").sPath,
                    oProposedNewCompData = oRoutingModel.getProperty(sPath + "/BOM_Opr_Items/results");
                oRoutingModel.setProperty("/aProposedNewCompPopupData", oProposedNewCompData);
                oRoutingModel.setProperty("/sNewComp", oRoutingModel.getProperty(sPath + "/Component"));
                oRoutingModel.setProperty("/sNewCompDesc", oRoutingModel.getProperty(sPath + "/CompDesc"));
                oRoutingModel.setProperty("/sNewCompItemNo", oRoutingModel.getProperty(sPath + "/ItemNo"));
                if (oRoutingModel.getProperty(sPath + "/Comp_wght") === "") {
                    oRoutingModel.setProperty("/sNewCompwgt", "- G");
                } else {
                    oRoutingModel.setProperty("/sNewCompwgt", oRoutingModel.getProperty(sPath + "/Comp_wght").replace(/\s/g, ''));
                }
                oRoutingModel.setProperty("/sNewCompItemNo", oRoutingModel.getProperty(sPath + "/ItemNo"));
                for (var i = 0; i < oProposedNewCompData.length; i++) {
                    var newComp = oProposedNewCompData[i];
                    newComp.Second_Drop_Down = "E";
                    if (newComp.CompParent === "X" && newComp.Comp_Grp === "X") {
                        newComp.Rec_Visible_UI = "X";
                        newComp.Second_Drop_Down = "E";
                    } else if (newComp.Comp_Grp === "X") {
                        newComp.Rec_Visible_UI = "X";
                        newComp.Second_Drop_Down = ""
                    }
                    else {
                        newComp.Rec_Visible_UI = "";
                        newComp.Second_Drop_Down = "";
                    }
                    if (newComp.RecVisible === "X") {
                        newComp.Drill_Flag = "X";
                    }
                }
                if (oProposedNewCompData.length > 1) {
                    oVisibilityModel.setProperty("/bMLClpAll", false);
                    oVisibilityModel.setProperty("/bMLExpAll", true);
                    oVisibilityModel.setProperty("/bMLExpEnable", true);
                } else {
                    oVisibilityModel.setProperty("/bMLClpAll", false);
                    oVisibilityModel.setProperty("/bMLExpAll", true);
                    oVisibilityModel.setProperty("/bMLExpEnable", false);
                }
                oRoutingModel.setProperty("/aProposedNewCompPopupRowPath", sPath);
                if (!this._pNewCompPopover) {
                    this._pNewCompPopover = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.ProposedMLDialogNewComponent", this);
                    this.getView().addDependent(this._pNewCompPopover);
                }
                var oSplitter = sap.ui.getCore().byId("NewCompSplitterID");
                var oLayoutMain = oSplitter.getContentAreas()[0].getLayoutData();
                var oLayoutIcon = oSplitter.getContentAreas()[1].getLayoutData();
                var oLayoutValues = oSplitter.getContentAreas()[2].getLayoutData();
                oRoutingModel.setProperty("/sNewCompDialogWidth", "850px");
                oRoutingModel.setProperty("/sExpandRightBtnVisible", false);
                oRoutingModel.setProperty("/sFlexBoxVisible", false);
                oRoutingModel.setProperty("/sInfoBarVisible", false);
                oLayoutMain.setSize("100%");
                oLayoutIcon.setSize("0%");
                oLayoutValues.setSize("0%");
                oRoutingModel.refresh(true);
                oRoutingModel.updateBindings(true);
                this._pNewCompPopover.open();
                oRoutingModel.updateBindings(true);
            },
            // Method to open split popup and add rows to BOM table
            fnOnRowSplit: function (oEvent) {
                var oRow = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getObject();
                var oDialog = this.fnGetDialog(),
                    oData = {
                        iParentIndex: oRow.SNo,
                        sPath: oEvent.getSource().getBindingContext("oRoutingHeaderModel").sPath,
                        bConfirmBtnEnable: false,
                        bAddBtnEnable: true,
                        bItemNumErrorFlag: true,
                        bItemQtyErrorFlag: true,
                        refQty: oRow.Component_qty,
                        iAssgnedQty: 0, //spllited quantity
                        items: [
                            {
                                splitItmIndex: 0,
                                item: oRow.ItemNo, //assign ref item
                                Qty: oRow.Component_qty,
                            },
                            {
                                splitItmIndex: 1,
                                item: oRow.ItemNo, //assign first item
                                Qty: 0,
                                prvQty: 0,
                                bDelBtnEnable: true,
                                itmNoValState: "None",
                                Component_qty_Vstate: "None",
                                ZzdsMatnrVS: "None",
                            },
                        ],
                    };
                this.getView().setModel(new JSONModel(oData), "splitItmMdl");
                oDialog.open();
            },
            /* Function to get the split fragment */
            fnGetDialog: function () {
                if (!this.oDialogValueHelp) {
                    this.oDialogValueHelp = sap.ui.xmlfragment(
                        "splitItem", "com.airbus.zcfe2meautorc.fragment.BOMSplitPopup",
                        this
                    );
                    this.getView().addDependent(this.oDialogValueHelp);
                }
                return this.oDialogValueHelp;
            },
            /*function to add item on split item fragment */
            fnOnAddItem: function (oEvent) {
                var bValid = this.fnValidateItemQty(),
                    aData = this.getView().getModel("splitItmMdl").getData().items;
                if (bValid) {
                    aData.push({
                        splitItmIndex: aData.length,
                        item: aData[0].item, //assign first item
                        Qty: 0,
                        prvQty: 0,
                        bDelBtnEnable: true,
                        itmNoValState: "None",
                        Component_qty_Vstate: "None",
                    });
                }
                this.getView().getModel("splitItmMdl").updateBindings();
            },
            /*function validate quantity*/
            fnValidateItemQty: function () {
                var oSplitMdl = this.getView().getModel("splitItmMdl"),
                    aData = oSplitMdl.getData().items,
                    bValid = true;
                //if value is zero or error value state
                if (
                    !aData[aData.length - 1].Qty ||
                    aData[aData.length - 1].Component_qty_Vstate === "Error"
                ) {
                    sap.m.MessageToast.show(
                        this.getView().getModel("i18n").getResourceBundle().getText("EnterValidQty")
                    );
                    aData[aData.length - 1].Component_qty_Vstate = "Error";
                    bValid = false;
                    oSplitMdl.updateBindings();
                }
                return bValid;
            },
            /*function to handle line item no change*/
            fnHandleSplitItmNoLiveChange: function (oEvent) {
                var iValue = oEvent.getSource().getValue(),
                    sRegExp = /^[a-zA-Z0-9]*$/;
                if (sRegExp.test(iValue) && iValue !== "") {
                    oEvent.getSource().setValueState("None");
                    this.getView().getModel("splitItmMdl").setProperty("/bItemNumErrorFlag", true);
                    this.fnEnblorDisbleActBtns(true);
                } else {
                    oEvent.getSource().setValueState("Error");
                    this.getView().getModel("splitItmMdl").setProperty("/bItemNumErrorFlag", false);
                    this.fnEnblorDisbleActBtns(false);
                }
            },
            /*function to disable action buttons */
            fnEnblorDisbleActBtns: function (bEnable) {
                var oSplitMdl = this.getView().getModel("splitItmMdl");
                if (
                    oSplitMdl.getProperty("/bItemNumErrorFlag") &&
                    oSplitMdl.getProperty("/bItemQtyErrorFlag")
                ) {
                    oSplitMdl.setProperty("/bConfirmBtnEnable", bEnable);
                    oSplitMdl.setProperty("/bAddBtnEnable", bEnable);
                } else {
                    oSplitMdl.setProperty("/bConfirmBtnEnable", false);
                    oSplitMdl.setProperty("/bAddBtnEnable", false);
                }
            },
            /*function to handle the live change of input*/
            fnHandleSplitItmQtyLiveChange: function (oEvent) {
                var iValue = formatter.getParsedNumeric(
                    oEvent.getSource().getValue(),
                    this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM")
                ),
                    oBindingContext = oEvent.getSource().getBindingContext("splitItmMdl"),
                    sRegExp = /^\d+[\.\,]\d{0,3}$/,
                    sNumRegExp = /^\d+$/;
                if ((sRegExp.test(iValue) || sNumRegExp.test(iValue)) && parseFloat(iValue) > 0) {
                    oEvent.getSource().setValueState("None");
                    this.getView().getModel("splitItmMdl").setProperty("/bItemQtyErrorFlag", true);
                    //if Qty then calculate
                    this.fnCalculateQty(oEvent);
                } else {
                    oEvent.getSource().setValueState("Error");
                    oEvent.getSource().setValueStateText("");
                    this.getView().getModel("splitItmMdl").setProperty("/bItemQtyErrorFlag", false);
                    this.fnEnblorDisbleActBtns(false);
                    this.getView().getModel("splitItmMdl").setProperty(oBindingContext.getPath() + "/bDelBtnEnable", false);
                }
            },
            /*function to calculate the qty on split item*/
            fnCalculateQty: function (oEvent) {
                var iValue = formatter.getParsedNumeric(
                    oEvent.getSource().getValue(),
                    this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM")
                ),
                    iRefQty = this.getModel("splitItmMdl").getProperty("/refQty"),
                    iAssgnedQty = this.getModel("splitItmMdl").getProperty("/iAssgnedQty"),
                    oBindingContext = oEvent.getSource().getBindingContext("splitItmMdl"),
                    oRow = oBindingContext.getObject(),
                    iDiffQty = iRefQty - iAssgnedQty - (iValue - oRow.prvQty);
                if (iDiffQty > 0) {
                    this.getModel("splitItmMdl").setProperty("/items/0/Qty", parseFloat(iDiffQty).toFixed(3));
                    this.getModel("splitItmMdl").setProperty("/iAssgnedQty", parseFloat(iAssgnedQty) + (parseFloat(iValue) - parseFloat(oRow.prvQty)));
                    this.fnEnblorDisbleActBtns(true);
                    //enable delete button
                    this.getModel("splitItmMdl").setProperty(oBindingContext.getPath() + "/bDelBtnEnable", true);
                    this.getModel("splitItmMdl").setProperty(oBindingContext.getPath() + "/prvQty", iValue);
                    oEvent.getSource().setValueState("None");
                } else {
                    //disable the buttons
                    this.fnEnblorDisbleActBtns(false);
                    //disable delete buttons
                    this.getModel("splitItmMdl").setProperty(oBindingContext.getPath() + "/bDelBtnEnable", true);
                    oEvent.getSource().setValueState("Error");
                    oEvent.getSource().setValueStateText(this.getView().getModel("i18n").getResourceBundle().getText("refValueCanNotBeLessThanOne"));
                }
            },
            /*function to set the value */
            fnHandleSplitItmQtyChange: function (oEvent) {
                if (oEvent.getSource().getValueState() !== "Error") {
                    var iValue = formatter.getParsedNumeric(
                        oEvent.getSource().getValue(),
                        this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM")
                    ),
                        oBindingContext = oEvent.getSource().getBindingContext("splitItmMdl");
                    //decimal split v2.3
                    this.getModel("splitItmMdl").setProperty(oBindingContext.getPath() + "/Qty", iValue);
                }
            },
            /* Combine bom -function to open BOM Combine popup */
            fnOnRowCombine: function (oEvent) {
                var oRow = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getObject(),
                    aBomItems = JSON.parse(
                        JSON.stringify(this.getView().getModel("oRoutingHeaderModel").getProperty("/BOM/Items/results"))
                    ),
                    iTempIndex = 1,
                    oData;
                if (!this._oMergeBomDialog) {
                    this._oMergeBomDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.MergeBom", this
                    );
                    this.getView().addDependent(this._oMergeBomDialog);
                }
                oData = {
                    MergeTitle: oRow.Component + oRow.CompDesc,
                    iParentIndex: oRow.SNo,
                    sPath: oEvent.getSource().getBindingContext("oRoutingHeaderModel").sPath,
                    bConfirmBtnEnable: false,
                    bItemNumErrorFlag: true,
                    bItemQtyErrorFlag: true,
                    refQty: parseFloat(oRow.Component_qty),
                    iAssgnedQty: 0, //merged quantity
                    items: [
                        {
                            mergeItmIndex: 0,
                            ItemNo: oRow.ItemNo, //assign ref item
                            Component: oRow.Component,
                            CompUnit: oRow.CompUnit,
                            ItemCateg: oRow.ItemCateg,
                            CompQty: parseFloat(oRow.Component_qty),
                            Vornr: oRow.Vornr,
                            SNo: oRow.SNo,
                            bDelBtnVisible: false,
                        },
                    ],
                    aDelItems: [],
                };
                aBomItems.forEach(function (oItem) {
                    //copy only if only same item and SNo
                    if (oItem.Component === oRow.Component &&
                        oItem.SNo !== oRow.SNo &&
                        oItem.Comp_level === "0") {
                        oItem.mergeItmIndex = iTempIndex;
                        oItem.Component_qty_Vstate = "None";
                        oItem.Qty = 0;
                        oItem.prvQty = 0;
                        //enable the button if only unit and catg or same
                        if (oItem.CompUnit === oRow.CompUnit &&
                            oItem.ItemCateg === oRow.ItemCateg) {
                            oItem.orgCompQty = parseFloat(oItem.Component_qty);
                            oData.refQty += parseFloat(oItem.Component_qty);
                            oItem.bDelBtnVisible = true;
                            oItem.bDelBtnEnable = true;
                        } else {
                            oItem.bDelBtnVisible = false;
                        }
                        oData.items.push(oItem);
                        iTempIndex++;
                    }
                });
                this._oMergeBomDialog.setModel(new JSONModel(oData));
                this._oMergeBomDialog.open();
            },
            /*Function to delete the split item from the table*/
            fnOnRowActionDel: function (oEvent) {
                var oBindingCntxt = oEvent.getSource().getBindingContext("oRoutingHeaderModel"),
                    oRow = oBindingCntxt.getObject(),
                    oLoclMdl = this.getView().getModel("oRoutingHeaderModel"),
                    aLclMdlData = oLoclMdl.getProperty("/BOM/Items/results"),
                    iRowIndx,
                    bSaveEnable,
                    iParentQty;
                for (var i = 0; i < aLclMdlData.length; i++) {
                    if (!aLclMdlData[i].bChild &&
                        aLclMdlData[i].ItemNo === oRow.iParentItemNo &&
                        aLclMdlData[i].ItemCateg === oRow.ItemCateg &&
                        aLclMdlData[i].SNo === oRow.iParentIndex
                    ) {
                        iParentQty = aLclMdlData[i].Component_qty;
                        //update amount only if amount more than zero
                        if (parseFloat(oRow.Component_qty) > 0) {
                            aLclMdlData[i].Component_qty = parseFloat(
                                parseFloat(oRow.Component_qty) + parseFloat(iParentQty)
                            ).toFixed(3);
                        }
                    }
                    //find the index of the row
                    if (aLclMdlData[i].uid && aLclMdlData[i].uid === oRow.uid) {
                        iRowIndx = i;
                    }
                }
                aLclMdlData.splice(iRowIndx, 1);
                oLoclMdl.updateBindings(true);
                //enable or disable the save button
            },
            /** Method : fnOnCopyMini
              * Description : Funtion for MINI'S COPY BUTTON -> USING NAVIGATOR CLIPBOARD TO COPY */
            fnOnCopyMini: function (oEvent) {
                var sItemPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").sPath;
                var oBOMModel = this.getView().getModel("oRoutingHeaderModel");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sPop = oBundle.getText('mini.popUp');
                var text = oBOMModel.getProperty(sItemPath + "/Component");
                navigator.clipboard.writeText(text).then(() => {
                    // Success message (optional)
                    sap.m.MessageToast.show(sPop);
                }, (err) => {
                    // Error handling (optional)
                    console.error("Failed to copy text:", err);
                });
            },
            /*Description: Function to open Multiple Parameter3 in BOM Area */
            fnSeeMoreParameter3: function (oEvent) {
                var oSource = oEvent.getSource();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sCurrentPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getPath();
                var sCurrentResult = oRoutingHeaderModel.getProperty(sCurrentPath + "/Parameter3_Multiple");
                var aParameter3 = [];
                if (sCurrentResult !== "") {
                    var aParameter3Data = sCurrentResult.split(",");
                    for (var i = 0; i < aParameter3Data.length; i++) {
                        aParameter3.push({
                            Parameter3: aParameter3Data[i],
                        });
                    }
                    oRoutingHeaderModel.setProperty("/aMultipleParameter3", aParameter3);
                } else {
                    oRoutingHeaderModel.setProperty("/aMultipleParameter3", []);
                }
                oRoutingHeaderModel.updateBindings(true);
                if (!this.oSeeMoreParameter3Frag) {
                    this.oSeeMoreParameter3Frag = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.SeeMoreParameter3",
                        this
                    );
                    this.getView().addDependent(this.oSeeMoreParameter3Frag);
                }
                this.oSeeMoreParameter3Frag.openBy(oSource);
            },
            /*Description : Method triggered on change of action in MASS UPDATE*/
            fnActionChangeMU: function (oEvent) {
                var oVisibilityModel = this.getView().getModel("oVisibilityModel"),
                    oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel"),
                    oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    iAction = oEvent.getSource().getSelectedItem().getKey();
                var oRoutingModificationsLocalModel = this.getOwnerComponent().getModel("oRoutingModel");
                oRoutingModificationsLocalModel.setProperty("/aMassUpdateChoosenTaks", oEvent.getSource().getSelectedItem().getText());
                var sExisRoutingStatus = this.getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails/Status");
                oRoutingModificationsLocalModel.setProperty("/sExisRoutingStatus", sExisRoutingStatus);
                if (iAction === "1") {
                    var sMsgOprSelected = this.getView().getModel("i18n").getResourceBundle().getText("massUpdate.AddOprSelected");
                    sap.m.MessageToast.show(sMsgOprSelected, {
                        duration: 4000,
                        width: "25em"
                    });
                    oVisibilityModel.setProperty("/bActionCombo", false);
                    oVisibilityModel.setProperty("/bOprCombo", false);
                    oRoutingHeaderModel.setProperty("/bEnableKeyUserAddImpOprButton", true);
                    oRoutingHeaderModel.setProperty("/aTempAddedOperButton", false);
                    oOperationItemsModel.setProperty("/aTempAddedOper", "");
                    oOperationItemsModel.setProperty("/aVornrTempAddedOper", []);
                } else if (iAction === "2") {
                    oVisibilityModel.setProperty("/bActionCombo", false);
                    oVisibilityModel.setProperty("/bOprCombo", false);
                    oRoutingHeaderModel.setProperty("/bEnableKeyUserOprDelButton", true);
                    oRoutingHeaderModel.setProperty("/aTempAddedOperButton", true);
                    oOperationItemsModel.setProperty("/aTempAddedOper", []);
                    oOperationItemsModel.setProperty("/aVornrTempAddedOper", []);
                } else {
                    oVisibilityModel.setProperty("/bActionCombo", true);
                    oVisibilityModel.setProperty("/bOprCombo", true);
                    oRoutingHeaderModel.setProperty("/aTempAddedOperButton", false);
                    oOperationItemsModel.setProperty("/aTempAddedOper", "");
                    oOperationItemsModel.setProperty("/aVornrTempAddedOper", []);
                }
            },
            /* Mehtod : fnOprChange .. Mass Update*/
            fnOprChange: function () {
                var oVisibilityModel = this.getView().getModel("oVisibilityModel"),
                    aSelectedItems = [],
                    aSelectedItems = oVisibilityModel.getProperty("/sSelectedOperations"),
                    sSelectedActnKey = oVisibilityModel.getProperty("/sSelectedAction");
                if (aSelectedItems.length > 0) {
                    if (sSelectedActnKey === "5") {
                        //Long Text
                        if (aSelectedItems.length > 1) {
                            sap.m.MessageToast.show("Please select only 1 operation");
                            aSelectedItems.pop();
                            oVisibilityModel.updateBindings(true);
                            return;
                        }
                    }
                    if (sSelectedActnKey == "6") {
                        //add prt
                        if (aSelectedItems.length > 1) {
                            sap.m.MessageToast.show("Please select only 1 operation");
                            aSelectedItems.pop();
                            oVisibilityModel.updateBindings(true);
                            return;
                        }
                    }
                    if (sSelectedActnKey == "7") {
                        // del prt
                        if (aSelectedItems.length > 1) {
                            sap.m.MessageToast.show("Please select only 1 operation");
                            aSelectedItems.pop();
                            oVisibilityModel.updateBindings(true);
                            return;
                        }
                    }
                    if (sSelectedActnKey == "9") {
                        // Classification of operation
                        if (aSelectedItems.length > 1) {
                            sap.m.MessageToast.show("Please select only 1 operation");
                            aSelectedItems.pop();
                            oVisibilityModel.updateBindings(true);
                            return;
                        }
                    }
                }
            },
            /* Method : fnOprSelectionFinish
               Description : Method to set Operation dropdown not editable Mass Update*/
            fnOprSelectionFinish: function () {
                var that = this;
                var oRoutingHeaderModel = that.getOwnerComponent().getModel("oRoutingHeaderModel");
                var oRoutingModificationsLocalModel = that.getOwnerComponent().getModel("oRoutingModel");
                var MUSelectionList = oRoutingHeaderModel.getProperty("/oActionListData");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    oVisibilityModel = this.getView().getModel("oVisibilityModel"),
                    aSelectedItems = [],
                    aSelectedItems = oVisibilityModel.getProperty("/sSelectedOperations"),
                    sSelectedActnKey = oVisibilityModel.getProperty("/sSelectedAction"),
                    aOperations = oOperationItemsModel.getProperty("/aOperationItems");
                var aOpData = oOperationItemsModel.getProperty("/aOperationItems");
                if (aSelectedItems.length >= 1) {
                    if (sSelectedActnKey !== "1" || sSelectedActnKey !== "2") {
                        oVisibilityModel.setProperty("/bActionCombo", false);
                        oVisibilityModel.setProperty("/bOprCombo", false);
                    }
                }
                if (aSelectedItems.length > 0) {
                    if (sSelectedActnKey === "3") {
                        //Work Center
                        aOperations.forEach((element) => {
                            for (var i = 0; i < aSelectedItems.length; i++) {
                                if (element.Vornr === aSelectedItems[i]) {
                                    element.bEnableKeyUserWorkCenter = true;
                                }
                            }
                        });
                        oOperationItemsModel.updateBindings(true);
                    }
                    if (sSelectedActnKey === "4") {
                        //Short Text Desc
                        aOperations.forEach((element) => {
                            for (var i = 0; i < aSelectedItems.length; i++) {
                                if (element.Vornr === aSelectedItems[i]) {
                                    element.bEnableKeyUserOprShortTxtDesc = true;
                                }
                            }
                        });
                        oOperationItemsModel.updateBindings(true);
                    }
                    if (sSelectedActnKey === "5") {
                        //Long Text
                        aOperations.forEach((element) => {
                            if (element.Vornr === aSelectedItems[0]) {
                                element.bEnableKeyUserOprLongTxt = true;
                                element.bEnableOprDoc = true;
                            }
                        });
                        oOperationItemsModel.updateBindings(true);
                    }
                    if (sSelectedActnKey == "6") {
                        //add prt
                        aOperations.forEach((element) => {
                            if (element.Vornr === aSelectedItems[0]) {
                                element.bEnableKeyUserPRTAdd = true;
                                element.bEnableKeyUserPRTTable = true;
                                var oPrt = element.PRT.results;
                                for (var i = 0; i < oPrt.length; i++) {
                                    oPrt[i].sLoginMassUpdateUser = "";
                                }
                            } else {
                                element.bEnableKeyUserPRTAdd = false;
                                element.bEnableKeyUserPRTTable = false;
                                var oPrt = element.PRT.results;
                                for (var i = 0; i < oPrt.length; i++) {
                                    oPrt[i].sLoginMassUpdateUser = "X";
                                }
                            }
                        });
                        oOperationItemsModel.updateBindings(true);
                    }
                    if (sSelectedActnKey == "7") {
                        // del prt
                        aOperations.forEach((element) => {
                            if (element.Vornr === aSelectedItems[0]) {
                                element.bEnableKeyUserPRTDel = true;
                                element.aTempAddedDelButton = true;
                            } else {
                                element.bEnableKeyUserPRTDel = false;
                                element.aTempAddedDelButton = false;
                            }
                        });
                        oOperationItemsModel.updateBindings(true);
                    }
                    if (sSelectedActnKey === "8") {
                        //No. of employees
                        aOperations.forEach((element) => {
                            for (var i = 0; i < aSelectedItems.length; i++) {
                                if (element.Vornr === aSelectedItems[i]) {
                                    element.bEnableKeyUserNoEmployees = true;
                                }
                            }
                        });
                        oOperationItemsModel.updateBindings(true);
                    }
                    if (sSelectedActnKey === "9") {
                        // V3.1 Classification of operation 
                        aOperations.forEach((element) => {
                            if (element.Vornr === aSelectedItems[0]) {
                                element.bEnableOprClassification = true;
                            }
                        });
                        oOperationItemsModel.updateBindings(true);
                    }
                }
                if (sSelectedActnKey === "3") {
                    var aExistWorkCenters = [];
                    var aSelectedOps = this.getView().byId("oOperationCombo").getSelectedKeys();
                    if (aSelectedOps.length > 0) {
                        for (var i = 0; i < aSelectedOps.length; i++) {
                            var aOperDataAvailable = aOpData.filter(function (oEle) {
                                return oEle["Vornr"] === aSelectedOps[i];
                            });
                            aExistWorkCenters.push({
                                sOprNo: aSelectedOps[i],
                                sWorkCenter: aOperDataAvailable[0].Arbpl,
                            });
                        }
                    }
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateExistWorkCenters", aExistWorkCenters);
                }
                if (sSelectedActnKey === "4") {
                    var aExistShrtDesc = [];
                    var aSelectedOps = this.getView().byId("oOperationCombo").getSelectedKeys();
                    if (aSelectedOps.length > 0) {
                        for (var i = 0; i < aSelectedOps.length; i++) {
                            var aOperDataAvailable = aOpData.filter(function (oEle) {
                                return oEle["Vornr"] === aSelectedOps[i];
                            });
                            aExistShrtDesc.push({
                                sOprNo: aSelectedOps[i],
                                sShrtDesc: aOperDataAvailable[0].Ltxa1,
                            });
                        }
                    }
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateExistShrtTxtDesc", aExistShrtDesc);
                }
                if (sSelectedActnKey === "5") {
                    var aExistLngDesc = [];
                    var aSelectedOps = this.getView().byId("oOperationCombo").getSelectedKeys();
                    var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                    if (aSelectedOps.length > 0) {
                        for (var i = 0; i < aSelectedOps.length; i++) {
                            var aOperDataAvailable = aOpData.filter(function (oEle) {
                                return oEle["Vornr"] === aSelectedOps[i];
                            });
                            aExistLngDesc.push({
                                sOprNo: aSelectedOps[i],
                            });
                        }
                    }
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateExistLngTxtDesc", aExistLngDesc);
                    var sExistingTempLongTxt = oOperationItemsModel.oData.aOperationItems.filter(function (oEle) {
                        return oEle["Vornr"] === aExistLngDesc[0].sOprNo;
                    });
                    oRoutingModificationsLocalModel.setProperty("/sExistingTempLongTxt", sExistingTempLongTxt[0].Long_Text.results);
                }
                if (sSelectedActnKey === "6" || sSelectedActnKey === "7") {
                    var aExistPRTDesc = [];
                    var aSelectedOps = this.getView().byId("oOperationCombo").getSelectedKeys();
                    if (aSelectedOps.length > 0) {
                        for (var i = 0; i < aSelectedOps.length; i++) {
                            var aOperDataAvailable = aOpData.filter(function (oEle) {
                                return oEle["Vornr"] === aSelectedOps[i];
                            });
                            aExistPRTDesc.push({
                                sOprNo: aSelectedOps[i],
                            });
                        }
                    }
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateExistPRTDesc", aExistPRTDesc);
                } if (sSelectedActnKey === "8") {
                    var aExistNoEployees = [];
                    var aSelectedOps = this.getView().byId("oOperationCombo").getSelectedKeys();
                    if (aSelectedOps.length > 0) {
                        for (var i = 0; i < aSelectedOps.length; i++) {
                            var aOperDataAvailable = aOpData.filter(function (oEle) {
                                return oEle["Vornr"] === aSelectedOps[i];
                            });
                            aExistNoEployees.push({
                                sOprNo: aSelectedOps[i],
                                sNoEmployees: aOperDataAvailable[0].Anzma,
                            });
                        }
                    }
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateExistsNoEmployees", aExistNoEployees);
                }
                // MARS V3.1 Mass update classification of operation
                if (sSelectedActnKey === "9") {
                    var aExistOprClassification = [];
                    var aSelectedOps = this.getView().byId("oOperationCombo").getSelectedKeys();
                    var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                    if (aSelectedOps.length > 0) {
                        for (var i = 0; i < aSelectedOps.length; i++) {
                            var aOperDataAvailable = aOpData.filter(function (oEle) {
                                return oEle["Vornr"] === aSelectedOps[i];
                            });
                            aExistOprClassification.push({
                                sOprNo: aSelectedOps[i],
                            });
                        }
                    }
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateExistClassificationOfOperation", aExistOprClassification);
                    var sExistingClassificationOpr = oOperationItemsModel.oData.aOperationItems.filter(function (oEle) {
                        return oEle["Vornr"] === aExistOprClassification[0].sOprNo;
                    });
                    oRoutingModificationsLocalModel.setProperty("/sExistingClassificationOpr", sExistingClassificationOpr[0].Opr_Classification.results);
                }
                //prepare a selected oprs list in a format to send it back end
                if (aSelectedItems.length > 0) {
                    var sOprFormat = "";
                    for (var j = 0; j < aSelectedItems.length; j++) {
                        sOprFormat = sOprFormat + aSelectedItems[j] + ";";
                    }
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateSelectedOprFormatForBackend", sOprFormat.slice(0, -1));
                } else {
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateSelectedOprFormatForBackend", "");
                }
            },
            /* Method : fnStatusChange
            Description : Method to set status editable Mass Update  */
            fnStatusChange: function (oEvent) {
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var bMassCheck = oVisibilityModel.getProperty("/bMassCheck");
                var oRoutingModificationsLocalModel = this.getView().getModel("oRoutingModel");
                var sExisRoutingStatus = this.getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails/Status");
                oRoutingModificationsLocalModel.setProperty("/sExisRoutingStatus", sExisRoutingStatus);
                var bSelected = oEvent.getParameter("selected");
                if (bMassCheck) {
                    bMassCheck = false;
                } else {
                    bMassCheck = true;
                }
                if (bSelected) {
                    this.getView().getModel("oRoutingHeaderModel").setProperty("/bEnableKeyUserStatus", true);
                } else {
                    this.getView().getModel("oRoutingHeaderModel").setProperty("/bEnableKeyUserStatus", false);
                }
            },
            fnNavigateToMuProgress: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sUserName = oOperationItemsModel.getProperty("/BNAME");
                var aFilters = [new sap.ui.model.Filter("TCode", FilterOperator.EQ, "SM37"),];
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.read("/ET_Web_GuiSet", {
                    filters: aFilters,
                    success: function (oData) {
                        var sURLs = oData.results[0].Link;
                        sap.m.URLHelper.redirect(sURLs + "?~transaction=SM37" + "&BTCH2170-JOBNAME=ZMARS*" + "&BTCH2170-USERNAME=*" + "&~OKCODE=DOIT", true);
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            // Added new method to control icon of panel header based on weather Header panel is expanded or collapsed.
            // Code is adjusted in such a way that Expand / collpase icon is based on Header panel is manually expanded / collapsed.
            fnExpandRoutingHeader: function (oEvent) {
                var bExpanded = oEvent.getSource().getExpanded();
                var oButtonExpandCollapse = this.getView().byId("oButtonExpandCollapse");
                if (bExpanded === true) {
                    oButtonExpandCollapse.setIcon("sap-icon://drill-down");
                } else {
                    oButtonExpandCollapse.setIcon("sap-icon://process");
                }
            },
            // Added new method to Expand / Collapse all panels.
            fnExpandCollapsePanels: function (oEvent) {
                var oButtonExpandCollapse = this.getView().byId("oButtonExpandCollapse");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                //Only for Header panel
                var oRoutingHeader = this.getView().byId("RoutingHeaderId");
                if (oRoutingHeaderModel.getProperty("/sExpandPanel") === true) {
                    this.getView().byId("oButtonRoutingPanel").setIcon("sap-icon://navigation-right-arrow");
                    oRoutingHeaderModel.setProperty("/sExpandPanel", false);
                    oButtonExpandCollapse.setIcon("sap-icon://process");
                    oButtonExpandCollapse.setTooltip(oBundle.getText("showDetails"));
                    this.getView().byId("oButtonRoutingPanel").setTooltip(oBundle.getText("phantom.allexpand"));
                } else {
                    this.getView().byId("oButtonRoutingPanel").setIcon("sap-icon://navigation-down-arrow");
                    oRoutingHeaderModel.setProperty("/sExpandPanel", true);
                    oButtonExpandCollapse.setIcon("sap-icon://drill-down");
                    oButtonExpandCollapse.setTooltip(oBundle.getText("hideDetails"));
                    this.getView().byId("oButtonRoutingPanel").setTooltip(oBundle.getText("phantom.allcollapse"));
                }
                //Only for Operations panel (Dynamic)
                var oListofPanels = this.getView().byId("listBindingOpr");
                var oPanelItems = oListofPanels.getItems();
                oPanelItems.forEach(function (n) {
                    var oPanelContent = n.getContent()[0];
                    if (oRoutingHeaderModel.getProperty("/sExpandPanel") === true) {
                        oPanelContent.setExpanded(true);
                    } else {
                        oPanelContent.setExpanded(false);
                    }
                });
            },
            /*** Params : oEvent* This method used triggers on change of tasklist description*/
            fnChangeTasklistdescr: function (oEvent) {
                var sLongText = "";
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sTasklistdesc = oRoutingHeaderModel.getProperty("/aHeaderDetails/Task_List_Desc") || "";
                sTasklistdesc = formatter.fnEncodeEntities(sTasklistdesc); // Encoding < and >
                var sSyncTasklistdesc = oRoutingHeaderModel.getProperty("/sSyncTasklistdesc");
                sLongText = oRoutingHeaderModel.getProperty("/sLongText");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (sLongText === "" && sTasklistdesc.length > 0) {
                    sLongText = "<p>" + sTasklistdesc + "</p>";
                } else if (sLongText) {
                    // since the Longtext is already formatted , no need to format again
                    // Replace fisrt line of Longtext with tasklist description
                    if (sTasklistdesc !== sSyncTasklistdesc) {
                        var aPlainText = formatter.fnPlainText(sLongText);
                        if (aPlainText[0].Edit === "I") {
                            //in case of Include text
                            var sIncludeTextPara, sShortTextPara;
                            if (
                                sTasklistdesc.substring(0, 39) !==
                                sSyncTasklistdesc.substring(0, 39) ||
                                sSyncTasklistdesc.substring(39, 40) !== " " ||
                                sTasklistdesc.substring(39, 40) !== ""
                            ) {
                                sIncludeTextPara = this.fnHtmlParas(sLongText);
                                sShortTextPara = "<p>" + sTasklistdesc + "</p>";
                                sLongText = sLongText.replace(sIncludeTextPara, sShortTextPara);
                            }
                        } else {
                            var sFirstLine = aPlainText[0].Line;
                            var sFormattedText = sFirstLine.replace(/(\r\n|\n|\r)/gm, "");
                            sLongText = sLongText.replace(sFormattedText, sTasklistdesc);
                        }
                    }
                } else {
                    // If both long text and tasklist are empty
                    sLongText = "";
                }
                oRoutingHeaderModel.setProperty("/sLongText", sLongText);
            },
            /*** Params : N/A * This method used to break into paragraphs */
            fnHtmlParas: function (sLongText) {
                var aParas = [],
                    index = 0;
                var re = new RegExp("<p", "gi");
                while (re.exec(sLongText)) {
                    var sPara = sLongText.slice(index, re.lastIndex - 2);
                    index = re.lastIndex - 2;
                    aParas.push(sPara);
                }
                //Adding the last paragraph to the array
                sPara = sLongText.slice(index, sLongText.length);
                aParas.push(sPara);
                var sIncludeTextPara = aParas[1].replace(/(\r\n|\n|\r)/gm, ""); //Include text paragraph
                return sIncludeTextPara;
            },
            /*This method used to show additional fields in routing header*/
            fnRoutingExpandfields: function () {
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                if (oVisibilityModel.getProperty("/bExpandRoutingHeaderVisible")) {
                    oVisibilityModel.setProperty("/bExpandRoutingHeaderVisible", false);
                } else {
                    oVisibilityModel.setProperty("/bExpandRoutingHeaderVisible", true);
                }
            },
            /* Method to open AOCI Management Fragment */
            fnOpenAOCIFragment: function () {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var aHeaderDetails = oRoutingHeaderModel.getProperty("/aHeaderDetails");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sDelMsg = oBundle.getText("aoci.delete");
                var sDeleteMsg = oBundle.getText("aoci.oneAOCIMsg");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var aAOCI = oRoutingHeaderModel.getProperty("/aAOCIData");
                var count = 0;
                if (aAOCI !== undefined) {
                    oVisibilityModel.setProperty("/sAOCIDelButton", sDelMsg);
                    if (aAOCI.length === 1) {
                        aAOCI[0].bDelBtnEnabled = false;
                        oVisibilityModel.setProperty("/sAOCIDelButton", sDeleteMsg);
                    }
                    for (var i = 0; i < aAOCI.length; i++) {
                        if (aAOCI[i].Loekz !== "X") {
                            count = count + 1;
                        }
                    }
                    if (count === 1) {
                        oVisibilityModel.setProperty("/sAOCIDelButton", sDeleteMsg);
                    }
                } else {
                    oRoutingHeaderModel.setProperty("/aAOCIData", []);
                }
                if (!this.oAOCIFrag) {
                    this.oAOCIFrag = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.AOCIManagement", this);
                    this.getView().addDependent(this.oAOCIFrag);
                }
                var aAOCIDataDuplicateData = $.extend(
                    true,
                    [],
                    oRoutingHeaderModel.getProperty("/aAOCIData")
                );
                oRoutingHeaderModel.setProperty("/aAOCIDataDuplicateData", aAOCIDataDuplicateData);
                this.oAOCIFrag.open();
            },
            fnPlannerGroupLivechange: function (oEvent) {
                var aFilter,
                    sValue = oEvent.getSource().getValue();
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant") || "";
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oRoutingModel.setProperty("/aSuggestPlannerGroup", []);
                if (sValue) {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    aFilter = [
                        new sap.ui.model.Filter("Plant", FilterOperator.EQ, sPlant),
                        new Filter("Text", FilterOperator.Contains, sValue),
                    ];
                    oDataModel.read("/ET_Plnr_GrpSet", {
                        filters: aFilter,
                        success: function (oData) {
                            if (oData.results.length > 0) {
                                oRoutingModel.setProperty(
                                    "/aSuggestPlannerGroup",
                                    oData.results
                                );
                            }
                        }.bind(this),
                        error: function (error) { },
                    });
                }
                oRoutingModel.refresh();
            },
            /*Params : oEvent This method used on change of planner group*/
            fnPlannerGroupChange: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant") || "";
                oRoutingHeaderModel.setProperty("/aHeaderDetails/Plnr_Grp_Txt", "");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (sValue) {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilter = [
                        new sap.ui.model.Filter("Plant", FilterOperator.EQ, sPlant),
                        new Filter("Text", FilterOperator.EQ, sValue),
                    ];
                    oDataModel.read("/ET_Plnr_GrpSet", {
                        filters: aFilter,
                        success: function (oData) {
                            if (oData.results.length > 0) {
                                oRoutingHeaderModel.setProperty(
                                    "/aHeaderDetails/Plnr_Grp_Txt",
                                    oData.results[0].Text
                                );
                            }
                        }.bind(this),
                        error: function (error) {
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                }
            },
            /*Params : sDStype This method triggers for value help of planner group.*/
            fnValuehelpPlannerGroup: function () {
                var i18n = new sap.ui.model.resource.ResourceModel({ bundleName: "com.airbus.zcfe2meautorc.i18n.i18n" });
                if (!this._oPlannerValueHelpDialog) {
                    this._oPlannerValueHelpDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.PlannerGroupValueHelp", this);
                    this.getView().addDependent(this._oPlannerValueHelpDialog);
                    this.getView().setModel(i18n, "i18n");
                }
                this.fnGetPlannerGroupdata(); //Fetch the planner group data from Odata call
            },
            /*Params : N/A This method used to get planner group details */
            fnGetPlannerGroupdata: function () {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant") || "";
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var aFilter = [new sap.ui.model.Filter("Plant", FilterOperator.EQ, sPlant),
                new Filter("Text", FilterOperator.Contains, "")];
                oDataModel.read("/ET_Plnr_GrpSet", {
                    filters: aFilter,
                    success: function (oData) {
                        if (oData.results.length > 0) {
                            oRoutingModel.setProperty("/aPlannerGroup", oData.results);
                        } else {
                            oRoutingModel.setProperty("/aPlannerGroup", []);
                        }
                        this._oPlannerValueHelpDialog.open();
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this)
                });
            },
            /*Params : N/A This method opens value help for status */
            fnValuehelpStatus: function () {
                if (!this.oStatusDialog) {
                    this.oStatusDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.StatusValuehelp", this
                    );
                    this.getView().addDependent(this.oStatusDialog);
                    this.oStatusDialog.setModel(this.getView().getModel("i18n"), "i18n");
                }
                this.fetchStatusData();
            },
            /*Params : N/A This method used to fetch status data.*/
            fetchStatusData: function () {
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                this.getView().getModel("oRoutingHeaderModel").setProperty("/searchStatusLang", "E");
                var aFilter = [
                    new sap.ui.model.Filter("Lang", FilterOperator.EQ, "EN"),
                ];
                oDataModel.read("/ET_StatusSet", {
                    filters: aFilter,
                    success: function (oData) {
                        if (oData.results.length > 0) {
                            oRoutingModel.setProperty("/aStatus", oData.results);
                        } else {
                            oRoutingModel.setProperty("/aStatus", []);
                        }
                        this.oStatusDialog.open();
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            // For status field validation
            fnStatusCheck: function (oEvent) {
                var oStatusCheck = oEvent.getSource();
                var sValue = oEvent.getSource().getValue();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("routingheader.statusmsg");
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                oRoutingHeaderModel.setProperty("/searchStatusLang", "E");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                var aFilter = [
                    new sap.ui.model.Filter("Lang", FilterOperator.EQ, "EN"),
                ];
                oDataModel.read("/ET_StatusSet", {
                    filters: aFilter,
                    success: function (oData) {
                        for (var x = 0; x < oData.results.length; x++) {
                            if (sValue !== oData.results[x].Status) {
                                oStatusCheck.setValue("");
                                //oStatusCheck.setValueState("Error");
                                oStatusCheck.setValueStateText(sMsg);
                                oRoutingHeaderModel.setProperty("/aHeaderDetails/statusState", "Error");
                                oRoutingHeaderModel.setProperty("/aHeaderDetails/Status", "");
                                oRoutingHeaderModel.setProperty("/aHeaderDetails/TlExtid", "");
                            } else {
                                oRoutingHeaderModel.setProperty("/aHeaderDetails/Status", sValue);
                                oRoutingHeaderModel.setProperty("/aHeaderDetails/TlExtid", oData.results[x].Text);
                                //oStatusCheck.setValueState("None");
                                oRoutingHeaderModel.setProperty("/aHeaderDetails/statusState", "None");
                                break;
                            }
                        }
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            /*Description : Method to get Template status data.*/
            fnTemplateStatusChange: function () {
                var that = this;
                var oSelectedItem = this.getView().byId("idStatus").getSelectedItem();
                var sTemplateStatus = oSelectedItem.getKey();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var sStatusKey_User = oRoutingHeaderModel.getProperty("/aStatusData");
                var sStatus = oRoutingModel.getProperty("/sStatusValidation");
                var oBundle = that.geti18nModel().getResourceBundle();
                var sMsg = oBundle.getText("statusvalidation");
                if (
                    (sStatus === "ME" || sStatus === "MD") &&
                    (sStatusKey_User[3].Key_User === "X" ||
                        sStatusKey_User[2].Key_User === "X") &&
                    sTemplateStatus === "MA"
                ) {
                    MessageBox.error(sMsg);
                    oRoutingHeaderModel.setProperty("/aHeaderDetails/Status", sStatus);
                } else if (
                    sStatus === "MC" &&
                    sStatusKey_User[0].Tmpl_User === "X" &&
                    sTemplateStatus === "MA"
                ) {
                    MessageBox.error(sMsg);
                    oRoutingHeaderModel.setProperty("/aHeaderDetails/Status", sStatus);
                } else {
                    oRoutingHeaderModel.setProperty(
                        "/aHeaderDetails/Status",
                        sTemplateStatus
                    );
                }
            },
            /*This method used to fetch usage description*/
            fnChangeUsage: function (oEvent) {
                var oSelectedItem = oEvent.getSource().getSelectedItem();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                oRoutingHeaderModel.setProperty("/aHeaderDetails/Verwe_Txt", oSelectedItem.getAdditionalText());
            },
            /*Description : This method is used to set unsavedchange flag for Plan Index Change*/
            fnPlanIndexChange: function () {
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
            },
            /*This method triggerd on value hep of Debitor */
            fnValuehelpDebitor: function () {
                if (!this._oDebitorHelpDialog) {
                    this._oDebitorHelpDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.DebitorValueHelp", this
                    );
                    this.getView().addDependent(this._oDebitorHelpDialog);
                    this._oDebitorHelpDialog.setModel("i18n");
                }
                this._oDebitorHelpDialog.open();
            },
            /*Description : Method to undo Highlight and bold long text*/
            fnUndoIncTxt: function (oEvent, sAction) {
                var sTxt = tinymce.activeEditor.selection.getContent(),
                    sTxt1 = tinymce.activeEditor.selection.getContent();
                if (sAction === "sRouter") {
                    var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                    var sLongTxtdata = oRoutingHeaderModel.getProperty("/sLongText");
                    formatter.fnPlainText(sLongTxtdata);
                } else {
                    var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                    var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                    var sLongTxtdata = oOperationItemsModel.getProperty(sPath + "/Long_Text" + "/results");
                    formatter.fnPlainText(sLongTxtdata);
                }
                if (sTxt.search('<br />') >= 0) {
                    var sBrkTxt = sTxt.split('<br />');
                    var isPartial = 0;
                    for (let j = 0; j < sBrkTxt.length; j++) {
                        isPartial = this.fnDisablePartialSelect(sBrkTxt[j], sLongTxtdata);
                    }
                    if (isPartial === 1) {
                        isPartial = true;
                    }
                    else {
                        isPartial = false;
                    }
                } else {
                    var pTxt = sTxt.split(" ");
                    var isPartial = 0;
                    isPartial = this.fnDisablePartialSelect(sTxt, sLongTxtdata);
                    if (isPartial === 1) {
                        isPartial = true;
                    }
                    else {
                        isPartial = false;
                    }
                }
                if (isPartial) {
                    if (sTxt !== "") {
                        if (sTxt1.includes("<p>")) {
                            var sSelectTxt = sTxt1;
                            sSelectTxt = sSelectTxt.replaceAll("<p>", "");
                            sSelectTxt = sSelectTxt.replaceAll("</p>", "");
                            if (sSelectTxt.includes("\n")) {
                                var sSelectTxt = sSelectTxt.replaceAll("\n", "&nbsp;\n");
                                sSelectTxt = sSelectTxt + "&nbsp;";
                            } else {
                                var sSelectTxt = sSelectTxt.replaceAll("<br />", "&nbsp;<br />");
                                sSelectTxt = sSelectTxt + "&nbsp;";
                            }
                            sTxt = sSelectTxt;
                        }
                        if (sTxt.includes("\n")) {
                            var sTxt = sTxt.replaceAll("\n", "&nbsp;\n");
                            sTxt = sTxt + "&nbsp;";
                        } else if (sTxt.includes("<br />")) {
                            var sTxt = sTxt.replaceAll("<br />", "&nbsp;<br />");
                            sTxt = sTxt + "&nbsp;";
                        } else {
                            sTxt = sTxt + "&nbsp;";
                        }
                        tinymce.activeEditor.selection.setContent(sTxt);
                        sLongTxtdata = tinymce.activeEditor.getContent();
                        var arrLongText = sLongTxtdata.split("<br />");
                        if (sTxt.includes("<br />") || sTxt.includes("\n")) {
                            if (sTxt.includes("\n")) {
                                sTxt = sTxt.split("\n");
                            } else {
                                sTxt = sTxt.split("<br />");
                            }
                            for (var j = 0; j < sTxt.length; j++) {
                                var currentSTxtLine = sTxt[j];
                                arrLongText = this.fnLongTxtUndoReturn(
                                    arrLongText,
                                    currentSTxtLine,
                                    sTxt1
                                );
                            }
                        } else {
                            var currentSTxtLine = sTxt;
                            arrLongText = this.fnLongTxtUndoReturn(
                                arrLongText,
                                currentSTxtLine,
                                sTxt1
                            );
                        }
                        if (arrLongText === undefined) {
                            return;
                        }
                        arrLongText = arrLongText.join("<br />");
                        if (sAction === "sRouter") {
                            var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                            oRoutingHeaderModel.setProperty("/sLongText", arrLongText);
                        } else {
                            var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                            oOperationItemsModel.setProperty(sPath + "/Long_Text" + "/results", arrLongText);
                        }
                    } else {
                        sap.m.MessageToast.show(
                            this.getView().getModel("i18n").getResourceBundle().getText("high.EmptyCmtUnd")
                        );
                    }
                }
                else {
                    sap.m.MessageToast.show(
                        this.getView().getModel("i18n").getResourceBundle().getText("high.PartialSelect")
                    );
                }
            },
            /*Description : Method to restrict formating in LongText area if there is Partial Selection*/
            fnDisablePartialSelect: function (sText, sLongText) {
                var sTxtActual = tinymce.activeEditor.selection.getSel().toString();
                sText = sText.trim();
                sText = sText.replace('&nbsp;', '');
                var sExistingLongText = sLongText.split(/<\/pre>|\<\/p>/);
                for (var i = 0; i < sExistingLongText.length; i++) {
                    var sLine = sExistingLongText[i];
                    //include text
                    if (sLine.search('contenteditable=') >= 0) {
                        continue;
                    }
                    if (sLine === "") {
                        continue;
                    }
                    // other than include text but already exsisting text
                    else if (sLine.search('<pre') >= 0) {
                        if (sLine.search('<strong') >= 0) {
                            sLine = sLine.replaceAll('<strong style="font-weight:bold;">', '');
                            sLine = sLine.replace('</strong>', '');
                        }
                        if (sLine.search("style='background-color:#E3E3E") >= 0 || sLine.search('#e3e3e3') >= 0) {
                            sLine = sLine.replaceAll("<i style='background-color:#E3E3E3; font-style: normal; max-width: 72ch; min-width: 72ch'>", "");
                            sLine = sLine.replaceAll("</i>", '');
                            sLine = sLine.replaceAll('<em style="background-color: #e3e3e3; font-style: normal; max-width: 72ch; min-width: 72ch;">', '');
                            sLine = sLine.replaceAll('</em>', '');
                        }
                        var sExisting = sLine.split('>');
                        for (let i = 0; i < sExisting.length; i++) {
                            var sExistingData = sExisting[i];
                            if (sExistingData.search('\n') >= 0) {
                                sExistingData = sExistingData.replaceAll('\n', '');
                            }
                            if (sExistingData.search('<br /') >= 0) {
                                sExistingData = sExistingData.replaceAll('<br /', '');
                            }
                            if (sExistingData.search('&nbsp;') >= 0) {
                                sExistingData = sExistingData.replaceAll('&nbsp;', '');
                            }
                            if (sExistingData.search('<pre style=') >= 0) {
                                continue;
                            }
                            sExistingData = sExistingData.trim();
                            if (sExistingData.length === sText.length) {
                                if (sExistingData === sText || sExistingData === sTxtActual) {
                                    return 1;
                                }
                            }
                            else {
                                var newExistingData = sExistingData.replaceAll(' ', '');
                                if ((newExistingData.toLowerCase() === sText.replaceAll(' ', '').toLowerCase()) || (newExistingData.toLowerCase() === sTxtActual.replaceAll(' ', '').toLowerCase())) {
                                    return 1;
                                }
                            }
                        }
                    }
                    //newly added text
                    else if (sLine != "") {
                        if (sLine.search('<strong') >= 0) {
                            sLine = sLine.replaceAll('<strong style="font-weight:bold;">', '');
                            sLine = sLine.replace('</strong>', '');
                        }
                        if (sLine.search("style='background-color:#E3E3E3") >= 0) {
                            sLine = sLine.replaceAll("<i style='background-color:#E3E3E3; font-style: normal; max-width: 72ch; min-width: 72ch'>", "");
                            sLine = sLine.replaceAll("</i>", '');
                            sLine = sLine.replaceAll('<em style="background-color: #e3e3e3; font-style: normal; max-width: 72ch; min-width: 72ch;">', '');
                            sLine = sLine.replaceAll('</em>', '');
                        }
                        if (sLine.search() >= 0) {
                            sLine = sLine.replaceAll('&nbsp;', '');
                        }
                        var sNewLine = sLine.trim();
                        sNewLine = sLine.replaceAll('\n', '').split('</p>');
                        for (let i = 0; i < sNewLine.length; i++) {
                            var sNewLineData = sNewLine[i].replaceAll('<p>', '');
                            if (sNewLineData.length === sText.length) {
                                if (sNewLineData === sText) {
                                    return 1;
                                }
                            }
                            else {
                                var newExistingData = sNewLineData.replaceAll(' ', '');
                                if (newExistingData.toLowerCase() === sText.replaceAll(' ', '').toLowerCase()) {
                                    return 1;
                                }
                            }

                        }

                    }
                }

            },
            /*Description :  Method to undo Highlight and bold long text*/
            fnLongTxtUndoReturn: function (arrLongText, currentSTxtLine, sTxt1) {
                var fTxt = "";
                for (var i = 0; i < arrLongText.length; i++) {
                    var oEle = arrLongText[i];
                    if (oEle === "") {
                        continue;
                    }
                    if (
                        currentSTxtLine.search("strong") >= 0 ||
                        currentSTxtLine.search("#e3e3e3") >= 0 ||
                        currentSTxtLine.search("#E3E3E3") >= 0
                    ) {
                        if (oEle.includes(currentSTxtLine)) {
                            fTxt = oEle;
                            if (
                                fTxt.search("strong") >= 0 ||
                                fTxt.search("#e3e3e3") >= 0 ||
                                fTxt.search("#E3E3E3") >= 0
                            ) {
                                if (fTxt.search("strong") >= 0 && fTxt.search("&nbsp;") >= 0) {
                                    fTxt = fTxt.replace(
                                        '<strong style="font-weight: bold;">',
                                        ""
                                    );
                                    fTxt = fTxt.replace("</strong>", "");
                                    fTxt = fTxt.replace("&nbsp;", "");

                                    arrLongText[i] = fTxt;
                                } else if (
                                    (fTxt.search("#e3e3e3") >= 0 ||
                                        fTxt.search("#E3E3E3") >= 0) &&
                                    fTxt.search("&nbsp;") >= 0
                                ) {
                                    fTxt = fTxt.replace(
                                        '<em style="background-color: #e3e3e3; font-style: normal; max-width: 72ch; min-width: 72ch;">',
                                        ""
                                    );
                                    fTxt = fTxt.replace("</em>", "");
                                    fTxt = fTxt.replace("&nbsp;", "");
                                    arrLongText[i] = fTxt;
                                }
                            } else {
                                sap.m.MessageToast.show(
                                    this.geti18nModel()
                                        .getResourceBundle()
                                        .getText("high.NoHighlight")
                                );
                                return;
                            }
                        }
                    } else {
                        if (oEle.includes(currentSTxtLine)) {
                            fTxt = oEle;
                            if (
                                fTxt.search("strong") >= 0 ||
                                fTxt.search("#e3e3e3") >= 0 ||
                                fTxt.search("#E3E3E3") >= 0
                            ) {
                                if (fTxt.search("strong") >= 0 && fTxt.search("&nbsp;") >= 0) {
                                    fTxt = fTxt.replace(
                                        '<strong style="font-weight: bold;">' +
                                        currentSTxtLine +
                                        "</strong>",
                                        currentSTxtLine.replace("&nbsp;", "")
                                    );
                                    // oEle = fTxt;
                                    if (
                                        (fTxt.includes("</pre>")
                                            ? fTxt.replace("</pre>", "")
                                            : fTxt) !==
                                        sTxt1 + "&nbsp;"
                                    ) {
                                        fTxt = fTxt.replace(
                                            '<strong style="font-weight: bold;">' +
                                            currentSTxtLine +
                                            "</strong>",
                                            currentSTxtLine.replace("&nbsp;", "")
                                        );
                                    }
                                    arrLongText[i] = fTxt;
                                }
                                if (
                                    (fTxt.search("#e3e3e3") >= 0 ||
                                        fTxt.search("#E3E3E3") >= 0) &&
                                    fTxt.search("&nbsp;") >= 0
                                ) {
                                    fTxt = fTxt.replace(
                                        '<em style="background-color: #e3e3e3; font-style: normal; max-width: 72ch; min-width: 72ch;">' +
                                        currentSTxtLine +
                                        "</em>",
                                        currentSTxtLine.replace("&nbsp;", "")
                                    );
                                    // oEle = fTxt;
                                    if (fTxt !== sTxt1 + "&nbsp;") {
                                        fTxt = fTxt.replace(
                                            '<em style="background-color: #e3e3e3; font-style: normal; max-width: 72ch; min-width: 72ch;">' +
                                            currentSTxtLine +
                                            "</em>",
                                            currentSTxtLine.replace("&nbsp;", "")
                                        );
                                    }

                                    arrLongText[i] = fTxt;
                                }
                            } else {
                                sap.m.MessageToast.show(
                                    this.geti18nModel()
                                        .getResourceBundle()
                                        .getText("high.NoHighlight")
                                );
                                return;
                            }
                        }
                    }
                }
                return arrLongText;
            },
            /*Description : Method to Comment long text*/
            fnLongTxtCmnt: function (oEvent, sAction) {
                var sTxt = tinymce.activeEditor.selection.getContent();
                if (sAction === "sRouter") {
                    var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                    var sLongTxtdata = oRoutingHeaderModel.getProperty("/sLongText");
                    formatter.fnPlainText(sLongTxtdata);
                } else {
                    var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                    var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                    var sLongTxtdata = oOperationItemsModel.getProperty(sPath + "/Long_Text" + "/results");
                    formatter.fnPlainText(sLongTxtdata);
                }
                if (sTxt.search('<br />') >= 0) {
                    var sBrkTxt = sTxt.split('<br />');
                    var isPartial = 0;
                    for (let j = 0; j < sBrkTxt.length; j++) {
                        isPartial = this.fnDisablePartialSelect(sBrkTxt[j], sLongTxtdata);
                    }
                    if (isPartial === 1) {
                        isPartial = true;
                    }
                    else {
                        isPartial = false;
                    }
                } else {
                    var isPartial = 0;
                    isPartial = this.fnDisablePartialSelect(sTxt, sLongTxtdata);
                    if (isPartial === 1) {
                        isPartial = true;
                    }
                    else {
                        isPartial = false;
                    }
                }
                if (isPartial) {
                    var sLongText = "";
                    if (sTxt !== "") {
                        sTxt = sTxt + "&nbsp;";
                        tinymce.activeEditor.selection.setContent(sTxt);
                        sLongTxtdata = tinymce.activeEditor.getContent();
                        if (sAction !== "sRouter") {
                            if (oOperationItemsModel.getProperty(sPath).isNew === "X") {
                                sLongTxtdata = sLongTxtdata.replace(sTxt.trim("&nbsp;"), sTxt);
                            }
                        }
                        if (sTxt.includes("</pre>")) {
                            sap.m.MessageToast.show(
                                this.getView().getModel("i18n").getResourceBundle().getText("high.Include")
                            );
                            return;
                        }
                        if (sTxt.includes("<pre")) {
                            sap.m.MessageToast.show(
                                this.getView().getModel("i18n").getResourceBundle().getText("high.Include")
                            );
                            return;
                        }
                        if (sTxt.includes("<br />") || sTxt.includes("\n")) {
                            sap.m.MessageToast.show(
                                this.getView().getModel("i18n").getResourceBundle().getText("high.OneLine")
                            );
                            return;
                        } else {
                            if (sTxt.search("#E3E3E3") < 0 || sTxt.search("#e3e3e3") < 0) {
                                sLongText = sLongTxtdata.replace(
                                    sTxt,
                                    "<i style='background-color:#E3E3E3; font-style: normal; max-width: 72ch; min-width: 72ch'>" +
                                    sTxt.replace("&nbsp;", "") +
                                    "</i>"
                                );
                            }
                        }
                        if (sAction === "sRouter") {
                            oRoutingHeaderModel.setProperty("/sLongText", sLongText);
                        } else {
                            oOperationItemsModel.setProperty(sPath + "/Long_Text" + "/results", sLongText);
                        }
                        formatter.fnPlainText(sLongText);
                    } else {
                        sap.m.MessageToast.show(
                            this.getView().getModel("i18n").getResourceBundle().getText("high.EmptyCmt")
                        );
                    }
                }
                else {
                    sap.m.MessageToast.show(
                        this.getView().getModel("i18n").getResourceBundle().getText("high.PartialSelect")
                    );
                }

            },
            /*Description : Method to Bold long text*/
            fnLongTxtBold: function (oEvent, sAction) {
                var sTxt = tinymce.activeEditor.selection.getContent(),
                    sTxt1 = tinymce.activeEditor.selection.getContent(),
                    sPTxt = [],
                    oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                if (sAction === "sRouter") {
                    var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                    var sLongTxtdata = oRoutingHeaderModel.getProperty("/sLongText");
                    formatter.fnPlainText(sLongTxtdata);
                } else {
                    var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                    var sLongTxtdata = oOperationItemsModel.getProperty(sPath + "/Long_Text" + "/results");
                    formatter.fnPlainText(sLongTxtdata);
                }
                if (sTxt.search('<br />') >= 0) {
                    var sBrkTxt = sTxt.split('<br />');
                    var isPartial = 0;
                    for (let j = 0; j < sBrkTxt.length; j++) {
                        isPartial = this.fnDisablePartialSelect(sBrkTxt[j], sLongTxtdata);
                    }
                    if (isPartial === 1) {
                        isPartial = true;
                    }
                    else {
                        isPartial = false;
                    }
                } else {
                    var isPartial = 0;
                    isPartial = this.fnDisablePartialSelect(sTxt, sLongTxtdata);
                    if (isPartial === 1) {
                        isPartial = true;
                    }
                    else {
                        isPartial = false;
                    }
                }
                if (isPartial) {
                    var sLongText = "";
                    if (sTxt !== "") {
                        if (sTxt.includes("</pre>")) {
                            sap.m.MessageToast.show(
                                this.getView().getModel("i18n").getResourceBundle().getText("high.Include")
                            );
                            return;
                        }
                        if (sTxt1.includes("<p>")) {
                            var sSelectTxt = sTxt1;
                            sSelectTxt = sSelectTxt.replaceAll("<p>", "");
                            sSelectTxt = sSelectTxt.replaceAll("</p>", "");
                            if (sSelectTxt.includes("\n")) {
                                var sSelectTxt = sSelectTxt.replaceAll("\n", "&nbsp;\n");
                                sSelectTxt = sSelectTxt + "&nbsp;";
                            } else {
                                var sSelectTxt = sSelectTxt.replaceAll("<br />", "&nbsp;<br />");
                                sSelectTxt = sSelectTxt + "&nbsp;";
                            }
                            sPTxt = sSelectTxt.split("\n");
                        }
                        if (sTxt.includes("\n")) {
                            var sTxt = sTxt.replaceAll("\n", "&nbsp;\n");
                            sTxt = sTxt + "&nbsp;";
                        } else if (sTxt.includes("<br />")) {
                            var sTxt = sTxt.replaceAll("<br />", "&nbsp;<br />");
                            sTxt = sTxt + "&nbsp;";
                        } else {
                            sTxt = sTxt + "&nbsp;";
                        }
                        tinymce.activeEditor.selection.setContent(sTxt);
                        sLongTxtdata = tinymce.activeEditor.getContent();
                        if (sTxt.includes("<br />") || sTxt.includes("\n")) {
                            if (sTxt.includes("\n")) {
                                sTxt = sTxt.split("\n");
                            } else {
                                sTxt = sTxt.split("<br />");
                            }
                            if (sTxt1.search("<p>") < 0) {
                                for (var i = 0; i < sTxt.length; i++) {
                                    if (
                                        sTxt[i].search("#e3e3e3") >= 0 ||
                                        sTxt[i].search("#E3E3E3") >= 0
                                    ) {
                                        sap.m.MessageToast.show(
                                            this.getView().getModel("i18n").getResourceBundle().getText("high.CmtBold"));
                                    }
                                    if (sTxt[i].search("strong") < 0) {
                                        sLongTxtdata = sLongTxtdata.replace(
                                            sTxt[i],
                                            '<strong style="font-weight:bold;">' +
                                            sTxt[i].replace("&nbsp;", "") +
                                            "</strong>"
                                        );
                                    }
                                }
                            } else {
                                sLongTxtdata = sLongTxtdata.replaceAll(
                                    "\n<p>&nbsp;</p>",
                                    "&nbsp;"
                                );
                                for (var i = 0; i < sTxt.length; i++) {
                                    sLongTxtdata = sLongTxtdata.replace(
                                        sTxt[i],
                                        '<strong style="font-weight:bold;">' +
                                        sPTxt[i].replace("&nbsp;", "") +
                                        "</strong>"
                                    );
                                }
                                sLongTxtdata = sLongTxtdata.replaceAll("&nbsp;", "");
                                sLongTxtdata = sLongTxtdata.replaceAll("\n", "");
                                sLongTxtdata = sLongTxtdata.replaceAll("<strong", "<p><strong");
                                sLongTxtdata = sLongTxtdata.replaceAll("</strong>", "</p></strong>");
                            }
                            sLongText = sLongTxtdata;
                        } else {
                            sLongText = sLongTxtdata.replace(
                                sTxt,
                                '<strong style="font-weight:bold;">' +
                                sTxt.replace("&nbsp;", "") +
                                "</strong>"
                            );
                        }
                        if (sAction === "sRouter") {
                            oRoutingHeaderModel.setProperty("/sLongText", sLongText);
                        } else {
                            oOperationItemsModel.setProperty(
                                sPath + "/Long_Text" + "/results",
                                sLongText
                            );
                        }
                        formatter.fnPlainText(sLongTxtdata);
                    } else {
                        sap.m.MessageToast.show(
                            this.getView().getModel("i18n").getResourceBundle().getText("high.EmptyBold")
                        );
                    }
                }
                else {
                    sap.m.MessageToast.show(
                        this.getView().getModel("i18n").getResourceBundle().getText("high.PartialSelect")
                    );
                }

            },
            /*This method used to Open value help dialog for Include Texts*/
            fnValuehelpStandardText: function (oEvent) {
                /* code for the long text cursor issue  SKAGP1R5*/
                var oCtrl = oEvent.getSource().getParent().getParent(),
                    sId = $(tinymce.activeEditor.selection.getNode()).closest('body').data('id'),
                    bValid = true,
                    oBundle = this.getView().getModel("i18n").getResourceBundle(),
                    oRteId,
                    oChildCtrls;
                if (oCtrl.getMetadata().getName() === "sap.m.VBox") {
                    oChildCtrls = oCtrl.getItems();
                } else {
                    oChildCtrls = oCtrl.getContent();
                }
                oChildCtrls.forEach(function (oItem) {
                    if (oItem.getMetadata().getName() === "sap.ui.richtexteditor.RichTextEditor") {
                        oRteId = oItem.getId();
                    }
                });
                // check for cursor content 
                if (tinymce.activeEditor.selection.getSel().baseNode === null) {
                    bValid = false;
                    sap.m.MessageToast.show(oBundle.getText("std.plaseTheCursor"));
                } else {
                    if (!sId.includes(oRteId)) {
                        bValid = false;
                        sap.m.MessageToast.show(oBundle.getText("std.plaseTheCursor"));
                    }
                }
                if (bValid) {
                    if (!this._oStandardTextDialog) {
                        this._oStandardTextDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.StandardText", this);
                        this.getView().addDependent(this._oStandardTextDialog);
                        this._oStandardTextDialog.setModel(this.getView().getModel("i18n"), "i18n");
                    }
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    oDataModel.setUseBatch(false);
                    var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                    if (sap.ui.getCore().getConfiguration()) {
                        oRoutingHeaderModel.setProperty("/searchLang", sap.ui.getCore().getConfiguration().getLanguage().toLocaleUpperCase());
                    } else {
                        oRoutingHeaderModel.setProperty("/searchLang", "");
                    }
                    var oBinding = this._oStandardTextDialog.getContent()[0].getBinding("items");
                    var sLanguage = oRoutingHeaderModel.getProperty("/searchLang");
                    if (sLanguage === "ES") {
                        var sLang = "S";
                    } else {
                        sLang = sLanguage;
                    }
                    oBinding.filter(new Filter("Lang", FilterOperator.EQ, sLang));
                    this._oStandardTextDialog.open();
                }
            },
            /*This method used to assign correspondig operation numeber to bom items */
            onOperationsDrop: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oDraggedControl = oEvent.getParameter("draggedControl");
                var oDroppedControl = oEvent.getParameter("droppedControl");
                var oBundle = this.geti18nModel().getResourceBundle();
                var sVplnr = oDroppedControl.getBindingContext("oOperationItemsModel").getProperty("Vplnr") || "";
                if (sVplnr !== "") {
                    // Reference operations
                    var sMessage = oBundle.getText("assign.errormsg");
                    MessageBox.error(sMessage);
                } else {
                    oRoutingModel.setProperty("/oDraggedControl", oDraggedControl);
                    oRoutingModel.setProperty("/oDroppedControl", oDroppedControl);
                    var sTitle = oBundle.getText("assign.title"),
                        sMsg = oBundle.getText("assign.message"),
                        sOk = oBundle.getText("assign.ok"),
                        sCancel = oBundle.getText("assign.cancel"),
                        sAlreadyassignedmsg = oBundle.getText("assign.alreadyassigned");
                    var oBOMMainModel = this.getView().getModel("oRoutingHeaderModel");
                    var oDraggedControlRef = oRoutingModel.getProperty("/oDraggedControl");
                    var oDroppedControlRef = oRoutingModel.getProperty("/oDroppedControl");
                    var sOprNum = oDroppedControlRef.getBindingContext("oOperationItemsModel").getProperty("Vornr") || "";
                    var oBOMModel = oDraggedControlRef.getBindingContext("oRoutingHeaderModel").getModel();
                    var oBOMTable = oDraggedControlRef.getParent();
                    var aSelectedIndices = oBOMTable.getSelectedIndices() || [];
                    var aBOMData = oBOMModel.getProperty("/BOM/Items/results") || [];
                    var bAssign = true;
                    // Add index to aSelectedIndex even if no item is selected in table
                    if (aSelectedIndices.length === 0) {
                        var sRowPath = oDraggedControlRef.getBindingContext("oRoutingHeaderModel").sPath;
                        var sBomOprNumber = oBOMMainModel.getProperty(sRowPath + "/Vornr") || "";
                        if (sBomOprNumber !== "") {
                            bAssign = false;
                        }
                    }
                    aSelectedIndices.map(function (index) {
                        var sRowPath = oBOMTable.getContextByIndex(index).sPath;
                        var sBomOprNum = oBOMMainModel.getProperty(sRowPath + "/Vornr") || "";
                        if (sBomOprNum !== "") {
                            bAssign = false;
                        }
                    });
                    if (bAssign) {
                        if (aSelectedIndices.length === 0) {
                            var sRowPath = oDraggedControlRef.getBindingContext("oRoutingHeaderModel").sPath;
                            oBOMMainModel.setProperty(sRowPath + "/Vornr", sOprNum); //Assign Operaiton Number
                            oBOMMainModel.setProperty(sRowPath + "/UnRead", "Success");
                            oBOMMainModel.setProperty(sRowPath + "/delComp", true); // delete allocation icon
                            if (oBOMMainModel.getProperty(sRowPath + "/Vornr_Temp") !== sOprNum) {
                                oBOMMainModel.setProperty(sRowPath + "/Modify", "X");
                            } else {
                                oBOMMainModel.setProperty(sRowPath + "/Modify", ""); //Assign Modify Flag MJADMK7Z
                            }
                        } else {
                            aSelectedIndices.map(function (index) {
                                var sRowPath = oBOMTable.getContextByIndex(index).sPath;
                                oBOMMainModel.setProperty(sRowPath + "/Vornr", sOprNum); //Assign Operaiton Number
                                oBOMMainModel.setProperty(sRowPath + "/UnRead", "Success");
                                oBOMMainModel.setProperty(sRowPath + "/delComp", true); // delete allocation icon
                                if (oBOMMainModel.getProperty(sRowPath + "/Vornr_Temp") !== sOprNum
                                ) {
                                    oBOMMainModel.setProperty(sRowPath + "/Modify", "X");
                                } else {
                                    oBOMMainModel.setProperty(sRowPath + "/Modify", ""); //Assign Modify Flag MJADMK7Z
                                }
                            });
                        }
                        var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                        oVisibilityModel.setProperty("/bUnsavedChange", true);
                        oVisibilityModel.setProperty("/bBOMSplitBtnEnabled", false);
                        oVisibilityModel.setProperty("/bUnsavedSelectAltBom", false);
                        oBOMModel.refresh(true);
                    } else {
                        MessageBox.warning(sAlreadyassignedmsg, {
                            actions: [
                                oBundle.getText("yes"),
                                MessageBox.Action.CANCEL,
                            ],
                            onClose: function (sAction) {
                                if (sAction === oBundle.getText("yes")) {
                                    if (aSelectedIndices.length === 0) {
                                        var sRowPath = oDraggedControlRef.getBindingContext("oRoutingHeaderModel").sPath;
                                        oBOMMainModel.setProperty(sRowPath + "/Vornr", sOprNum); //Assign Operaiton Number
                                        oBOMMainModel.setProperty(sRowPath + "/UnRead", "Success");
                                        oBOMMainModel.setProperty(sRowPath + "/delComp", true); // delete allocation icon
                                        if (oBOMMainModel.getProperty(sRowPath + "/Vornr_Temp") !== sOprNum) {
                                            oBOMMainModel.setProperty(sRowPath + "/Modify", "X");
                                        } else {
                                            oBOMMainModel.setProperty(sRowPath + "/Modify", ""); //Assign Modify Flag MJADMK7Z
                                        }
                                    } else {
                                        aSelectedIndices.map(function (index) {
                                            var sRowPath = oBOMTable.getContextByIndex(index).sPath;
                                            oBOMMainModel.setProperty(sRowPath + "/Vornr", sOprNum); //Assign Operaiton Number
                                            oBOMMainModel.setProperty(sRowPath + "/UnRead", "Success");
                                            oBOMMainModel.setProperty(sRowPath + "/delComp", true); // delete allocation icon 
                                            if (oBOMMainModel.getProperty(sRowPath + "/Vornr_Temp") !== sOprNum) {
                                                oBOMMainModel.setProperty(sRowPath + "/Modify", "X");
                                            } else {
                                                oBOMMainModel.setProperty(sRowPath + "/Modify", ""); //Assign Modify Flag MJADMK7Z
                                            }
                                        });
                                    }
                                    var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                                    oVisibilityModel.setProperty("/bUnsavedChange", true);
                                    oVisibilityModel.setProperty("/bBOMSplitBtnEnabled", false);
                                    oVisibilityModel.setProperty("/bUnsavedSelectAltBom", false);
                                    oBOMModel.refresh(true);
                                }
                            }.bind(this),
                        });
                    }
                    this.getView().byId("BOMItemsId").setSelectedIndex(-1); //remove table selections
                }
            },
            /*This method opens a dialog to enter operation number.*/
            fnAddOperation: function (oEvent, sAction) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sTitle, sOprNumber, sOk;
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    aOperations = oOperationItemsModel.getProperty("/aOperationItems");
                if (sAction === "Change") {
                    sTitle = oBundle.getText("update.changeoperationtitle");
                    sOprNumber = oBundle.getText("update.changeoprnumber");
                    sOk = oBundle.getText("update.update");
                    var oRoutingModel = this.getView().getModel("oRoutingModel");
                    var sOperationPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Vornr";
                    oRoutingModel.setProperty("/sOperationPath", sOperationPath);
                } else {
                    sTitle = oBundle.getText("update.addoperationtitle");
                    sOprNumber = oBundle.getText("update.oprnumber");
                    sOk = oBundle.getText("update.ok");
                }
                var sCancel = oBundle.getText("update.cancel");
                var sErrormsg = oBundle.getText("update.entervalidoprnumber");
                this.addOperationDialog = new sap.m.Dialog({
                    title: sTitle,
                    content: new sap.m.FlexBox({
                        alignItems: "Center",
                        justifyContent: "Center",
                        items: [
                            new sap.m.Label({
                                text: sOprNumber,
                                design: "Bold",
                            }).addStyleClass("sapUiTinyMarginBegin"),
                            new sap.m.Input({
                                type: "Number",
                                maxLength: 4,
                                submit: function () {
                                    this.fnValidateDuplicateOpr(aOperations, sAction);
                                }.bind(this),
                                value: {
                                    type: "sap.ui.model.type.Integer",
                                    path: "oRoutingModel>/sOperationNum",
                                    formatOptions: {
                                        maxFractionDigits: 0,
                                    },
                                    constraints: {
                                        minimum: 1,
                                        maximum: 9999,
                                    },
                                },
                            }),
                        ],
                    }),
                    beginButton: new sap.m.Button({
                        type: "Emphasized",
                        text: sOk,
                        press: function () {
                            var sOperationNo = this.getView().getModel("oRoutingModel").getProperty("/sOperationNum");
                            if (sOperationNo !== undefined) {
                                if (sAction === "SOprno") {
                                    if (
                                        this.getView().getModel("oVisibilityModel").getProperty("/sMassUpdateUser") === "X"
                                    ) {
                                        var sDupErrormsg = oBundle.getText("massUpdate.error");
                                        var bDuplicateOpr = true;
                                        aOperations.forEach((element) => {
                                            if (parseInt(element.Vornr) === sOperationNo) {
                                                sap.m.MessageToast.show(sDupErrormsg);
                                                bDuplicateOpr = false;
                                            }
                                        });
                                        if (bDuplicateOpr) {
                                            // for s-routing operation
                                            this.fnFetchDummyWorkcenter(sOperationNo, sAction);
                                        }
                                    } else {
                                        // for s-routing operation
                                        this.fnFetchDummyWorkcenter(sOperationNo, sAction);
                                    }
                                } else {
                                    if (
                                        this.getView().getModel("oVisibilityModel").getProperty("/sMassUpdateUser") === "X"
                                    ) {
                                        var sDupErrormsg = oBundle.getText("massUpdate.error");
                                        var bDuplicateOpr = true;
                                        aOperations.forEach((element) => {
                                            if (parseInt(element.Vornr) === sOperationNo) {
                                                sap.m.MessageToast.show(sDupErrormsg);
                                                bDuplicateOpr = false;
                                            }
                                        });
                                        if (bDuplicateOpr) {
                                            this.fnUpdateOperationModel(sOperationNo, sAction);
                                        }
                                    } else {
                                        this.fnUpdateOperationModel(sOperationNo, sAction);
                                    }
                                }
                                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                                oVisibilityModel.setProperty("/bUnsavedChange", true);
                            } else {
                                sap.m.MessageToast.show(sErrormsg);
                            }
                            this.getView().getModel("oRoutingModel").setProperty("/sOperationNum", undefined);
                        }.bind(this),
                    }),
                    endButton: new sap.m.Button({
                        text: sCancel,
                        press: function (oEvt) {
                            oEvt.preventDefault();
                            this.addOperationDialog.close();
                        }.bind(this),
                    }),
                });
                //to get access to the global model
                this.getView().addDependent(this.addOperationDialog);
                this.addOperationDialog.open();
            },
            /* Method : fnValidateDuplicateOpr
            Description : This method is used to validate duplicate operation number.*/
            fnValidateDuplicateOpr: function (aOperations, sAction) {
                var oBundle = this.geti18nModel().getResourceBundle();
                var sOperationNo = this.getView().getModel("oRoutingModel").getProperty("/sOperationNum");
                if (sOperationNo !== undefined) {
                    if (sAction === "SOprno") {
                        var sDupErrormsg = oBundle.getText("massUpdate.error");
                        var bDuplicateOpr = true;
                        aOperations.forEach((element) => {
                            if (parseInt(element.Vornr) === sOperationNo) {
                                bDuplicateOpr = false;
                            }
                        });
                        if (bDuplicateOpr === false) {
                            // for s-routing operation
                            sap.m.MessageToast.show(sDupErrormsg);
                        } else {
                            this.fnFetchDummyWorkcenter(sOperationNo, sAction);
                        }
                    } else {
                        var sDupErrormsg = oBundle.getText("massUpdate.error");
                        var bDuplicateOpr = true;
                        aOperations.forEach((element) => {
                            if (parseInt(element.Vornr) === sOperationNo) {
                                bDuplicateOpr = false;
                            }
                        });
                        if (bDuplicateOpr === false) {
                            sap.m.MessageToast.show(sDupErrormsg)
                        } else {
                            this.fnUpdateOperationModel(sOperationNo, sAction);
                        }
                    }
                    var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                    oVisibilityModel.setProperty("/bUnsavedChange", true);
                } else {
                    sap.m.MessageToast.show(sErrormsg);
                }
                this.getView().getModel("oRoutingModel").setProperty("/sOperationNum", undefined);
            },
            /*Params : sOperationNo, sAction This method used to fetch dummy work center for s-routing operation*/
            fnFetchDummyWorkcenter: function (sOperationNo, sAction) {
                var sPlant = this.getView().getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails/Plant");
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var aFilter = [new sap.ui.model.Filter("Plant", FilterOperator.EQ, sPlant),];
                oDataModel.read("/ET_Default_WCSet", {
                    filters: aFilter,
                    success: function (oData) {
                        if (oData.results.length > 0) {
                            var sWorkCenter = oData.results[0].Work_Cntr;
                            this.fnUpdateOperationModel(sOperationNo, sAction, sWorkCenter);
                        }
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            /*Params : sOperationNum, sAction, sWorkCenter This method used to update operation model.*/
            fnUpdateOperationModel: function (sOperationNum, sAction, sWorkCenter) {
                // Sort Opertions
                function changePosition(a, b) {
                    if (parseInt(a.Vornr, 0) < parseInt(b.Vornr, 0)) {
                        return -1;
                    }
                    if (parseInt(a.Vornr, 0) > parseInt(b.Vornr, 0)) {
                        return 1;
                    }
                    return 0;
                }
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPlant = this.getView().getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails/Plant");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsgAddedlocally = sAction === "Change" ? oBundle.getText("update.msgupdatelocally", sOperationNum)
                    : oBundle.getText("update.msgaddedlocally", sOperationNum);
                var sMsgAlreadyexists = oBundle.getText("update.msgalreadyexists", sOperationNum);
                var sMsgAlreadyexistsDel = oBundle.getText("update.msgalreadyexistsDel", sOperationNum);
                var aOperations = [],
                    aOperations = oOperationItemsModel.getProperty("/aOperationItems");
                oprIndex = -1;
                if (aOperations.length > 0) {
                    oprIndex = aOperations.findIndex(function (oprItem) {
                        return oprItem.Vornr === sOperationNum;
                    });
                }
                if (oprIndex < 0) {
                    if (sAction === "Change") {
                        //Change Operation
                        var sOprPath = this.getView().getModel("oRoutingModel").getProperty("/sOperationPath");
                        var sChangeOpr = oOperationItemsModel.getProperty(sOprPath);
                        oprIndex = aOperations.findIndex(function (oprItem) {
                            return oprItem.Vornr === sChangeOpr;
                        });
                        // padding zeros to make 4 digit
                        sOperationNum = sOperationNum.toString().padStart(4, "0");
                        // Update Bom Assignments
                        this.fnUpdateBomAssignments(aOperations[oprIndex].Vornr, sOperationNum);
                        aOperations[oprIndex].Vornr = sOperationNum;
                    } else {
                        //Mass Update removing case
                        if (
                            this.getView().getModel("oRoutingHeaderModel").getProperty("/aTempAddedOperButton") === true
                        ) {
                            var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                            var sMassUpdateUser = oVisibilityModel.getProperty("/sMassUpdateUser");
                            // padding zeros to make 4 digit
                            sOperationNum = sOperationNum.toString().padStart(4, "0");
                            var oOperationData = {
                                Vornr: sOperationNum,
                                Werks: "",
                                Vplnr: "",
                                Loekz: false,
                                isNew: "X",
                                isUiNew: "X",
                                Local: "X",
                                TiconStatus01: "NONE",
                                TiconStatus02: "NONE",
                                TiconStatus03: "NONE",
                                TiconStatus04: "",
                                TiconStatus05: "",
                                TiconStatus06: "",
                                bOPenPRTBtnEnable: false,
                                bEnableOprFileds: false,
                                bEnableKeyUserOprShortTxtDesc: false,
                                bEnableOprTiconFileds: false,
                                bEnableOprDoc: false,
                                //"bLongText_isFormatted": true,
                                Opr_Mass: sMassUpdateUser === "X" ? "X" : "",
                                PRT: {
                                    results: [],
                                },
                                Long_Text: {
                                    results: [],
                                },
                                bEnableKeyUserPRTAdd: false,
                                bEnableKeyUserOprLongTxt: false,
                                bEnableKeyUserPRTDel: false,
                                bEnableKeyUserWorkCenter: false,
                                aTempAddedDelButton: false,
                            };
                            var aOperationData = [];
                            var aOperationData = oOperationItemsModel.getProperty("/aOperationItems") || [];
                            var aTempOper = oOperationItemsModel.getProperty("/aVornrTempAddedOper");
                            aOperationData.push(oOperationData);
                            aTempOper.push(oOperationData.Vornr);
                            var aTempAddedOper = this.getView().getModel("oOperationItemsModel").getProperty("/aTempAddedOper");
                            aTempAddedOper.push(oOperationData.isNew);
                            this.getView().getModel("oOperationItemsModel").setProperty("/aTempAddedOper", aTempAddedOper);
                            oOperationItemsModel.setProperty("/aVornrTempAddedOper", aTempOper);
                            aOperationData.sort(changePosition); //To sort the Opearations in ascending order based on Opr.No
                            oOperationItemsModel.setProperty("/aOperationItems", aOperationData);
                        } else {
                            // Add Operation
                            var aOperations = oOperationItemsModel.getProperty("/aOperationItems") || [];
                            var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                            var sMassUpdateUser = oVisibilityModel.getProperty("/sMassUpdateUser");
                            // padding zeros to make 4 digit
                            sOperationNum = sOperationNum.toString().padStart(4, "0");
                            var oOperationItem = {
                                Vornr: sOperationNum,
                                Werks: sPlant,
                                Vplnr: "",
                                Loekz: false,
                                isNew: "X",
                                isUiNew: "X",
                                Local: "X",
                                TiconStatus01: "NONE",
                                TiconStatus02: "NONE",
                                TiconStatus03: "NONE",
                                TiconStatus04: "",
                                TiconStatus05: "",
                                TiconStatus06: "",
                                bOPenPRTBtnEnable: false,
                                bEnableOprFileds: true,
                                aTempAddedDelButton: false,
                                Opr_Mass: sMassUpdateUser === "X" ? "X" : "",
                                PRT: {
                                    results: [],
                                },
                                Long_Text: {
                                    results: [],
                                },
                            };
                            if (sAction === "SOprno") {
                                oOperationItem.SLWID = "ZMEAUTO";
                                oOperationItem.USR03 = "0010";
                                oOperationItem.Arbpl = sWorkCenter;
                                oOperationItem.bEnableKeyUserWorkCenter = false;
                            }
                            aOperations.push(oOperationItem);
                            aOperations.sort(changePosition); //To sort the Opearations in ascending order based on Opr.No
                            oOperationItemsModel.setProperty("/aOperationItems", aOperations);
                        }
                    }
                } else {
                    // Checking if Deletion is already done and adding the operation again.
                    if (aOperations[oprIndex].Loekz === true) {
                        sap.m.MessageToast.show(sMsgAlreadyexistsDel);
                    } else {
                        sap.m.MessageToast.show(sMsgAlreadyexists);
                    }
                }
            },
            /*Params : This method triggers on change of operation work center*/
            fnChangeOprWorkcenter: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var oWrkSource = oEvent.getSource();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var sPlant = oOperationItemsModel.getProperty(sPath + "/Werks");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oOperationItemsModel.setProperty(sPath + "/Arbpl_Ktext", "");
                if (sValue && sPlant) {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilter = [
                        new sap.ui.model.Filter("Plant", FilterOperator.EQ, sPlant),
                        new Filter("Text", FilterOperator.Contains, sValue),
                        new Filter("Lang", FilterOperator.EQ, oRoutingHeaderModel.getProperty("/searchLangDocValueHelp")),
                        new Filter("Category", FilterOperator.EQ, oRoutingHeaderModel.getProperty("/searchWCCategory")),
                    ];
                    var oBusyIndicator = new BusyDialog();
                    oBusyIndicator.open();
                    oDataModel.read("/ET_Wokr_CntrSet", {
                        filters: aFilter,
                        success: function (oData) {
                            oBusyIndicator.close();
                            oWrkSource.setValueState("None");
                            oWrkSource.setValue(sValue);
                            if (oData.results.length > 0) {
                                oOperationItemsModel.setProperty(sPath + "/Arbpl_Ktext", oData.results[0].Text);
                                //Get the standard key value from F4 help OData service and compare it on selection change method.
                                //If it is equal to "Z000", then disable Processing times block.
                                var sStandardKey = oData.results[0].StdValKey;
                                oOperationItemsModel.setProperty(sPath + "/StdValKey", sStandardKey);
                                //Refresh the model to disable processing block fields using formatter.
                                oOperationItemsModel.refresh();
                                oRoutingHeaderModel.refresh();
                            }
                        }.bind(this),
                        error: function (error) {
                            oBusyIndicator.close();
                            oWrkSource.setValueState("Error");
                            oWrkSource.setValueStateText("");
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                } else {
                    oWrkSource.setValueState("None");
                }
            },
            /*This method used to open dialog for workcenter*/
            fnValuehelpWrkCntr: function (oEvent) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("wrkcntrf4.mandmessage");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPathWrkCntr = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Arbpl";
                var sPathPlant = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Werks";
                var sPathWrkCntrDesc = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Arbpl_Ktext";
                //Setting Opertaion Items path for later use. Using it for blocking Processing block from edit.
                var sOprPathWorkCenter = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var sPlant = oOperationItemsModel.getProperty(sPathPlant) || "";
                if (!this._oWrkCntrValueHelpDialog) {
                    this._oWrkCntrValueHelpDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.WorkCenterF4", this
                    );
                    this.getView().addDependent(this._oWrkCntrValueHelpDialog);
                    this._oWrkCntrValueHelpDialog.setModel("i18n");
                }
                if (sap.ui.getCore().getConfiguration()) {
                    oRoutingHeaderModel.setProperty("/searchLangDocValueHelp", sap.ui.getCore().getConfiguration().getLanguage().toLocaleUpperCase());
                } else {
                    oRoutingHeaderModel.setProperty("/searchLangDocValueHelp", "");
                }
                // Set default selectedKey to Category combobox in work center dialog
                oRoutingHeaderModel.setProperty("/searchWCCategory", " ");
                var sLanguage = oRoutingHeaderModel.getProperty("/searchLangDocValueHelp");
                if (sLanguage === "ES") {
                    var sLang = "S";
                } else {
                    sLang = sLanguage;
                }
                if (sPlant) {
                    oOperationItemsModel.setProperty("/SelectedWorkcenterPath", sPathWrkCntr);
                    oOperationItemsModel.setProperty("/SelectedWorkcenterDescPath", sPathWrkCntrDesc);
                    oOperationItemsModel.setProperty("/sPathPlant", sPathPlant);
                    //Setting Opertaion Items path for later use. Using it for blocking Processing block from edit.
                    oOperationItemsModel.setProperty("/sOprPathWorkCenter", sOprPathWorkCenter);
                    var oBinding = this._oWrkCntrValueHelpDialog.getContent()[0].getBinding("items");
                    var aFilter = [
                        new sap.ui.model.Filter("Plant", FilterOperator.EQ, sPlant),
                        new Filter("Text", FilterOperator.Contains, ""),
                        new Filter("Lang", FilterOperator.EQ, sLang),
                        new Filter("Category", FilterOperator.EQ, " "),
                    ];
                    oBinding.filter(aFilter);
                    this._oWrkCntrValueHelpDialog.open();
                } else {
                    MessageBox.error(sMsg);
                }
            },
            /*This method used to provide suggesttion for Work center*/
            fnOperationWorkCenterLivechange: function (oEvent) {
                var aFilter,
                    sValue = oEvent.getSource().getValue(),
                    sPlant = oEvent.getSource().getBindingContext("oOperationItemsModel").getObject().Werks,
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (sPlant) {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    aFilter = [
                        new sap.ui.model.Filter("Plant", FilterOperator.EQ, sPlant),
                        new Filter("Text", FilterOperator.Contains, sValue),
                        new Filter("Lang", FilterOperator.EQ, oRoutingHeaderModel.getProperty("/searchLangDocValueHelp")),
                        new Filter("Category", FilterOperator.EQ, oRoutingHeaderModel.getProperty("/searchWCCategory")),
                    ];
                    oOperationItemsModel.setProperty(sCurrentPath + "/aSuggestOperationWorkCenter", []);
                    oDataModel.read("/ET_Wokr_CntrSet", {
                        filters: aFilter,
                        success: function (oData) {
                            if (oData.results.length > 0) {
                                oOperationItemsModel.setProperty(sCurrentPath + "/aSuggestOperationWorkCenter", oData.results);
                                oOperationItemsModel.refresh();
                            }
                        }.bind(this),
                        error: function (error) { },
                    });
                }
            },
            /*To open Plant value help for selection*/
            fnValuehelpPlant: function (oEvent) {
                var oView = this.getView();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var sPathPlant = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Werks";
                if (!this._oPlantHelpDialog) {
                    this._oPlantHelpDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.PlantValueHelp", this
                    );
                    this.getView().addDependent(this._oPlantHelpDialog);
                    this._oPlantHelpDialog.setModel(oRoutingModel, "oRoutingModel");
                    this._oPlantHelpDialog.setModel("i18n");
                }
                var oBinding = this._oPlantHelpDialog.getBinding("items");
                oBinding.filter([]);
                oOperationItemsModel.setProperty("/sPathPlant", sPathPlant);
                oOperationItemsModel.setProperty("/sPlantSoruce", oEvent.getSource());
                this._oPlantHelpDialog.open();
            },
            /*This method triggered on change of plant in operation header*/
            fnChangeOprPlant: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var oPlantSource = oEvent.getSource();
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                oOperationItemsModel.setProperty(sPath + "/Arbpl", "");
                oOperationItemsModel.setProperty(sPath + "/Arbpl_Ktext", "");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (sValue) {
                    var aFilter = [
                        new sap.ui.model.Filter("Name", FilterOperator.EQ, sValue),
                    ];
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    oDataModel.read("/ET_PlantSet", {
                        filters: aFilter,
                        success: function (oData) {
                            oPlantSource.setValueState("None");
                            if (this.fnSearchStdKeyList(sValue)) {
                                oOperationItemsModel.setProperty(sPath + "/bStdKeyReq", true);
                            } else {
                                oOperationItemsModel.setProperty(sPath + "/bStdKeyReq", false);
                            }
                        }.bind(this),
                        error: function (error) {
                            oPlantSource.setValueState("Error");
                            oPlantSource.setValueStateText(" ");
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                } else {
                    oPlantSource.setValueState("None");
                }
            },
            /*This method used to provide suggesttion for operation plant*/
            fnOperationPlantLivechange: function (oEvent) {
                var aFilter,
                    sValue = oEvent.getSource().getValue(),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                oOperationItemsModel.setProperty(sCurrentPath + "/aSuggestOperationPlants", []);
                aFilter = [
                    new sap.ui.model.Filter("Plant", FilterOperator.Contains, sValue),
                ];
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oDataModel.read("/ET_PlantSet", {
                    filters: aFilter,
                    success: function (oData) {
                        if (oData.results.length > 0) {
                            oOperationItemsModel.setProperty(sCurrentPath + "/aSuggestOperationPlants", oData.results);
                            oOperationItemsModel.refresh();
                        }
                    }.bind(this),
                    error: function (error) { },
                });
            },
            //Changing of decimal notaion NGID: SP001581
            fnValidateFloatInput: function (oEvent) {
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oBinding = oEvent.getSource().getBinding("value");
                // IF else loop has been used as first set of values are used in routing screen for setup and labour time and else set is used for value in questions fragment
                var sOprPath;
                var sPropertyPath;
                if (oBinding.getContext()) {
                    sOprPath = oBinding.getContext().getPath();
                    sPropertyPath = oBinding.getPath();
                } else {
                    sOprPath = oBinding.getBindings()[0].getContext().getPath();
                    sPropertyPath = oBinding.getBindings()[0].getPath();
                }
                //End
                var sPath = sOprPath + "/" + sPropertyPath;
                var oValue = oEvent.getSource().getValue();
                var oFormat = this.getOwnerComponent().getModel("oOperationItemsModel").getProperty("/DCPFM");
                var oValue1 = "";
                if (sPropertyPath === "Anzma") {
                    oValue1 = com.airbus.zcfe2meautorc.model.formatter.getParsedEmpNumeric(oValue, oFormat);
                } else if (sPropertyPath === "VALUE") {
                    oValue1 = com.airbus.zcfe2meautorc.model.formatter.fnFormatFloatValue(oValue);
                } else {
                    oValue1 = com.airbus.zcfe2meautorc.model.formatter.getParsedNumeric(oValue, oFormat);
                }
                if (oValue1 !== "" && Number(oValue1) !== 0) {
                    try {
                        if (oValue1) {
                            oOperationItemsModel.setProperty(sPath + "_Vstate", "None");
                            //uncommented below line as a part of Ticon reversal Date:19th APril,2022
                            oOperationItemsModel.setProperty(sPath + "_bChangedFlag", "true");
                            if (oEvent.getId() === "change") {
                                oOperationItemsModel.setProperty(sPath, oValue1);
                            }
                        } else {
                            oOperationItemsModel.setProperty(sPath + "_Vstate", "Error");
                        }
                    } catch (ex) {
                        oOperationItemsModel.setProperty(sPath + "_Vstate", "Error");
                    }
                } else {
                    oOperationItemsModel.setProperty(sPath + "_Vstate", "None");
                    //Uncommented below line as a part of Ticon reversal Date:19th APril,2022
                    oOperationItemsModel.setProperty(sPath + "_bChangedFlag", "true");
                    if (oEvent.getId() === "change") {
                        oOperationItemsModel.setProperty(sPath, oValue1);
                    }
                }
                this.getModel("oOperationItemsModel").setProperty(sPath, oValue1);
            },
            /*This method opens value help for UOM*/
            fnValuehelpUOM: function (oEvent, sUOMtype) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                oRoutingModel.setProperty("/sUOMtype", sUOMtype);
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                this.getView().getModel("oOperationItemsModel").setProperty("/SelectedUOMPath", sPath);
                if (!this.oUOMDialog) {
                    this.oUOMDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.UOMValuehelp", this
                    );
                    this.getView().addDependent(this.oUOMDialog);
                    this.oUOMDialog.setModel("i18n");
                }
                var oBinding = this.oUOMDialog.getBinding("items");
                oBinding.filter([]);
                this.oUOMDialog.open();
            },
            /*Params : oEvent, sFuncn, sAction, sType This method used to check the existance of ticon*/
            fnTiconExistence: function (ref, oEvent, sFuncn, sAction, sType) {
                var that = this;
                var oVisibilityModel = that.getView().getModel("oVisibilityModel");
                var oRoutingModel = that.getView().getModel("oRoutingModel");
                var oRoutingHeaderModel = that.getView().getModel("oRoutingHeaderModel");
                var oTiconModel = that.getOwnerComponent().getModel("oTiconModel");
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var sOprPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var sKeyUser;
                var aFilters = [];
                var oBusyIndicator = new sap.m.BusyDialog();
                var sSPlnnr = aOperationItems.getProperty(sPath + "/S_Plnnr");
                if (sSPlnnr !== "") {
                    var sMsgNoDTimportOpr = this.getView().getModel("i18n").getResourceBundle().getText("update.MsgNoDTimportOpr");
                    sap.m.MessageToast.show(sMsgNoDTimportOpr, {
                        duration: 7000,
                        width: "68em"
                    })
                };
                oBusyIndicator.open();
                var sKeyUserRadioBtnSelection = oRoutingModel.getProperty("/sRoutingIndex");
                var sEndUserRadioBtnSelection = oRoutingModel.getProperty("/sCreateChangeIndex");
                if ((oVisibilityModel.getProperty("/bTiconJobStatus") && (sKeyUserRadioBtnSelection === 1 || sKeyUserRadioBtnSelection === 2)) || ((
                    oVisibilityModel.getProperty("/bTiconJobStatus") && sEndUserRadioBtnSelection === 0))) {
                    // The below method is to overcome the time of background job time. Open the popup with Group & counter of first screen.
                    oOperationItemsModel.setProperty("/sTiconOprPath", sOprPath);
                    oOperationItemsModel.setProperty("/sTiconType", sType);
                    aFilters = [
                        new sap.ui.model.Filter("Plnkn", sap.ui.model.FilterOperator.EQ, oOperationItemsModel.getProperty(sOprPath + "/Plnkn")),
                        new sap.ui.model.Filter("Zaehl", sap.ui.model.FilterOperator.EQ, oOperationItemsModel.getProperty(sOprPath + "/Zaehl")),
                        new sap.ui.model.Filter("Ticon_type", sap.ui.model.FilterOperator.EQ, sType), //exec_setup, execute Setup
                        new sap.ui.model.Filter("Vornr", sap.ui.model.FilterOperator.EQ, oOperationItemsModel.getProperty(sOprPath + "/Vornr"))
                    ];
                    // Pass Routing N / S based on key user / end user
                    sKeyUser = oRoutingModel.getProperty("/keyUser");
                    // Getting the Task type from first screen
                    if (sKeyUser === "X") {
                        var sTaskTypeKeyUser = "";
                        if (sKeyUserRadioBtnSelection === 1) {
                            sTaskTypeKeyUser = "N";
                        } else if (sKeyUserRadioBtnSelection === 2) {
                            sTaskTypeKeyUser = "S";
                        }
                        // In case of Key user - Copy from Routing / Copy from Template
                        var sGroupKeyUser = oRoutingModel.getProperty("/selectedGroup");
                        var sGroupCounterKeyUser = oRoutingModel.getProperty("/selectedGroupCounter");
                        aFilters.push(new sap.ui.model.Filter("Plnty", sap.ui.model.FilterOperator.EQ, sTaskTypeKeyUser));
                        aFilters.push(new sap.ui.model.Filter("Plnnr", sap.ui.model.FilterOperator.EQ, sGroupKeyUser));
                        aFilters.push(new sap.ui.model.Filter("Plnal", sap.ui.model.FilterOperator.EQ, sGroupCounterKeyUser));
                    } else {
                        var sTaskTypeEndUser = "";
                        if (sEndUserRadioBtnSelection === 0) {
                            sTaskTypeEndUser = "S";
                        }
                        // In case of End User
                        var sGroupEndUser = oRoutingModel.getProperty("/TemplateGroup");
                        var sGroupCounterEndUser = oRoutingModel.getProperty("/TemplateGroupCounter");
                        aFilters.push(new sap.ui.model.Filter("Plnty", sap.ui.model.FilterOperator.EQ, sTaskTypeEndUser));
                        aFilters.push(new sap.ui.model.Filter("Plnnr", sap.ui.model.FilterOperator.EQ, sGroupEndUser));
                        aFilters.push(new sap.ui.model.Filter("Plnal", sap.ui.model.FilterOperator.EQ, sGroupCounterEndUser));
                    }
                    // End
                    oTiconModel.read("/ET_Ticon_CheckSet", {
                        filters: aFilters,
                        async: true,
                        success: function (oData) {
                            oBusyIndicator.close();
                            if (sFuncn === "GEN") {
                                this.fnGenerateTiconTimes(that, oEvent, sAction);
                            } else if (sFuncn === "RELUNDO") {
                                this.fnRelUndoTiconCalc(that, oEvent, sAction, sType);
                            } else if (sFuncn === "QUEST") {
                                this.fnTiconQuestions(that, sType);
                            }
                        }.bind(this),
                        error: function (error) {
                            oBusyIndicator.close();
                            // Custom logic to open Ticon pop up when there is an error from backend.
                            var msgText;
                            if (error.statusCode === 500) {
                                msgText = error.message;
                            } else {
                                msgText = (JSON.parse(error.responseText)).error.message.value;
                            }
                            if (msgText === "TICON doesn't exist or may be job is running in the Background to copy the TICON") {
                                if (sFuncn === "GEN") {
                                    this.fnGenerateTiconTimes(that, oEvent, sAction);
                                } else if (sFuncn === "RELUNDO") {
                                    this.fnRelUndoTiconCalc(that, oEvent, sAction, sType);
                                } else if (sFuncn === "QUEST") {
                                    this.fnTiconQuestions(that, sType);
                                }
                            } else {
                                sap.m.MessageBox.show(msgText, {
                                    icon: sap.m.MessageBox.Icon.ERROR,
                                    title: "Error",
                                    actions: [sap.m.MessageBox.Action.OK],
                                    styleClass: "sapUiSizeCompact"
                                });
                            }
                            //End
                        }.bind(this)
                    });
                } else {
                    oOperationItemsModel.setProperty("/sTiconOprPath", sOprPath);
                    oOperationItemsModel.setProperty("/sTiconType", sType);
                    aFilters = [
                        new sap.ui.model.Filter("Plnnr", sap.ui.model.FilterOperator.EQ, oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No")),
                        new sap.ui.model.Filter("Plnal", sap.ui.model.FilterOperator.EQ, oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr")),
                        new sap.ui.model.Filter("Plnkn", sap.ui.model.FilterOperator.EQ, oOperationItemsModel.getProperty(sOprPath + "/Plnkn")),
                        new sap.ui.model.Filter("Zaehl", sap.ui.model.FilterOperator.EQ, oOperationItemsModel.getProperty(sOprPath + "/Zaehl")),
                        new sap.ui.model.Filter("Ticon_type", sap.ui.model.FilterOperator.EQ, sType), //exec_setup, execute Setup
                        new sap.ui.model.Filter("Vornr", sap.ui.model.FilterOperator.EQ, oOperationItemsModel.getProperty(sOprPath + "/Vornr"))
                    ];
                    // Pass Routing N / S based on key user / end user
                    sKeyUser = that.getView().getModel("oRoutingModel").getProperty("/keyUser");
                    if (sKeyUser === "X") {
                        aFilters.push(new sap.ui.model.Filter("Plnty", sap.ui.model.FilterOperator.EQ, "S"));
                    } else {
                        aFilters.push(new sap.ui.model.Filter("Plnty", sap.ui.model.FilterOperator.EQ, "N"));
                    }
                    // End
                    oTiconModel.read("/ET_Ticon_CheckSet", {
                        filters: aFilters,
                        async: true,
                        success: function (oData) {
                            oBusyIndicator.close();
                            if (sFuncn === "GEN") {
                                this.fnGenerateTiconTimes(that, oEvent, sAction);
                            } else if (sFuncn === "RELUNDO") {
                                this.fnRelUndoTiconCalc(that, oEvent, sAction, sType);
                            } else if (sFuncn === "QUEST") {
                                this.fnTiconQuestions(that, sType);
                            }
                        }.bind(this),
                        error: function (error) {
                            oBusyIndicator.close();
                            that.fnCheckError(error);
                        }.bind(this)
                    });
                }
            },
            /*This method used to generate ticon times*/
            fnGenerateTiconTimes: function (ref, oEvent, sAction, sType) {
                var that = this;
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                //The below block is to check the Background job status.
                var oVisibilityModel = that.getView().getModel("oVisibilityModel");
                var oRoutingModel = that.getView().getModel("oRoutingModel");
                if (oVisibilityModel.getProperty("/bTiconJobStatus")) {
                    sap.m.MessageBox.warning(oBundle.getText("update.jobrunning"));
                    return;
                } else {
                    var oTiconPayload = {};
                    var oTiconModel = that.getOwnerComponent().getModel("oTiconModel");
                    var oRoutingHeaderModel = that.getView().getModel("oRoutingHeaderModel");
                    var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                    var sType = oOperationItemsModel.getProperty("/sTiconType");
                    var sOprPath;
                    var bSucessState = true;
                    var sPlnty = "";
                    // Logic to pass Task type based on key user / end user
                    var sKeyUser = oRoutingModel.getProperty("/keyUser");
                    if (sKeyUser === "X") {
                        sPlnty = "S";
                    } else {
                        sPlnty = "N";
                    }
                    // End
                    var oTiconHdrInfo = {
                        "Plnty": sPlnty,
                        "Plnnr": oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No"),
                        "Plnal": oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr"),
                        "Ticon_type": sType,
                        "Action": sAction,
                        // Add Material & Plant in OData call
                        "Matnr": oRoutingHeaderModel.getProperty("/aHeaderDetails/Material"),
                        "Werks": oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant")
                        // End
                    };
                    // while calling from ticonexistence funtion oEvent.getSource() will be null
                    if (sAction === "D") {
                        var Ticon_status;
                        if (oEvent.getSource() !== null) {
                            sOprPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                        } else {
                            sOprPath = oOperationItemsModel.getProperty("/sTiconOprPath");
                        }
                        oTiconHdrInfo.Ticon_Variables = [];
                    } else {
                        sOprPath = oOperationItemsModel.getProperty("/sTiconOprPath");
                    }
                    if (sType === "1") {
                        Ticon_status = oOperationItemsModel.getProperty(sOprPath + "/Ticon_status_1");
                    } else if (sType === "2") {
                        Ticon_status = oOperationItemsModel.getProperty(sOprPath + "/Ticon_status_2");
                    } else {
                        Ticon_status = oOperationItemsModel.getProperty(sOprPath + "/Ticon_status_3");
                    }
                    //If sAction delete, setting TiconStatus as NONE
                    if (sAction === "D") {
                        if (sType === "1") {
                            oOperationItemsModel.setProperty(sOprPath + "/TiconStatus01", "NONE");
                        } else if (sType === "2") {
                            oOperationItemsModel.setProperty(sOprPath + "/TiconStatus02", "NONE");
                        } else {
                            oOperationItemsModel.setProperty(sOprPath + "/TiconStatus03", "NONE");
                        }
                    }
                    if (sAction === "D" && Ticon_status === "REL") {
                        sap.m.MessageBox.warning(oBundle.getText("ticon.ticonrelstat"));
                        return;
                    }
                    oTiconHdrInfo.Plnfl = oOperationItemsModel.getProperty(sOprPath + "/Plnfl");
                    oTiconHdrInfo.Aennr = oOperationItemsModel.getProperty(sOprPath + "/Aennr");
                    oTiconHdrInfo.Plnkn = oOperationItemsModel.getProperty(sOprPath + "/Plnkn");
                    oTiconHdrInfo.Zaehl = oOperationItemsModel.getProperty(sOprPath + "/Zaehl");
                    oTiconHdrInfo.Vornr = oOperationItemsModel.getProperty(sOprPath + "/Vornr");
                    oTiconPayload = oTiconHdrInfo; //Passing Header
                    if (sAction !== "D") { //Not rquired for Delete Ticon
                        var aTiconVariables = oOperationItemsModel.getProperty("/aTicon_Variables");
                        // Defining temp array to push only changed GSW's to backend.
                        //unCommented below line as a part of Ticon reversal Date:19th APril,2022
                        var aTempTiconArray = [];
                        var aNotChangedTempTiconArray = []; // - Variable Generator sending not change info
                        // Removing valuestate fields
                        aTiconVariables.map(function (oTicon) {
                            var bSatiesfy = true; // - Variable Generator sending not change info
                            //parsing to string
                            oTicon.VALUE = oTicon.VALUE + "";
                            oTicon.COMNT = oTicon.COMNT + "";
                            oTicon.VALUE = oTicon.VALUE + "";
                            if (oTicon.VALUE_Vstate === "Error") {
                                bSucessState = false;
                            }
                            delete oTicon.VALUE_Vstate; //parent (Note)
                            delete oTicon.COMNT_Vstate;
                            // Push root node to temp array if some value is changed.
                            if (oTicon.VALUE_bChangedFlag === "true" || oTicon.COMNT_bChangedFlag === "true") {
                                aTempTiconArray.push(oTicon);
                                delete oTicon.VALUE_bChangedFlag;
                                delete oTicon.COMNT_bChangedFlag;
                                bSatiesfy = false;
                            } else { // - Variable Generator sending not change info
                                if (oTicon.FACTOR !== "" || oTicon.INPUT_DRIVER !== "" || oTicon.REUSE !== "") {
                                    aNotChangedTempTiconArray.push(oTicon);
                                    delete oTicon.VALUE_bChangedFlag;
                                    delete oTicon.COMNT_bChangedFlag;
                                }
                            }
                            oTicon.Ticon_Varia_Inh.map(function (oTiconVar) {
                                //parsing to string
                                oTiconVar.VALUE = oTiconVar.VALUE + "";
                                oTiconVar.COMNT = oTiconVar.COMNT + "";
                                if (oTiconVar.VALUE_Vstate === "Error") {
                                    bSucessState = false;
                                }
                                delete oTiconVar.VALUE_Vstate; //child
                                delete oTiconVar.COMNT_Vstate;
                                // Push root node to temp array if some value is changed.
                                if (oTiconVar.VALUE_bChangedFlag === "true" || oTiconVar.COMNT_bChangedFlag === "true" || oTiconVar.bSelectChangedFlag ===
                                    "true") {
                                    if (aTempTiconArray.length === 0) {
                                        aTempTiconArray.push(oTicon);
                                    } else {
                                        aTempTiconArray.filter(function (y) {
                                            if (oTicon.VARIA_CODE !== y.VARIA_CODE) {
                                                aTempTiconArray.push(oTicon);
                                            }
                                        });
                                    }
                                    delete oTiconVar.VALUE_bChangedFlag;
                                    delete oTiconVar.COMNT_bChangedFlag;
                                    delete oTiconVar.bSelectChangedFlag;
                                    //remove the Variable data if the child record is modified
                                    bSatiesfy = false;
                                    for (var k = 0; k < aNotChangedTempTiconArray.length; k++) {
                                        if (aNotChangedTempTiconArray[k].VARIA_CODE === oTicon.VARIA_CODE) {
                                            aNotChangedTempTiconArray.pop(oTicon);
                                        }
                                    }
                                } else { // - Variable Generator sending not change info
                                    if (oTiconVar.FACTOR !== "" && bSatiesfy === true || oTiconVar.INPUT_DRIVER !== "" && bSatiesfy === true ||
                                        oTiconVar.REUSE !== "" && bSatiesfy === true) {
                                        if (aNotChangedTempTiconArray.length === 0) {
                                            aNotChangedTempTiconArray.push(oTicon);
                                        } else {
                                            for (var j = 0; j < aNotChangedTempTiconArray.length; j++) {
                                                if (aNotChangedTempTiconArray[j].VARIA_CODE !== oTicon.VARIA_CODE) {
                                                    aNotChangedTempTiconArray.push(oTicon);
                                                }
                                            }
                                        }
                                        delete oTiconVar.VALUE_bChangedFlag;
                                        delete oTiconVar.COMNT_bChangedFlag;
                                        delete oTiconVar.bSelectChangedFlag;
                                    }
                                }
                                // End
                            });
                        });
                        // - Variable Generator sending not change info
                        if (aTempTiconArray.length > 0 && aNotChangedTempTiconArray.length > 0) {
                            for (var n = 0; n < aNotChangedTempTiconArray.length; n++) {
                                aTempTiconArray.push(aNotChangedTempTiconArray[n]);
                            }
                        }
                        //oTiconPayload.Ticon_Variables = aTiconVariables;
                        // Removing duplicate objects.
                        var aResultArray = [];
                        aTempTiconArray.forEach(function (e) {
                            if (!this[e.VARIA_CODE]) {
                                this[e.VARIA_CODE] = e;
                                aResultArray.push(this[e.VARIA_CODE]);
                            }
                        }, {});
                        // End
                        oTiconPayload.Ticon_Variables = aResultArray;
                    }
                    if (bSucessState) {
                        var oBusyIndicator1 = new sap.m.BusyDialog();
                        /*close the fragment let the oData call run in background*/
                        if (this.bGenerateAndCloseTicon && sAction === "R") {
                            oEvent.getSource().getParent().getParent().getParent().close();
                            oOperationItemsModel.setProperty(oOperationItemsModel.getProperty("/sTiconOprPath") + "/bTiconCalInPrg", true);
                        } else {
                            oBusyIndicator1.open();
                        }
                        oTiconModel.create("/ET_Ticon_HdrSet", oTiconPayload, {
                            success: function (oData) {
                                oBusyIndicator1.close();
                                if (oData) {
                                    oOperationItemsModel.setProperty("/Setup", oData.Setup);
                                    oOperationItemsModel.setProperty("/Labor", oData.Labor);
                                    oOperationItemsModel.refresh(true);
                                }
                                if (sAction === "D") {
                                    sap.m.MessageToast.show(oBundle.getText("ticon.ticondelmsg", oOperationItemsModel.getProperty(sOprPath + "/Vornr")));
                                } else if (sAction === "R") {
                                    sap.m.MessageToast.show(oBundle.getText("ticon.ticonregenmsg"));
                                    if (this.bGenerateAndCloseTicon === false) {
                                        this.fnFetchTiconVariables(that, sType);
                                    }
                                    /*close the fragment let the oData call run in background*/
                                    if (this.bGenerateAndCloseTicon) {
                                        this.bGenerateAndCloseTicon = false;
                                        var aTiconArray = oVisibilityModel.getProperty("/bTiconArray");
                                        //BusyDialog Close
                                        aTiconArray.forEach(element => {
                                            if (oOperationItemsModel.getProperty(element + "/bTiconCalInPrg") === true) {
                                                oOperationItemsModel.setProperty(element + "/bTiconCalInPrg", false);
                                            }
                                        });
                                    }
                                } else {
                                    sap.m.MessageToast.show(oBundle.getText("ticon.ticonsrefreshmsg"));
                                }
                            }.bind(this),
                            error: function (error) {
                                oBusyIndicator1.close();
                                /*close the fragment let the oData call run in background*/
                                if (this.bGenerateAndCloseTicon) {
                                    var aTiconArray = oVisibilityModel.getProperty("/bTiconArray");
                                    //BusyDialog Close
                                    aTiconArray.forEach(element => {
                                        if (oOperationItemsModel.getProperty(element + "/bTiconCalInPrg") === true) {
                                            oOperationItemsModel.setProperty(element + "/bTiconCalInPrg", false);
                                        }
                                    });
                                }
                                that.fnCheckError(error);
                            }.bind(this)
                        });
                    } else {
                        sap.m.MessageBox.error(oBundle.getText("ticon.errormessage"));
                    }
                }
            },
            /*This method triggered to undo released  ticon calculation*/
            fnRelUndoTiconCalc: function (ref, oEvent, sTiconEvt, sType) {
                var that = this;
                var oVisibilityModel = that.getView().getModel("oVisibilityModel");
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                if (oVisibilityModel.getProperty("/bTiconJobStatus")) {
                    sap.m.MessageBox.warning(oBundle.getText("update.jobrunning"));
                    return;
                }
                var oTiconModel = that.getOwnerComponent().getModel("oTiconModel");
                var oRoutingHeaderModel = that.getView().getModel("oRoutingHeaderModel");
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                // while calling from ticonexistence funtion oEvent.getSource() will be null
                if (oEvent.getSource() !== null) {
                    var sOprPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                } else {
                    sOprPath = oOperationItemsModel.getProperty("/sTiconOprPath");
                }
                var aFilters = [new sap.ui.model.Filter("Plnty", sap.ui.model.FilterOperator.EQ, oOperationItemsModel.getProperty(sOprPath + "/Plnty")),
                new sap.ui.model.Filter("Plnnr", sap.ui.model.FilterOperator.EQ, oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No")),
                new sap.ui.model.Filter("Plnal", sap.ui.model.FilterOperator.EQ, oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr")),
                new sap.ui.model.Filter("Plnkn", sap.ui.model.FilterOperator.EQ, oOperationItemsModel.getProperty(sOprPath + "/Plnkn")),
                new sap.ui.model.Filter("Zaehl", sap.ui.model.FilterOperator.EQ, oOperationItemsModel.getProperty(sOprPath + "/Zaehl")),
                new sap.ui.model.Filter("Ticon_type", sap.ui.model.FilterOperator.EQ, sType),
                new sap.ui.model.Filter("Vornr", sap.ui.model.FilterOperator.EQ, oOperationItemsModel.getProperty(sOprPath + "/Vornr"))
                ];
                var oBusyIndicator = new sap.m.BusyDialog();
                oBusyIndicator.open();
                var sTiconEvntSet = sTiconEvt === "TICONREL" ? "/ET_Ticon_ReleaseSet" : "/ET_Ticon_UnReleaseSet"; //Decide operation
                oTiconModel.read(sTiconEvntSet, {
                    filters: aFilters,
                    async: true,
                    success: function (oData) {
                        oBusyIndicator.close();
                        if (oData.results.length > 0) {
                            oOperationItemsModel.setProperty(sOprPath + "/Vgw01", oData.results[0].Setup);
                            oOperationItemsModel.setProperty(sOprPath + "/Vge01", oData.results[0].Setup_unit);
                            oOperationItemsModel.setProperty(sOprPath + "/Vgw02", oData.results[0].Labor);
                            oOperationItemsModel.setProperty(sOprPath + "/Vge02", oData.results[0].Labor_unit);
                            oOperationItemsModel.setProperty(sOprPath + "/Calc_type", oData.results[0].Calc_type);
                            if (sTiconEvt === "TICONREL") {
                                if (sType === "1") {
                                    oOperationItemsModel.setProperty(sOprPath + "/Ticon_status_1", "REL"); //Released
                                    oOperationItemsModel.setProperty(sOprPath + "/TiconStatus01", "RELEA");
                                } else if (sType === "2") {
                                    oOperationItemsModel.setProperty(sOprPath + "/Ticon_status_2", "REL"); //Released
                                    oOperationItemsModel.setProperty(sOprPath + "/TiconStatus02", "RELEA");
                                } else {
                                    oOperationItemsModel.setProperty(sOprPath + "/Ticon_status_3", "REL"); //Released
                                    oOperationItemsModel.setProperty(sOprPath + "/TiconStatus03", "RELEA");
                                }
                                sap.m.MessageToast.show(oBundle.getText("ticon.releasemsg", oOperationItemsModel.getProperty(sOprPath + "/Vornr")));
                            } else {
                                if (sType === "1") {
                                    oOperationItemsModel.setProperty(sOprPath + "/Ticon_status_1", "DUP"); //Released
                                    oOperationItemsModel.setProperty(sOprPath + "/TiconStatus01", "LINK");
                                } else if (sType === "2") {
                                    oOperationItemsModel.setProperty(sOprPath + "/Ticon_status_2", "DUP"); //Released
                                    oOperationItemsModel.setProperty(sOprPath + "/TiconStatus02", "LINK");
                                } else {
                                    oOperationItemsModel.setProperty(sOprPath + "/Ticon_status_3", "DUP"); //Released
                                    oOperationItemsModel.setProperty(sOprPath + "/TiconStatus03", "LINK");
                                }
                                sap.m.MessageToast.show(oBundle.getText("ticon.undomsg", oOperationItemsModel.getProperty(sOprPath + "/Vornr")));
                            }
                            oOperationItemsModel.refresh(true);
                        }
                    }.bind(this),
                    error: function (error) {
                        oBusyIndicator.close();
                        that.fnCheckError(error);
                    }.bind(this)
                });
            },
            /*This method used to Open Ticon Questions Dialog*/
            fnTiconQuestions: function (ref, sType) {
                var that = this;
                if (!that._QuestionsDialog) {
                    that._QuestionsDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.Questions", that);
                    that.getView().addDependent(that._QuestionsDialog);
                }
                that.getView().getModel("oOperationItemsModel").setProperty("/sTiconFilter", "All"); // Empty filter gets All values
                this.fnFetchTiconVariables(that, sType);
            },
            /*This method used to open dialog for Calculation type*/
            fnValuehelpCalType: function (oEvent) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("caltype.mandmessage");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPathCalType = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Calc_type";
                var sPathPlant = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Werks";
                //Setting Opertaion Items path for later use. Using it for blocking Processing block from edit.
                var sOprPathWorkCenter = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var nCalType = oEvent.getSource().getBindingContext("oOperationItemsModel").getProperty("Calc_type");
                var sPlant = oOperationItemsModel.getProperty(sPathPlant) || "";
                if (!this._oCalTypeValueHelpDialog) {
                    this._oCalTypeValueHelpDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.CalTypeF4", this
                    );
                    this.getView().addDependent(this._oCalTypeValueHelpDialog);
                    this._oCalTypeValueHelpDialog.setModel("i18n");
                    //Setting Opertaion Items path for later use. Using it for blocking Processing block from edit.
                    oOperationItemsModel.setProperty("/sOprPathWorkCenter", sOprPathWorkCenter);
                }
                if (sPlant) {
                    oOperationItemsModel.setProperty("/SelectedCalTypePath", sPathCalType);
                    oOperationItemsModel.setProperty("/sPathPlant", sPathPlant);
                    //Setting Opertaion Items path for later use. Using it for blocking Processing block from edit.
                    oOperationItemsModel.setProperty("/sOprPathWorkCenter", sOprPathWorkCenter);
                    oOperationItemsModel.setProperty(sPathCalType, nCalType);
                    var oBinding = this._oCalTypeValueHelpDialog.getBinding("items");
                    var aFilter = [
                        new sap.ui.model.Filter("WERKS", FilterOperator.EQ, sPlant),
                    ];
                    oBinding.filter(aFilter);
                    this._oCalTypeValueHelpDialog.open();
                } else {
                    MessageBox.error(sMsg);
                }
            },
            /*function to add the taklist discription in the rich text editor*/
            fnChangeOprItemTasklistdescr: function (oEvent) {
                var sLongText = "",
                    oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sTasklistdesc = oEvent.getSource().getValue(),
                    sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    sLongTextPath = sPath + "/Long_Text/results",
                    sOprShortTextPath = sPath + "/Ltxa1",
                    sSyncTasklistdesc = oOperationItemsModel.getProperty(sPath + "/SyncOprText");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                sTasklistdesc = formatter.fnEncodeEntities(sTasklistdesc); // Encoding < and >
                sLongText = oOperationItemsModel.getProperty(sLongTextPath);
                if (sLongText.length === 0) {
                    sLongText = "";
                }
                if (sLongText === "" && sTasklistdesc.length > 0) {
                    sLongText = "<p>" + sTasklistdesc + "</p>";
                } else if (sLongText) {
                    // since the Longtext is already formatted , no need to format again
                    // Replace fisrt line of Longtext with tasklist description
                    if (sTasklistdesc !== sSyncTasklistdesc) {
                        var aPlainText = formatter.fnPlainText(sLongText);
                        if (aPlainText[0].Edit === "I") {
                            //in case of Include text
                            var sIncludeTextPara, sShortTextPara;
                            if (sTasklistdesc.substring(0, 39) !==
                                sSyncTasklistdesc.substring(0, 39) ||
                                sSyncTasklistdesc.substring(39, 40) !== " " ||
                                sTasklistdesc.substring(39, 40) !== "") {
                                sIncludeTextPara = this.fnHtmlParas(sLongText);
                                sShortTextPara = "<p>" + sTasklistdesc + "</p>";
                                sLongText = sLongText.replace(sIncludeTextPara, sShortTextPara);
                            }
                        } else {
                            var sFirstLine = aPlainText[0].Line;
                            var sFormattedText = sFirstLine.replace(/(\r\n|\n|\r)/gm, "");
                            sLongText = sLongText.replace(sFormattedText, sTasklistdesc);
                        }
                    }
                } else {
                    // If both long text and tasklist are empty
                    sLongText = "";
                }
                oOperationItemsModel.setProperty(sLongTextPath, sLongText);
            },
            /*This method triggerd on value hep for s-routings */
            fnValuehelpRefOpset: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oContext = oEvent.getSource().getBindingContext("oOperationItemsModel");
                var sPathRefOp;
                if (!this._oValueHelpRefOpset) {
                    this._oValueHelpRefOpset = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.RefOpSetValueHelp", this
                    );
                    this.getView().addDependent(this._oValueHelpRefOpset);
                    this._oValueHelpRefOpset.setModel(oRoutingModel, "oRoutingModel");
                    this._oValueHelpRefOpset.setModel(this.geti18nModel(), "i18nlocal");
                }
                var oBinding = this._oValueHelpRefOpset.getBinding("items");
                oBinding.filter([]);
                if (oContext !== undefined) {
                    //Opened from Operation item
                    sPathRefOp = oContext.getPath();
                    oRoutingModel.setProperty("/sPathRefOp", sPathRefOp);
                    oRoutingModel.setProperty("/oSource", "OperationItem");
                } else {
                    sPathRefOp = oEvent.getSource().getBindingContext("oRefOprSetModel");
                    oRoutingModel.setProperty("/oSource", "Refopset");
                }
                this._oValueHelpRefOpset.open();
            },
            /*Description : Modify Effectivity for Operation Area*/
            fnOnPressOpeartionArea: function (oEvent) {
                var oRoutingHeaderModel = this.getOwnerComponent().getModel("oRoutingHeaderModel"),
                    sBOMMatNumber = oRoutingHeaderModel.getProperty("/BOM/Material"),
                    sBOMPlant = oRoutingHeaderModel.getProperty("/BOM/Plant"),
                    sBOMusage = oRoutingHeaderModel.getProperty("/BOM/BomUsage");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    oOperationItem = oOperationItemsModel.getProperty(sPath),
                    sOperationVORNR = oOperationItem.Vornr,
                    sOperationLtxa1 = oOperationItem.Ltxa1,
                    sOperationPlnnr = oOperationItem.Plnnr,
                    sOperationknobj = oOperationItem.Knobj,
                    sOperationplnty = oOperationItem.Plnty,
                    sOperationSPlnnr = oOperationItem.S_Plnnr,
                    sOperationplnkn = oOperationItem.Plnkn;
                if (sOperationSPlnnr !== "") {
                    var sMsgNoDTimportOpr = this.getView().getModel("i18n").getResourceBundle().getText("update.MsgNoDTimportOpr");
                    sap.m.MessageToast.show(sMsgNoDTimportOpr, {
                        duration: 7000,
                        width: "68em",
                    });
                } else {
                    var sGrpNo = oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_No");
                    var sGrpCntr = oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr");
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilters = [new sap.ui.model.Filter("TCode", FilterOperator.EQ, "ZM_MEAU_EFFCA02"),];
                    oDataModel.read("/ET_Web_GuiSet", {
                        filters: aFilters,
                        success: function (oData) {
                            var sLink = oData.results[0].Link;
                            sap.m.URLHelper.redirect(
                                sLink +
                                "?BOMOK=" +
                                sBOMMatNumber +
                                "&WERKS=" +
                                sBOMPlant +
                                "&VORNR=" +
                                sOperationVORNR +
                                "&LTXA1=" +
                                sOperationLtxa1 +
                                "&PLNNR=" +
                                sOperationPlnnr +
                                "&PLNTY=" +
                                sOperationplnty +
                                "&PLNKN=" +
                                sOperationplnkn +
                                "&KNOBJ=" +
                                sOperationknobj +
                                "&PLNAL=" +
                                sGrpCntr +
                                "&POSNR=" +
                                sOperationVORNR +
                                "&P_FLAG=OPR&~OKCODE=ONLI/#",
                                true
                            );
                        },
                    });
                }
            },
            // MARS V3.0 Classification of operation..
            fnOnPressOpeartionAreaClassification: function (oEvent) {
                var oRoutingHeaderModel = this.getOwnerComponent().getModel("oRoutingHeaderModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    oOperationItem = oOperationItemsModel.getProperty(sPath),
                    sOperationVORNR = oOperationItem.Vornr,
                    sOperationplnty = oOperationItem.Plnty,
                    sOperationplnkn = oOperationItem.Plnkn,
                    sOperationVplty = oOperationItem.Vplty,
                    sOperationZaehl = oOperationItem.Zaehl,
                    sOperationVplnr = oOperationItem.Vplnr,
                    sOperationSPlnnr = oOperationItem.S_Plnnr,
                    sOperationPlnnr = oOperationItem.Plnnr;
                if (sOperationSPlnnr !== "") {
                    var sMsgNoDTimportOpr = this.getView().getModel("i18n").getResourceBundle().getText("update.MsgNoDTimportOpr");
                    sap.m.MessageToast.show(sMsgNoDTimportOpr, {
                        duration: 7000,
                        width: "68em",
                    });
                } else {
                    var sGrpNo = oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No");
                    var sGrpCntr = oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr");
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilters = [new sap.ui.model.Filter("TCode", FilterOperator.EQ, "ZM_MEAU_CLASS_OPR"),];
                    oDataModel.read("/ET_Web_GuiSet", {
                        filters: aFilters,
                        success: function (oData) {
                            var sLink = oData.results[0].Link;
                            sap.m.URLHelper.redirect(
                                sLink +
                                "?PLNNR=" +
                                sGrpNo +
                                "&PLNAL=" +
                                sGrpCntr +
                                "&VORNR=" +
                                sOperationVORNR +
                                "&PLNTY=" +
                                sOperationplnty +
                                "&PLNKN=" +
                                sOperationplnkn +
                                "&VPLTY=" +
                                sOperationVplty +
                                "&ZAEHL=" +
                                sOperationZaehl +
                                "&VPLNR=" +
                                sOperationVplnr +
                                "&~OKCODE=ONLI/#",
                                true
                            );
                        },
                    });
                }
            },
            /*This method used to open dialog for operation header text*/
            fnOperationHeaderTextDialog: function (oEvent) {
                var sLongText = "";
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var sLongTextPath = sPath + "/Long_Text";
                var sOprShortTextPath = sPath + "/Ltxa1";
                var sVplnr = oOperationItemsModel.getProperty(sPath + "/Vplnr");
                var bLongText_isFormatted = oOperationItemsModel.getProperty(sPath + "/bLongText_isFormatted") || false;
                oRoutingModel.setProperty("/sOprPath", sPath);
                //Operation ShortText
                var sOprShortText = oOperationItemsModel.getProperty(sOprShortTextPath) || "";
                var sSyncOprText = oOperationItemsModel.getProperty(sPath + "/SyncOprText");
                if (sLongTextPath !== undefined && !bLongText_isFormatted) {
                    // on initial loading of dialog format the backend plain text to Html
                    var sPlainText = oOperationItemsModel.getProperty(sLongTextPath).results;
                    if (sPlainText.length > 0) {
                        sSyncOprText = sPlainText[0].Line.substring(0, 40);
                    }
                    //Push Operation Short text if no texts in longtext to maintain synchronization
                    if (sPlainText.length < 1 && sOprShortText.length > 0) {
                        sPlainText.push({
                            Edit: "E",
                            Line: sOprShortText,
                        });
                    } else if (sSyncOprText !== sOprShortText && sPlainText.length > 0) {
                        if (sPlainText[0].Edit === "E") {
                            //If editable text
                            sPlainText[0].Line = sOprShortText;
                        } else {
                            //or else include text
                            if (
                                sOprShortText.substring(0, 39) !==
                                sSyncOprText.substring(0, 39) ||
                                sSyncOprText.substring(39, 40) !== " " ||
                                sOprShortText.substring(39, 40) !== ""
                            ) {
                                var index = 1;
                                for (var i = 1; i < sPlainText.length; i++) {
                                    if (sPlainText[i].Edit === "N") {
                                        index++;
                                    } else if (
                                        sPlainText[i].Edit === "E" ||
                                        sPlainText[i].Edit === "I"
                                    ) {
                                        break;
                                    }
                                }
                                sPlainText.splice(0, index);
                                sPlainText.unshift({
                                    Edit: "E",
                                    Line: sOprShortText,
                                });
                            }
                        }
                    }
                    sLongText = formatter.fnHTMLFormat(sPlainText); //format to HTML
                    var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                    oVisibilityModel.setProperty("/bUnsavedChange", true);
                    oOperationItemsModel.setProperty(sPath + "/bLongText_isFormatted", true);
                } else if (sLongTextPath !== undefined) {
                    // since the code is already formatted , no need to format again
                    sLongText = oOperationItemsModel.getProperty(sLongTextPath).results;
                    sOprShortText = formatter.fnEncodeEntities(sOprShortText); // Encoding < and >
                    // Replace fisrt line of Longtext with Short Text
                    if (sLongText && sOprShortText !== sSyncOprText) {
                        var aPlainText = formatter.fnPlainText(sLongText);
                        if (aPlainText[0].Edit === "I") {
                            //in case of Include text
                            var sIncludeTextPara, sOprShortTextPara;
                            if (
                                sOprShortText.substring(0, 39) !==
                                sSyncOprText.substring(0, 39) ||
                                sSyncOprText.substring(39, 40) !== " " ||
                                sOprShortText.substring(39, 40) !== ""
                            ) {
                                sIncludeTextPara = this.fnHtmlParas(sLongText);
                                oVisibilityModel.setProperty("/bUnsavedChange", true);
                                sOprShortTextPara = "<p>" + sOprShortText + "</p>";
                                sLongText = sLongText.replace(sIncludeTextPara, sOprShortTextPara);
                            }
                        } else {
                            var sFirstLine = aPlainText[0].Line;
                            var sFormattedText = sFirstLine.replace(/(\r\n|\n|\r)/gm, "");
                            sLongText = sLongText.replace(sFormattedText, sOprShortText);
                        }
                    } else if (sLongText === "") {
                        sLongText = "<p>" + sOprShortText + "</p>";
                    }
                }
                oOperationItemsModel.setProperty("/sLongText", sLongText);
                oOperationItemsModel.setProperty("/sPreviousLongText", sLongText);
                oOperationItemsModel.setProperty("/sVplnr", sVplnr);
                if (!this._oOperationHeaderTextDialog) {
                    this._oOperationHeaderTextDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.OperationHeaderText", this);
                    this.getView().addDependent(this._oOperationHeaderTextDialog);
                    this._oOperationHeaderTextDialog.setModel(this.getView().getModel("i18n"), "i18n");
                    this._oOperationHeaderTextDialog.setModel(oOperationItemsModel, "oOperationItemsModel");
                }
                this._oOperationHeaderTextDialog.open();
            },
            /*This method is used to open operation header popup*/
            fnOpenOperationHeaderPopup: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    oJOpHeaderDialogModel = new JSONModel(),
                    oOprHeaderData = oOperationItemsModel.getProperty(sCurrentPath),
                    oInitVs = {
                        Keyword1: "None",
                        Keyword2: "None",
                        Keyword3: "None",
                        Keyword4: "None",
                        Keyword5: "None",
                        Keyword5Uom: "None",
                        Keyword6: "None",
                        Keyword6Uom: "None",
                        Keyword7: "None",
                        Keyword7Uom: "None",
                        Keyword8: "None",
                        Keyword8Uom: "None",
                        Keyword9Date: "None",
                        Keyword10Date: "None",
                    };
                //set data from operation model to dialog model
                oJOpHeaderDialogModel.setProperty("/Arbpl_Ktext", oOprHeaderData.Arbpl_Ktext);
                oJOpHeaderDialogModel.setProperty("/Aedat", oOprHeaderData.Aedat);
                oJOpHeaderDialogModel.setProperty("/Aenam", oOprHeaderData.Aenam);
                oJOpHeaderDialogModel.setProperty("/Andat", oOprHeaderData.Andat);
                oJOpHeaderDialogModel.setProperty("/Annam", oOprHeaderData.Annam);
                //save the opr item model path for later use
                oJOpHeaderDialogModel.setProperty("/oprItemPath", sCurrentPath);
                //copy the user format
                oJOpHeaderDialogModel.setProperty("/sUsrDateFormat", oOperationItemsModel.getProperty("/DATFM").toLowerCase().replaceAll("m", "M"));
                //set intial value states to model
                oJOpHeaderDialogModel.setProperty("/userFieldVs", oInitVs);
                if (oOprHeaderData.OprUserFields &&
                    oOprHeaderData.OprUserFields.results.length > 0) {
                    //set the result data to userfield
                    oJOpHeaderDialogModel.setProperty("/userFieldData", JSON.parse(JSON.stringify(oOprHeaderData.OprUserFields.results[0])));
                    oJOpHeaderDialogModel.setProperty("/IntialFieldKey", oOprHeaderData.OprUserFields.results[0].FieldKey);
                }
                if (this.getView().getModel("oRoutingModel").getProperty("/keyUser") !== "X" && oOprHeaderData.Vplnr !== "") {
                    oJOpHeaderDialogModel.setProperty("/bEnbUsrField", false);
                } else {
                    oJOpHeaderDialogModel.setProperty("/bEnbUsrField", true);
                }
                if (!this._oOperationHeader) {
                    this._oOperationHeader = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.OperationHeader", this);
                    this.getView().addDependent(this._oOperationHeader);
                }
                this._oOperationHeader.setInitialFocus(oEvent.getSource());
                this._oOperationHeader.setModel(oJOpHeaderDialogModel);
                this._oOperationHeader.open();
            },
            /*function to handle the change event of rich text editor in opr item*/
            fnOperationItemTextChange: function (oEvent) {
                var sHTMLLongText = oEvent.getParameters().newValue;
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var sOprLongTextPath = sPath + "/Long_Text";
                var sOprShortTextPath = sPath + "/Ltxa1";
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oRoutingModel.setProperty("/bMassUpdateLtext", true);
                oOperationItemsModel.setProperty(sOprLongTextPath + "/results", sHTMLLongText);
                //Setting First line of long text to Short Text
                if (sHTMLLongText) {
                    var aPlainText = formatter.fnPlainText(sHTMLLongText);
                    var sFirstLine = aPlainText[0].Line;
                    var sFormattedText = sFirstLine.replace(/(\r\n|\n|\r)/gm, ""); //remove newline and carriage return
                    sFormattedText = sFormattedText.replace(/&nbsp;/g, "");
                    sFormattedText = formatter.fnDecodeEntities(sFormattedText); //Reconvert Unicode characters
                    var sOprShortText = sFormattedText.substring(0, 40);
                    oOperationItemsModel.setProperty(sOprShortTextPath, sOprShortText);
                    oOperationItemsModel.setProperty(sPath + "/SyncOprText", sOprShortText);
                } else {
                    oOperationItemsModel.setProperty(sOprShortTextPath, "");
                    oOperationItemsModel.setProperty(sPath + "/SyncOprText", "");
                }
            },
            fnOpenDocBtnDisable: function (oEvent) {
                var aSelectedIndices = oEvent.getSource().getSelectedIndices();
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var sPRTPath = sPath + "/PRT/results/";
                var bEnableMassUserPRTDel = oOperationItemsModel.getProperty("/bEnableMassUserPRTDel");
                if (aSelectedIndices.length >= 0 && this.getView().getModel("oVisibilityModel").getProperty("/sMassUpdateUser") === "X" && oOperationItemsModel.getProperty(sPath + "/aTempAddedDelButton") === true) {
                    var highFlag = [];
                    var noHignFlag = [];
                    for (var j = 0; j < aSelectedIndices.length; j++) {
                        var aTableRowData = oOperationItemsModel.getProperty(sPRTPath + aSelectedIndices[j]).Prt_color;
                        if (aTableRowData === "3") {
                            highFlag.push({
                                rec: "1"
                            });
                        } else if (aTableRowData !== "3" || aTableRowData === undefined || aTableRowData === "") {
                            noHignFlag.push({
                                rec: "0"
                            });;
                        }
                    }
                    if (highFlag.length > 0 && noHignFlag.length === 0) {
                        oOperationItemsModel.setProperty("/bEnableMassUserPRTDel", true);
                    } else if (highFlag.length > 0 && noHignFlag.length > 0) {
                        oOperationItemsModel.setProperty("/bEnableMassUserPRTDel", false);
                    } else if (noHignFlag.length > 0 && highFlag.length === 0) {
                        oOperationItemsModel.setProperty("/bEnableMassUserPRTDel", true);
                    } else if (noHignFlag.length === 0 && highFlag.length === 0) {
                        oOperationItemsModel.setProperty("/bEnableMassUserPRTDel", true);
                    } else {
                        oOperationItemsModel.setProperty("/bEnableMassUserPRTDel", true);
                    }
                } else {
                    if (aSelectedIndices.length > 0) {
                        this.getModel("oOperationItemsModel").setProperty(sPath + "/bOPenPRTBtnEnable", true);
                    } else {
                        this.getModel("oOperationItemsModel").setProperty(sPath + "/bOPenPRTBtnEnable", false);
                    }
                }
                oOperationItemsModel.updateBindings(true);
            },
            /**Description :PRT MANAGEMENT DIALOG Open & setting the visible properties for default visible columns.*/
            fnOnPRTManage: function (oEvent) {
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel");
                // visible properties of default columns in prt matrix.
                oVisibilityModel.setProperty('/isAllSelected', false);
                oVisibilityModel.setProperty('/bItemDoc', true);
                oVisibilityModel.setProperty('/bPRTCat', true);
                oVisibilityModel.setProperty('/bdocType', true);
                oVisibilityModel.setProperty('/PrtMatPanel', false);
                oVisibilityModel.setProperty("/aOprList", []);
                oVisibilityModel.setProperty('/bctrlKey', true);
                oVisibilityModel.setProperty('/bPrtDoc', true);
                oVisibilityModel.setProperty('/bPrtMat', true);
                oVisibilityModel.setProperty('/bPrtDocPart', true);
                oVisibilityModel.setProperty('/bPrtDocVer', true);
                oVisibilityModel.setProperty('/bPrtDocStat', true);
                oVisibilityModel.setProperty('/bPrtDesc', true);
                oVisibilityModel.setProperty('/bPrtTxtPro', false);
                oVisibilityModel.setProperty('/bPrtStdKey', false);
                oVisibilityModel.setProperty('/bPrtPlnt', false);
                oVisibilityModel.setProperty('/bPrtQnty', false);

                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                oOperationItemsModel.setProperty('/aOperationItemsCopy', '');
                // PRT Matrix open . 
                if (!this.oPRTManage) {
                    this.oPRTManage = sap.ui.xmlfragment("com.airbus.zcf2meautorc.fragment.PrtManage", this);
                    this.getView().addDependent(this.oPRTManage);
                    //adding escape handler to prevent closing of dialog by Escp Btn 
                    this.oPRTManage.setEscapeHandler((oEscapeHandler) => {
                        oEscapeHandler.reject();
                    });

                } else {
                    this.fnDeleteDynamicRows();
                }
                this.fnPRTManageData(oEvent);

                this.oPRTManage.open();
                setTimeout(function () {
                    var oPrtMatTable = sap.ui.getCore().byId("idPRTManageTable");
                    var aPRTColumns = oPrtMatTable.getColumns();

                    // GGUNO6VD- V4.0 - Setting Dynamic Row count to set the Height.
                    var parent = oPrtMatTable.getParent(),
                        availableHeight = parent.getDomRef().clientHeight;
                    var footerElement = sap.ui.getCore().byId("PrtMatrixDialog-footer");
                    availableHeight -= footerElement.getDomRef().clientHeight;
                    var visibleRows = Math.round((availableHeight / 33) - 2);
                    oPrtMatTable.setVisibleRowCount(visibleRows);

                    // Clear Filters
                    for (var index = 0; index < aPRTColumns.length; index++) {
                        oPrtMatTable.sort(aPRTColumns[index], "");
                        oPrtMatTable.filter(aPRTColumns[index], "");
                    }
                    oPrtMatTable.sort(oPrtMatTable.getColumns()[0], "Psnfh");
                    oPrtMatTable.setFixedColumnCount(1); // stick the first column
                    // V3.4 - GGUNO6VD - Storing id of checkboxes as Array.
                    var checkboxIds = ["idItemDoc", "idPRTCat", "iddocType", "idctrlKey", "idPrtDoc",
                        "idPrtMat", "idPrtDocPart", "idPrtDocVer", "idPrtDocStat", "idPrtDesc",
                        "idPrtTxtPro", "idPrtStdKey", "idPrtPlnt", "idPrtQnty"];
                    oVisibilityModel.setProperty('/aPrtCheckBox', checkboxIds);
                    sap.ui.core.BusyIndicator.hide();
                }, 0);
            },
            /*Description :Preparing combined PRT data for the PRT overview*/
            fnPRTManageData: function (oEvent) {
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel"),
                    oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oOperationDataOrg = oOperationItemsModel.getProperty('/aOperationItems');
                var aPRTManageTableData = [],
                    aOprList = [],
                    oOprlist = oOperationItemsModel.oData.aOperationItems,
                    j = 0;
                oVisibilityModel.setProperty('/aPRTManageTableDataCombined', []);
                var oBusyIndicator = new sap.m.BusyDialog();
                oBusyIndicator.open();
                // Preparing the Operation number array
                for (let i = 0; i < oOprlist.length; i++) {
                    if (oOprlist[i].Vplnr === '') {
                        // pushing the current operation number 
                        aOprList.push(oOprlist[i].Vornr);
                    }
                }
                oVisibilityModel.setProperty("/aOprList", aOprList);
                oOperationItemsModel.setProperty('/aPRTManageTableData', []);
                for (let i = 0; i < oOprlist.length; i++) {
                    if (oOprlist[i].Vplnr === '' && (oOprlist[i].PRT.results.length > 0)) {
                        var currentPrtlist = oOprlist[i].PRT.results;
                        for (let k = 0; k < currentPrtlist.length; k++, j++) {
                            if (currentPrtlist[k].Loekz === false) {
                                aPRTManageTableData[j] = { ...currentPrtlist[k] };
                                aPRTManageTableData[j].CVornr = "";
                                // UI Properties of PRT Matrix          
                                aPRTManageTableData[j].seen = "";
                                aPRTManageTableData[j].Del = "";
                                // looping through the operation array to assgin the operation data.
                                for (var index = 0; index < aOprList.length; index++) {
                                    if (aOprList[index] === oOprlist[i].Vornr) {
                                        //add "X" to the opr property of the rows in matrix.
                                        if (aPRTManageTableData[j].Loekz === true) {
                                            aPRTManageTableData[j][aOprList[index]] = false;
                                        } else {
                                            aPRTManageTableData[j][aOprList[index]] = true;
                                            // keeping the copy of original PRT's operation number.
                                            aPRTManageTableData[j].CVornr = oOprlist[i].Vornr;
                                        }
                                    } else {
                                        aPRTManageTableData[j][aOprList[index]] = false;
                                    }

                                }
                            }
                        }
                    } else {
                        continue;
                    }
                }
                oVisibilityModel.setProperty('/aPRTManageTableDataCombined', aPRTManageTableData);
                var oFinalPRTS = this.fnRemoveDuplicates(aPRTManageTableData);
                oOperationItemsModel.setProperty('/aPRTManageTableData/Items', oFinalPRTS);
                oOperationItemsModel.setProperty('/aPRTManageTableData/DelPrt', false);
                //copying the original Operation data [On Screen Data].
                var oOperationDataCopy = $.extend(true, [], oOperationDataOrg);
                oOperationItemsModel.setProperty("/aOperationItemsCopy", oOperationDataCopy);
                // Optionally, update the model to reflect changes
                oOperationItemsModel.updateBindings(true);
                this.fnDynamicClmAdd(oEvent, oFinalPRTS);
                oBusyIndicator.close();
            },
            /* Description : This method is used delete dynamic columns*/
            fnDeleteDynamicRows: function () {
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel");
                var OprList = oVisibilityModel.getProperty("/aOprList");
                var oTable = sap.ui.getCore().byId("idPRTManageTable");
                // Create a copy of OprList to avoid modifying 
                var oprListCopy = OprList.slice();
                // Iterate over the columns in reverse order to  remove items 
                for (var i = oTable.getColumns().length - 1; i >= 0; i--) {
                    var oColumn = oTable.getColumns()[i];
                    var columnLabel = oColumn.getLabel().getText();
                    // Check if the column label exists in OprListCopy
                    var index = oprListCopy.indexOf(columnLabel);
                    if (index !== -1) {
                        // Remove the column from the table
                        oTable.removeColumn(oColumn);
                        // Optionally, remove the item from OprListCopy to keep track of processed items
                        oprListCopy.splice(index, 1);
                    }
                }
                // Update bindings 
                this.getView().getModel("oOperationItemsModel").updateBindings();
            },
            /*Description :  Removing the dulpicates in the aPRTManageTableData*/
            fnDynamicClmAdd: function (oEvent, oFinalPRTS) {
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel");
                var OprList = oVisibilityModel.getProperty("/aOprList");
                var oTable = sap.ui.getCore().byId("idPRTManageTable");
                // Define the column
                for (var i = 0; i < OprList.length; i++) {
                    var width;
                    if (i === OprList.length - 1) {
                        width = "5rem";
                    } else {
                        width = "4rem";
                    }
                    var OprCol = OprList[i];
                    var sBindingPath = "{oOperationItemsModel>" + OprCol + "}";
                    var oColumn = new sap.ui.table.Column({
                        label: new sap.m.Label({
                            text: OprCol,
                            tooltip: OprCol
                        }),
                        template: new sap.m.CheckBox({
                            selected: sBindingPath,
                            select: this.fnOprSelectChange,
                        }),
                        width: width
                    });
                    oTable.addColumn(oColumn);
                }
                this.getView().getModel("oOperationItemsModel").updateBindings();
            },
            /* Description: Add a new PRT in PRT MATRIX.*/
            fnAddPRTMtrx: function (oEvent) {
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var oVisibilityModel = this.getModel("oVisibilityModel");
                var OprList = oVisibilityModel.getProperty("/aOprList");
                var oTable = sap.ui.getCore().byId("idPRTManageTable");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                var aPRT = aOperationItems.getProperty('/aPRTManageTableData/Items') || [];
                var oObj = this.fnNewRowObj();
                for (var i = 0; i < OprList.length; i++) {
                    oObj[OprList[i]] = false;
                }
                aPRT.unshift(oObj);
                aOperationItems.setProperty('/aPRTManageTableData/Items', aPRT);
                aOperationItems.refresh();
                oTable.clearSelection();
            },
            /*Description : Object for new record in PRT Matrix. */
            fnNewRowObj: function (item, sAction) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails");
                var oObj = {
                    Plnnr: oRoutingHeaderModel.Group_No,
                    Plnal: oRoutingHeaderModel.Grp_Cntr,
                    Plnty: oRoutingHeaderModel.Task_type,
                    Psnfh: "",
                    Fhmar: "D",
                    Doknr: "",
                    Del: "",
                    Dokar: "",
                    Doktl: "",
                    Dokvr: "",
                    Dokst: "",
                    Txtz1: "",
                    Fhktx: "",
                    Steuf: "",
                    Sfhnr: "",
                    Matnr: "",
                    Fhwrk: "",
                    Mgvgw: "1",
                    isNew: "X",
                    Prt_mass: "X",
                    Prt_color: "",
                    Vornr: "",
                    Loekz: false,
                    sRefOpr: "",
                    isChange: "",
                    bEnable: true,
                    Ktsch: "",
                    seen: ""
                };
                return oObj;
            },
            /**Description : Delete function for the PRT Matrix*/
            fnDeletePRTMtrx: function (oEvent) {
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var oTable = sap.ui.getCore().byId("idPRTManageTable");
                var sPRTPathRef = "/aPRTManageTableData/Items/";
                var aSelectedItems = oTable.getSelectedIndices();
                if (aSelectedItems.length > 0) {
                    aSelectedItems = aSelectedItems.reverse();
                    aSelectedItems.map(function (index) {
                        var sDocnum = oTable.getContextByIndex(index).getProperty("Psnfh");
                        var bFlag = oTable.getContextByIndex(index).getProperty("Loekz");
                        var isNew = oTable.getContextByIndex(index).getProperty("isNew");
                        var sDokar = oTable.getContextByIndex(index).getProperty("Dokar");
                        var sDoknr = oTable.getContextByIndex(index).getProperty("Doknr");
                        var sDoktl = oTable.getContextByIndex(index).getProperty("Doktl");
                        var sDokvr = oTable.getContextByIndex(index).getProperty("Dokvr");
                        var sFhmar = oTable.getContextByIndex(index).getProperty("Fhmar");
                        var sSteuf = oTable.getContextByIndex(index).getProperty("Steuf");
                        var sFhktx = oTable.getContextByIndex(index).getProperty("Fhktx");
                        var aPRTS = [];
                        aPRTS = aOperationItems.getProperty(sPRTPathRef) || [];
                        var oPRTIndex = aPRTS.findIndex(function (oPRTItem) {
                            return (
                                oPRTItem.Psnfh === sDocnum && oPRTItem.Loekz === bFlag &&
                                oPRTItem.Dokar === sDokar && oPRTItem.Doknr === sDoknr &&
                                oPRTItem.Doktl === sDoktl && oPRTItem.Dokvr === sDokvr &&
                                oPRTItem.Fhmar === sFhmar && oPRTItem.Steuf === sSteuf &&
                                oPRTItem.Fhktx === sFhktx
                            );
                        });
                        if (isNew !== "X") {
                            var oBinding = oTable.getBinding("rows");
                            aPRTS[oPRTIndex].Loekz = true; //Set delete flag
                            aPRTS[oPRTIndex].Del = "X"; //Set Del flag to delete from PRT Matrix table
                            var filter = new sap.ui.model.Filter("Del", sap.ui.model.FilterOperator.NE, 'X');
                            oBinding.filter([filter]);
                        } else {
                            aPRTS.splice(oPRTIndex, 1);
                        }
                        aOperationItems.refresh();
                        oTable.clearSelection();
                    });
                }
            },
            /*Description : Update function for the PRT Matrix*/
            fnPRTManageUpdate: function (oEvent) {
                var aOperationItems = this.getView().getModel("oOperationItemsModel"),
                    oVisibilityModel = this.getModel("oVisibilityModel"),
                    //list of the opr numbers - oprList
                    OprList = oVisibilityModel.getProperty("/aOprList");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                //list of the prt matrix records - oFinalPRTList
                var oFinalPRTList = aOperationItems.getProperty("/aPRTManageTableData/Items");
                this.fnPRTDeleteFinal(OprList, oFinalPRTList);
            },
            /*Description : function to del the PRT from the table & setting the LOEKZ property to true .*/
            fnPRTDeleteFinal: function (OprList, aPRTList) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sPRTlostMsg = oBundle.getText("prt.datalost");
                var sContMsg = oBundle.getText("prt.cont");
                var sCancel = oBundle.getText("prt.cancel");
                var delInd = [];
                var that = this;
                var sMultiDel;
                for (var i = 0; i < aPRTList.length; i++) {
                    var oPRT = aPRTList[i];
                    var sDelPRTflag = 0;
                    OprList.forEach(function (opr) {
                        if (oPRT[opr] === true) {
                            sDelPRTflag = 1;
                        }
                    });
                    // checking if all the operations are unchecked , if unchecked then delete record. 
                    if (sDelPRTflag === 0) {
                        delInd.push(i);
                    }
                }
                if (delInd.length > 0) {
                    MessageBox.warning(sPRTlostMsg, {
                        actions: [sContMsg, sCancel],
                        emphasizedAction: sContMsg,
                        onClose: function (sAction) {
                            if (sAction === sContMsg) {
                                delInd.forEach(function (index) {
                                    aPRTList[index].Del = "X";
                                    aPRTList[index].Loekz = true;
                                });
                                // calling the odata with all the Loekz marked properly 
                                that.fnPRTMatrixUpdate(aPRTList);
                            } else {
                                that.fnPRTMatrixUpdate(false);
                            }
                        }
                    });
                } else {
                    this.fnPRTMatrixUpdate(aPRTList);
                }
            }, /*Description : function for actual update of PRT Matrix Rows.*/
            fnPRTMatrixUpdate: function (oFinalPRTList) {
                var aOperationItems = this.getView().getModel("oOperationItemsModel"),
                    oOperationDataOrg = aOperationItems.getProperty('/aOperationItemsCopy');
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oOperationData = this.fnOperationItem(oOperationDataOrg);
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails");
                var oOperationDataMainScreen = aOperationItems.getProperty('/aOperationItems');
                var oVisibilityModel = this.getModel("oVisibilityModel"),
                    OprList = oVisibilityModel.getProperty("/aOprList");
                var oTable = sap.ui.getCore().byId("idPRTManageTable");
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                //Batch Operation calls
                var oBusyIndicator = new sap.m.BusyDialog();
                oBusyIndicator.open();
                var bMandateCheck = this.fnMandateCheckPrtMatrix(oTable);
                if (bMandateCheck) {
                    if (oFinalPRTList) {
                        var oOperationData = this.fnPRTMatrixPayload(oOperationData, OprList, oFinalPRTList);
                        var oPayloadPRTCompare = {
                            Plnty: oRoutingHeaderModel.Task_type,
                            Plnnr: oRoutingHeaderModel.Group_No,
                            Plnal: oRoutingHeaderModel.Grp_Cntr,
                            Opr: oOperationData
                        }
                        oDataModel.create("/ET_OprCompSet", oPayloadPRTCompare, {
                            success: function (oData) {
                                var sOperations = oData.Opr.results;
                                for (var j = 0; j < sOperations.length; j++) {
                                    var Opr = sOperations[j];
                                    var oNewPRTs = Opr.PRT;
                                    var oNewPRTRes = oNewPRTs.results; // new prts 
                                    var sMissOprt = oNewPRTRes.filter(function (prt) {
                                        if (prt.Psnfh === '') { return prt }
                                    });//[] 
                                    var oMatcedOpr = oOperationDataMainScreen.filter(function (OPR) {
                                        if (OPR.Vornr === Opr.Vornr) { return OPR }
                                    });
                                    var oScreenPRTs = oMatcedOpr[0].PRT;
                                    // replacing the empty Doc number in PRTs with the highest doc numbers 
                                    if (sMissOprt.length > 0) {
                                        var iDocNumber = 0;
                                        if (oScreenPRTs.results.length > 0) {
                                            iDocNumber =
                                                Number(oScreenPRTs.results[0].Psnfh) > Number(oScreenPRTs.results[oScreenPRTs.results.length - 1].Psnfh)
                                                    ? Number(oScreenPRTs.results[0].Psnfh)
                                                    : Number(oScreenPRTs.results[oScreenPRTs.results.length - 1].Psnfh) || 10;
                                            iDocNumber = iDocNumber + 10;
                                        } else {
                                            iDocNumber = 10;
                                        }
                                        for (var i = 0; i < sMissOprt.length; i++) {
                                            var num = i * 10;
                                            sMissOprt[i].Psnfh = iDocNumber + num + "";
                                        }
                                    }
                                    oScreenPRTs.results = oNewPRTs.results;
                                }
                                oTable.clearSelection();
                                aOperationItems.updateBindings();
                                aOperationItems.refresh();
                                oBusyIndicator.close();
                                this.fnPrtClose();
                                sap.m.MessageToast.show(oBundle.getText("prt.sUpdatePRT"));
                            }.bind(this),
                            error: function (error) {
                                this.fnCheckError(error);
                                oBusyIndicator.close();
                            }.bind(this)
                        });
                    } else {
                        oBusyIndicator.close();
                        return;
                    }
                } else {
                    oBusyIndicator.close();
                    if (oFinalPRTList) {
                        MessageBox.alert(oBundle.getText("prt.missingValues"));
                    } else {
                        return;
                    }
                }
            },
            /*Description : This method is used to check all the mandatory fields in PRT MAtrix table .*/
            fnMandateCheckPrtMatrix: function (oTable) {
                var oTableRows = oTable.getBinding('rows').getModel().getProperty('/aPRTManageTableData/Items');
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails");
                var hasError = false;
                oTableRows.forEach(oRow => {
                    if (oRow.Del !== 'X') {
                        // Mandatory fields for all rows
                        if (!oRow.Steuf || !oRow.Mgvgw || !oRow.Fhmar) {
                            hasError = true;
                            oRow.Steuf_Vstate = !oRow.Steuf || oRow.Steuf_Vstate === 'Error' ? 'Error' : 'None';
                            oRow.Mgvgw_Vstate = !oRow.Mgvgw || oRow.Mgvgw_Vstate === 'Error' ? 'Error' : 'None';
                            oRow.Fhmar_Vstate = !oRow.Fhmar || oRow.Fhmar_Vstate === 'Error' ? 'Error' : 'None';
                        }
                        // Additional checks based on Fhmar value
                        if (oRow.Fhmar === 'D' || oRow.Fhmar === 'M') {
                            if (oRow.Fhmar === 'D') {
                                hasError = hasError || !oRow.Dokar || !oRow.Doknr || !oRow.Doktl || !oRow.Dokvr;
                                oRow.Dokar_Vstate = !oRow.Dokar || oRow.Dokar_Vstate === 'Error' ? 'Error' : 'None';
                                oRow.Doknr_Vstate = !oRow.Doknr || oRow.Doknr_Vstate === 'Error' ? 'Error' : 'None';
                                oRow.Doktl_Vstate = !oRow.Doktl || oRow.Doktl_Vstate === 'Error' ? 'Error' : 'None';
                                oRow.Dokvr_Vstate = !oRow.Dokvr || oRow.Dokvr_Vstate === 'Error' ? 'Error' : 'None';
                            } else if (oRow.Fhmar === 'M') {
                                if (oRoutingHeaderModel.Plant === 'FFF1') {
                                    hasError = hasError || !oRow.Ktsch;
                                    oRow.Ktsch_Vstate = !oRow.Ktsch || oRow.Ktsch_Vstate === 'Error' ? 'Error' : 'None';
                                } else {
                                    hasError = hasError || !oRow.Sfhnr || !oRow.Fhwrk;
                                    oRow.Matnr_Vstate = !oRow.Sfhnr || oRow.Matnr_Vstate === 'Error' ? 'Error' : 'None';
                                    oRow.Fhwrk_Vstate = !oRow.Fhwrk || oRow.Fhwrk_Vstate === 'Error' ? 'Error' : 'None';
                                    oRow.Dokar_Vstate = 'None';
                                    oRow.Dokar = '';
                                }
                            }
                            hasError = hasError || oRow.Txtz1_Vstate === 'Error'
                                || oRow.Ktsch_Vstate === 'Error' || oRow.Dokar_Vstate === 'Error'
                                || oRow.Doknr_Vstate === 'Error' || oRow.Doktl_Vstate === 'Error'
                                || oRow.Dokvr_Vstate === 'Error' || oRow.Matnr_Vstate === 'Error'
                                || oRow.Fhwrk_Vstate === 'Error' || oRow.Steuf_Vstate === 'Error'
                                || oRow.Mgvgw_Vstate === 'Error' || oRow.Fhmar_Vstate === 'Error';
                        }
                    }
                });
                oTable.getBinding('rows').getModel().setProperty('/aPRTManageTableData/Items', oTableRows);
                return !hasError;
            },
            /*Description : Closing the PRT Dialog and removing the dynamically added columns.*/
            fnPrtClose: function () {
                var oTable = sap.ui.getCore().byId("idPRTManageTable");
                this.getOwnerComponent().getModel("oVisibilityModel").setProperty('/PrtMatPanel', false);
                var aPRTColumns = oTable.getColumns();
                for (var index = 0; index < aPRTColumns.length; index++) {
                }
                oTable.clearSelection();
                this.fnDeleteDynamicRows();
                this.oPRTManage.close();
            },
            /*Description : This method is used delete dynamic columns*/
            fnDeleteDynamicRows: function () {
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel");
                var OprList = oVisibilityModel.getProperty("/aOprList");
                var oTable = sap.ui.getCore().byId("idPRTManageTable");
                // Create a copy of OprList to avoid modifying 
                var oprListCopy = OprList.slice();
                // Iterate over the columns in reverse order to  remove items 
                for (var i = oTable.getColumns().length - 1; i >= 0; i--) {
                    var oColumn = oTable.getColumns()[i];
                    var columnLabel = oColumn.getLabel().getText();
                    // Check if the column label exists in OprListCopy
                    var index = oprListCopy.indexOf(columnLabel);
                    if (index !== -1) {
                        // Remove the column from the table
                        oTable.removeColumn(oColumn);
                        // Optionally, remove the item from OprListCopy to keep track of processed items
                        oprListCopy.splice(index, 1);
                    }
                }
                // Update bindings 
                this.getView().getModel("oOperationItemsModel").updateBindings();
            },
            /*Description : function to create payload for prt matrix update.*/
            fnPRTMatrixPayload: function (oOperationData, OprList, oFinalPRTList) {
                var aMainPRTData = [];
                var oPRTMatrixData = [];
                oOperationData.forEach(function (OPR) {
                    OPR.PRTCompare = { results: [] };
                });
                for (var j = 0; j < OprList.length; j++) {
                    var opr = OprList[j];
                    var PRTListCompare = [];
                    for (var i = 0; i < oFinalPRTList.length; i++) {
                        aMainPRTData[i] = {};
                        var FinalPrt = oFinalPRTList[i];
                        // formatting the date feilds
                        if ((FinalPrt[opr] === true) && (FinalPrt.Loekz === false)) {
                            aMainPRTData[i] = { ...FinalPrt };
                            // aMainPRTData[i].Mgvgw = aMainPRTData[i].Mgvgw + "";
                            aMainPRTData[i].Vornr = opr;
                            aMainPRTData[i] = this.fnDeleteExtraProperties(aMainPRTData[i], 'PRT');
                            oOperationData.forEach(function (OPR) {
                                delete aMainPRTData[i][OPR.Vornr];
                                delete aMainPRTData[i].isChange;
                                delete aMainPRTData[i].sLoginMassUpdateUser;
                                delete aMainPRTData[i].sRefOpr;
                                delete aMainPRTData[i].seen;
                                if (OPR.Vornr === opr) {
                                    PRTListCompare.push(aMainPRTData[i]);
                                    oPRTMatrixData.push(aMainPRTData[i]);
                                }
                            });
                        }
                    }
                    var currentOpr = oOperationData.filter(function (item) {
                        if (item.Vornr === opr) {
                            return item;
                        };
                    });
                    currentOpr[0].PRTCompare.results = PRTListCompare;
                }
                return oOperationData;
            },
            /*Description : Function to delete extra properties on PRT or Operation Items.*/
            fnDeleteExtraProperties: function (oList, sAction) {
                // function to convert to data format
                var convertDateToString = (date) => {
                    if (date === null || date === undefined) return null;
                    return new Date(date).toISOString().replace('Z', '');
                };
                if (sAction === 'PRT') {
                    var oPRT = oList;
                    if (oPRT.isNew != 'X') {
                        //date formatting               
                        oPRT.Datub = convertDateToString(oPRT.Datub);
                        oPRT.Datui = convertDateToString(oPRT.Datui);
                        oPRT.Datuc = convertDateToString(oPRT.Datuc);
                        oPRT.Datuv = convertDateToString(oPRT.Datuv);
                    }
                    delete oPRT.aPRTPlants; //deleting property additional properties for plants
                    delete oPRT.isNew; //deleting additional properties
                    delete oPRT.bEnable; // ver 2.0 changes
                    delete oPRT.isChange; // property to identify any change
                    delete oPRT.isChangeoOpr; // prt matrix property to check if anything is changed
                    oPRT.Mgeinh = "EA";
                    oPRT.Mgvgw = oPRT.Mgvgw + "";
                    delete oPRT.Fhmar_Vstate; // PRT Category
                    delete oPRT.Doktl_Vstate; //document Type
                    delete oPRT.Dokvr_Vstate; //document version - NG90950 - 29/09/2022
                    delete oPRT.Doknr_Vstate; //document
                    delete oPRT.Dokst_Vstate;
                    delete oPRT.Matnr_Vstate; //material
                    delete oPRT.Fhwrk_Vstate; //plant
                    delete oPRT.Steuf_Vstate; //control key
                    delete oPRT.Psnfh_Vstate; //item document number
                    delete oPRT.Mgvgw_Vstate; //quantity
                    delete oPRT.Dokar_Vstate;
                    delete oPRT.Txtz1_Vstate;
                    delete oPRT.Ktsch_Vstate;
                    delete oPRT.sRefOpr;
                    delete oPRT.CVornr;
                    delete oPRT.isChange;
                    delete oPRT.Seen;
                    delete oPRT.ET_OprComp;
                    delete oPRT.sLoginMassUpdateUser;
                    delete oPRT.aSuggestOperationDocumentNum;
                    delete oPRT.aSuggestMaterialNum;
                    delete oPRT.bStdKeyReq;
                    delete oPRT.Del;
                    return oPRT;
                }
                if (sAction === 'OPR') {
                    var oOpr = oList;
                    if (oOpr.isUiNew != 'X') {
                        //date formatting                                    
                        oOpr.Aedat = convertDateToString(oOpr.Aedat);
                        oOpr.Andat = convertDateToString(oOpr.Andat);
                        oOpr.Datuv = convertDateToString(oOpr.Datuv);
                    }
                    // INC007019047 - Error: Enduser Change mode: change labor times + change PRT document position
                    // Conveting Float values to string
                    if (oOpr.Vgw01 !== "" || oOpr.Vgw01 !== undefined) {
                        oOpr.Vgw01 = oOpr.Vgw01.toString();
                    } else {
                        oOpr.Vgw01 = '';
                    }
                    if (oOpr.Vgw02 !== "" || oOpr.Vgw02 !== undefined) {
                        oOpr.Vgw02 = oOpr.Vgw02.toString();
                    } else {
                        oOpr.Vgw02 = '';
                    }
                    if (oOpr.Anzma !== "" || oOpr.Anzma !== undefined) {
                        oOpr.Anzma = oOpr.Anzma.toString();
                    } else {
                        oOpr.Anzma = '';
                    }
                    // End of INC007019047  - Error: Enduser Change mode: change labor times + change PRT document position
                    delete oOpr.aTempAddedDelButton;
                    delete oOpr.aSuggestOperationPlants; //deleting additional properties
                    delete oOpr.aSuggestOperationCAPPord; //CAPP order 3.0 deleting additional properties
                    delete oOpr.aSuggestOperationWorkCenter; //deleting additional properties
                    delete oOpr.sMassUpdateOprEditIcon; //V3.3 Deleting additional properties
                    delete oOpr.bEnable; // ver 2.0 changes
                    delete oOpr.aSuggestStdKeyOpr; // Std Key 3.1 deleting additional properties
                    delete oOpr.Werks_Vstate; //deleting additional propertie Plant
                    delete oOpr.Arbpl_Vstate; //deleting additional propertie Work centre
                    delete oOpr.USR00_Vstate; //deleting additional propertie Group
                    delete oOpr.USR02_Vstate; //deleting additional propertie Group Counter
                    delete oOpr.USR03_Vstate; //deleting additional propertie Interval
                    delete oOpr.USR03_VstateText; //deleting additional propertie Interval message
                    delete oOpr.Vplnr_Vstate; //deleting additional propertie Reference Group
                    delete oOpr.Vplal_Vstate; //deleting additional propertie Reference Group Counter
                    delete oOpr.Vgw01_Vstate; //setuptime
                    delete oOpr.Vgw02_Vstate; //Labourtime
                    delete oOpr.Vge01_Vstate; //setuptimeUOM
                    delete oOpr.Vge02_Vstate; //LabourtimeUOM
                    delete oOpr.Vgw01_bChangedFlag; //setuptime if Changed flag
                    delete oOpr.Vgw02_bChangedFlag; //Labour Time if Changed flag
                    delete oOpr.Anzma_bChangedFlag;
                    delete oOpr.Anzma_Vstate;
                    delete oOpr.Long_Text;
                    delete oOpr.Old_Long_Text;
                    delete oOpr.OprUserFields;
                    delete oOpr.Opr_Classification;
                    delete oOpr.Ticon_Status;
                    delete oOpr.Ticon_status_1;
                    delete oOpr.Ticon_status_2;
                    delete oOpr.Ticon_status_3;
                    /**
                     * Please dont forget to delete the temp added properties
                     */
                    delete oOpr.bEnableKeyUserFileds;
                    delete oOpr.bEnableOprFileds; //opr
                    delete oOpr.bEnableKeyUserOprLongTxt;
                    delete oOpr.bEnableOprTiconFileds;
                    delete oOpr.bEnableOprDoc;
                    delete oOpr.bEnableKeyUserWorkCenter;
                    delete oOpr.bEnableKeyUserNoEmployees;
                    delete oOpr.bEnableOprClassification;
                    delete oOpr.bEnableKeyUserOprShortTxtDesc;
                    delete oOpr.bEnableKeyUserPRTAdd;
                    delete oOpr.bEnableKeyUserPRTDel;
                    delete oOpr.bEnableKeyUserPRTTable;
                    delete oOpr.isNew;
                    delete oOpr.isChange;
                    delete oOpr.aTempAddedDelButton;//deleting additional properties
                    //remove the date usr fields as it will be mapped from the backend 
                    delete oOpr.USR08;
                    delete oOpr.USR09;
                    delete oOpr.bStdKeyReq;
                    delete oOpr.bTiconCalInPrg;
                    delete oOpr.bLongText_isFormatted; //deleting additional properties.
                    delete oOpr.SyncOprText;
                    delete oOpr.bOPenPRTBtnEnable;
                    delete oOpr.isUiNew;
                    return oOpr;
                }
            },
            /*Description : This method is used copy to paste from clipboard in PRT Matrix Table.*/
            fnCopyPastePRT: function (oEvent) {
                var that = this,
                    oCopiedPRTObj = [];
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel"),
                    aPRT = oOperationItemsModel.getProperty('/aPRTManageTableData/Items');
                //To get Highest Item Document number of the PRT Matrix Table.
                var iPRTDocItemMaxNo = aPRT.reduce((max, item) => Math.max(max, item.Psnfh), 0);
                //Stting it to make it Global scope , to use it while populating the prefilled values after OData call.
                oVisibilityModel.setProperty('/sPRTMatrixDocNum', iPRTDocItemMaxNo);
                navigator.clipboard.readText().then(function (text) {
                    var aRowData = text.split("\r\n");
                    var aPRTData = aRowData.filter(function (item) {
                        //Filtering out the items which have values.
                        return item.trim() !== "";
                    });
                    for (var i = 0; i < aPRTData.length; i++) {
                        var item = aPRTData[i];
                        var sSplitedPrtItem = item.split('\t');
                        var sSplitedPrt = that.fnPreparePayloadForAddedPRT(sSplitedPrtItem);
                        if (sSplitedPrt === 0) {
                            //Returning to stop execution if there is an error , preventing further logic execution.
                            return 0;
                        } else {
                            oCopiedPRTObj.push(sSplitedPrt);
                        }
                    }
                    that.fnCopyPastePRTValidate(oCopiedPRTObj);
                });
            },
            /*Description : Function to create payload to validate the Copied Values.*/
            fnPreparePayloadForAddedPRT: function (sSplitedPrtItem) {
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sFieldMismatch = oBundle.getText('prtClipBoard.FieldMismatch'),
                    sDocMat = oBundle.getText('prtClipBoard.sDocMat'),
                    sOk = oBundle.getText("update.ok");
                var VISIBILITY_MODEL_PROPERTIES = {
                    ITEM_DOC: oVisibilityModel.getProperty('/bItemDoc'),
                    PRT_CAT: oVisibilityModel.getProperty('/bPRTCat'),
                    DOC_TYPE: oVisibilityModel.getProperty('/bdocType'),
                    CTRL_KEY: oVisibilityModel.getProperty('/bctrlKey'),
                    PRT_DOC: oVisibilityModel.getProperty('/bPrtDoc'),
                    PRT_MAT: oVisibilityModel.getProperty('/bPrtMat'),
                    PRT_DOC_PART: oVisibilityModel.getProperty('/bPrtDocPart'),
                    PRT_DOC_VER: oVisibilityModel.getProperty('/bPrtDocVer'),
                    PRT_DOC_STAT: oVisibilityModel.getProperty('/bPrtDocStat'),
                    PRT_DESC: oVisibilityModel.getProperty('/bPrtDesc'),
                    PRT_TXT_PRO: oVisibilityModel.getProperty('/bPrtTxtPro'),
                    PRT_STD_KEY: oVisibilityModel.getProperty('/bPrtStdKey'),
                    PRT_PLNT: oVisibilityModel.getProperty('/bPrtPlnt'),
                    PRT_QNTY: oVisibilityModel.getProperty('/bPrtQnty')
                };
                //Gets the total number of selected checkboxes as 'true' in the VISIBILITY_MODEL_PROPERTIES.
                var rowSelectCount = Object.values(VISIBILITY_MODEL_PROPERTIES).filter(Boolean).length;
                oVisibilityModel.setProperty('/oCheckBoxProperties', VISIBILITY_MODEL_PROPERTIES);
                var iterator = 0, obj = {};
                /*Below condition checks if there is mismatch of copied data and checboxes selection. 
                                    Error message when both copied data is more than Checkbox selected.
                */
                if (rowSelectCount > Object.keys(VISIBILITY_MODEL_PROPERTIES).length) {
                    //Ensure document focus to set the focus to PRT Matrix dialog.
                    sap.ui.getCore().byId('PrtMatrixDialog').focus();
                    MessageBox.warning(sFieldMismatch, {
                        actions: [sOk],
                        emphasizedAction: sOk,
                        onClose: function (sAction) {
                            return 0;
                        }
                    });
                    return 0;

                } else {
                    /*Description : Taking property boolean value , the value of the property field and Field name to check 
                    and fill the data based on the conditions.*/
                    function fnFillValue(prop, val, field) {
                        //Avoiding value to be undefined.
                        val = val === undefined ? "" : val;
                        //Switch case to check the column selection to prefill the value.
                        switch (field) {
                            case "ITEM_DOC":
                                var iItemDoc = Number(oVisibilityModel.getProperty('/sPRTMatrixDocNum')) + 10;
                                iItemDoc = iItemDoc.toString().padStart(4, '0');
                                if (prop === true) {
                                    iterator++;
                                    if (val !== "") {
                                        val = parseInt(val);
                                        if (isNaN(val)) {
                                            val = iItemDoc;
                                            oVisibilityModel.setProperty('/sPRTMatrixDocNum', iItemDoc);
                                        } else {
                                            val = val < 999 ? val.toString().padStart(4, '0') : val.toString();
                                        }
                                        return val;
                                    } else {
                                        oVisibilityModel.setProperty('/sPRTMatrixDocNum', iItemDoc);
                                        return parseInt(iItemDoc) > 9999 ? '' : iItemDoc;
                                    }
                                } else {
                                    oVisibilityModel.setProperty('/sPRTMatrixDocNum', iItemDoc);
                                    return parseInt(iItemDoc) > 9999 ? '' : iItemDoc;
                                }
                            case "PRT_DOC_PART": if (prop === true) {
                                iterator++;
                                if (val.length > 3) {
                                    return val.slice(0, 3);
                                }
                                else {
                                    return val.toString().padStart(3, '0');
                                }
                            } else {
                                return '';
                            }
                            case "PRT_DOC_VER": if (prop === true) {
                                iterator++;
                                if (val.length > 2) {
                                    return val.slice(0, 2);
                                }
                                else {
                                    return val.toString().padStart(2, '0');
                                }
                            } else {
                                return '';
                            }
                            case "DOC_TYPE": if (prop === true) {
                                iterator++;
                                if (val.length > 3) {
                                    return val.slice(0, 3);
                                }
                                else {
                                    return val;
                                }
                            } else {
                                return '';
                            }
                            case "PRT_DOC_STAT": if (prop === true) {
                                iterator++;
                                if (val.length > 2) {
                                    return val.slice(0, 2);
                                }
                                else {
                                    return val;
                                }
                            } else {
                                return '';
                            }
                            case "CTRL_KEY": if (prop === true) {
                                iterator++;
                                if (val.length > 4) {
                                    return val.slice(0, 4);
                                }
                                else {
                                    return val;
                                }
                            } else {
                                return '';
                            }
                            case "PRT_STD_KEY": if (prop === true) {
                                iterator++;
                                if (val.length > 7) {
                                    return val.slice(0, 7);
                                }
                                else {
                                    return val;
                                }
                            } else {
                                return '';
                            }
                            case "PRT_PLNT": if (prop === true) {
                                iterator++;
                                if (val.length > 4) {
                                    return val.slice(0, 4);
                                }
                                else {
                                    return val;
                                }
                            } else {
                                return '';
                            }
                            case "PRT_CAT":
                                if (prop === true) {
                                    iterator++;
                                    if (val != 'M' && val != 'D') {
                                        return '';
                                    }
                                    else {
                                        return val;
                                    }
                                } else {
                                    return '';
                                }

                            case "PRT_QNTY":
                                if (prop === true) {
                                    iterator++;
                                    if (val != '') {
                                        if (isNaN(val)) {
                                            return '1'
                                        } else {
                                            return val.toString();
                                        }
                                    } else {
                                        return '1';
                                    }
                                } else {
                                    return '1';
                                }
                            default:
                                if (prop === true) {
                                    iterator++;
                                    return val;
                                } else {
                                    return '';
                                }
                        }
                    };
                    //Loop to prepare the payload to send to backend validation.
                    for (iterator; iterator < rowSelectCount; iterator++) {
                        obj = {
                            Loekz: false,
                            Psnfh: fnFillValue(VISIBILITY_MODEL_PROPERTIES.ITEM_DOC, sSplitedPrtItem[iterator], 'ITEM_DOC'),
                            Fhmar: fnFillValue(VISIBILITY_MODEL_PROPERTIES.PRT_CAT, sSplitedPrtItem[iterator], 'PRT_CAT'),
                            Dokar: fnFillValue(VISIBILITY_MODEL_PROPERTIES.DOC_TYPE, sSplitedPrtItem[iterator], 'DOC_TYPE'),
                            Steuf: fnFillValue(VISIBILITY_MODEL_PROPERTIES.CTRL_KEY, sSplitedPrtItem[iterator], 'CTRL_KEY'),
                            Doknr: fnFillValue(VISIBILITY_MODEL_PROPERTIES.PRT_DOC, sSplitedPrtItem[iterator], 'PRT_DOC'),
                            Sfhnr: fnFillValue(VISIBILITY_MODEL_PROPERTIES.PRT_MAT, sSplitedPrtItem[iterator], 'PRT_MAT'),
                            Doktl: fnFillValue(VISIBILITY_MODEL_PROPERTIES.PRT_DOC_PART, sSplitedPrtItem[iterator], 'PRT_DOC_PART'),
                            Dokvr: fnFillValue(VISIBILITY_MODEL_PROPERTIES.PRT_DOC_VER, sSplitedPrtItem[iterator], 'PRT_DOC_VER'),
                            Dokst: fnFillValue(VISIBILITY_MODEL_PROPERTIES.PRT_DOC_STAT, sSplitedPrtItem[iterator], 'PRT_DOC_STAT'),
                            Fhktx: fnFillValue(VISIBILITY_MODEL_PROPERTIES.PRT_DESC, sSplitedPrtItem[iterator], 'PRT_DESC'),
                            Txtz1: fnFillValue(VISIBILITY_MODEL_PROPERTIES.PRT_TXT_PRO, sSplitedPrtItem[iterator], 'PRT_TXT_PRO'),
                            Ktsch: fnFillValue(VISIBILITY_MODEL_PROPERTIES.PRT_STD_KEY, sSplitedPrtItem[iterator], 'PRT_STD_KEY'),
                            Fhwrk: fnFillValue(VISIBILITY_MODEL_PROPERTIES.PRT_PLNT, sSplitedPrtItem[iterator], 'PRT_PLNT'),
                            Mgvgw: fnFillValue(VISIBILITY_MODEL_PROPERTIES.PRT_QNTY, sSplitedPrtItem[iterator], 'PRT_QNTY'),
                            Plnty: "",
                            Plnnr: "",
                            Plnal: "",
                            Prt_mass: "X",
                            Prt_color: "",
                            Mgeinh: "",
                            Matnr: "",
                            Dostx: "",
                            Matnr_Vstate: "",
                            Psnfh_Vstate: "",
                            Fhmar_Vstate: "",
                            Dokar_Vstate: "",
                            Steuf_Vstate: "",
                            Doknr_Vstate: "",
                            Doktl_Vstate: "",
                            Dokvr_Vstate: "",
                            Txtz1_Vstate: "",
                            Ktsch_Vstate: "",
                            Fhwrk_Vstate: "",
                            Mgvgw_Vstate: "",
                            Seen: "",
                            Del: "",
                            isChange: "",
                            isNew: "X"
                        };
                        obj.Fhmar = obj.Fhmar === '' ? (obj.Doknr !== "" && obj.Sfhnr !== "" ? '' : (obj.Doknr !== "" ? 'D' : (obj.Sfhnr !== "" ? 'M' : ''))) : obj.Fhmar;
                        obj.Fhwrk = obj.Sfhnr !== "" ? oRoutingHeaderModel.Plant : '';
                        obj.Mgvgw = obj.Mgvgw != '' ? (obj.Fhmar === 'M' || obj.Sfhnr !== "" ? obj.Mgvgw : '1') : '1';
                    }
                    return obj;
                }
            },
            /*Description : Function to prepare the payload to check and validate the PRT management popup.*/
            fnCopyPastePRTValidate: function (oCopiedPRTObj) {
                var that = this;
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails");
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel");
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel"),
                    oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    aPRT = oOperationItemsModel.getProperty('/aPRTManageTableData/Items');
                var OprList = oVisibilityModel.getProperty("/aOprList");
                var oPayloadCopyPaste = {
                    Plnty: oRoutingHeaderModel.Task_type,
                    Plnnr: oRoutingHeaderModel.Group_No,
                    Plnal: oRoutingHeaderModel.Grp_Cntr,
                    Validate: "X",
                    PRT_Copy_Paste: oCopiedPRTObj
                }
                var oDialogOpen = new sap.m.BusyDialog();
                oDialogOpen.open();
                oDataModel.create("/ET_OprCompSet", oPayloadCopyPaste, {
                    success: function (oData) {
                        var oValidatedPRT = oData.PRT_Copy_Paste.results;
                        //Loop to add validated PRT Results to the PRT Manage Popup.
                        for (var i = 0; i < oValidatedPRT.length; i++) {
                            //Ignoring the __metadata property of each row response and copying the remaining properties -  Object Destructuring.
                            var { __metadata, ...aoValidatedPRT } = oValidatedPRT[i];
                            if (aoValidatedPRT.Fhmar === "M") {
                                aoValidatedPRT.Dokar_Vstate = aoValidatedPRT.Dokar === "" ? "None" : "Error";
                                aoValidatedPRT.Doknr_Vstate = aoValidatedPRT.Doknr === "" ? "None" : "Error";
                                aoValidatedPRT.Doktl = "";
                                aoValidatedPRT.Dokvr = "";
                                aoValidatedPRT.Doktl_Vstate = "None";
                                aoValidatedPRT.Dokvr_Vstate = "None";
                            }
                            aoValidatedPRT.Steuf = aoValidatedPRT.Steuf_Vstate === "Error" ? "" : aoValidatedPRT.Steuf;
                            for (var j = 0; j < OprList.length; j++) {
                                aoValidatedPRT[OprList[j]] = false;
                            }
                            aPRT.unshift(aoValidatedPRT);
                        }
                        oOperationItemsModel.setProperty('/aPRTManageTableData/Items', aPRT);
                        oVisibilityModel.setProperty('/bPrtPlnt', oVisibilityModel.getProperty('/oCheckBoxProperties').PRT_MAT === true ? true : false);
                        oDialogOpen.close();
                    }.bind(this),
                    error: function (error) {
                        oDialogOpen.close();
                        that.fnCheckError(error);
                    }.bind(this)
                });
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : 1. Function to handle selection of check box in prt manager.
            *               2. Maintains the order of the columns.*/
            fnPrtCheckboxChange: function (oEvent) {
                var that = this;
                var selectedCheckboxes = [];
                var newColumnOrder = [];
                var oPRTTable = sap.ui.getCore().byId("idPRTManageTable");
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel");
                var checkboxIds = oVisibilityModel.getProperty('/aPrtCheckBox');
                checkboxIds.forEach(function (id) {
                    var checkbox = sap.ui.getCore().byId(id);
                    if (checkbox.getSelected()) {
                        selectedCheckboxes.push(id);
                        //Mapping checkbox IDs to column IDs , to maintain the order of the columns.
                        switch (id) {
                            case "idItemDoc":
                                newColumnOrder.push("Psnfh");
                                break;
                            case "idPRTCat":
                                newColumnOrder.push("Fhmar");
                                break;
                            case "iddocType":
                                newColumnOrder.push("Dokar");
                                break;
                            case "idctrlKey":
                                newColumnOrder.push("Steuf");
                                break;
                            case "idPrtDoc":
                                newColumnOrder.push("Doknr");
                                break;
                            case "idPrtMat":
                                newColumnOrder.push("Sfhnr");
                                break;
                            case "idPrtDocPart":
                                newColumnOrder.push("Doktl");
                                break;
                            case "idPrtDocVer":
                                newColumnOrder.push("Dokvr");
                                break;
                            case "idPrtDocStat":
                                newColumnOrder.push("Dokst");
                                break;
                            case "idPrtDesc":
                                newColumnOrder.push("Fhktx");
                                break;
                            case "idPrtTxtPro":
                                newColumnOrder.push("Txtz1");
                                break;
                            case "idPrtStdKey":
                                newColumnOrder.push("Ktsch");
                                break;
                            case "idPrtPlnt":
                                newColumnOrder.push("Fhwrk");
                                break;
                            case "idPrtQnty":
                                newColumnOrder.push("Mgvgw");
                                break;
                            default:
                                break;
                        }
                    }
                });
                //Update the table columns visibility as per checkbox selection.
                oPRTTable.getColumns().forEach(function (column) {
                    var columnId = column.getSortProperty();
                    //Condition placed to ignore the Operation Checkbox columns.
                    if (columnId.trim() !== "") {
                        column.setVisible(newColumnOrder.includes(columnId));
                    }
                });
            },
            /*Description : This method is used  to select and deselect all the column visibility.*/
            fnSelectAllPrtMat: function (oEvent) {
                var oVisibilityModel = this.getOwnerComponent().getModel("oVisibilityModel");
                oEvent.preventDefault(true);
                var VISIBILITY_MODEL_PROPERTIES = {
                    ITEM_DOC: '/bItemDoc',
                    PRT_CAT: '/bPRTCat',
                    DOC_TYPE: '/bdocType',
                    CTRL_KEY: '/bctrlKey',
                    PRT_MAT: '/bPrtMat',
                    PRT_DOC: '/bPrtDoc',
                    PRT_DOC_PART: '/bPrtDocPart',
                    PRT_DOC_VER: '/bPrtDocVer',
                    PRT_DOC_STAT: '/bPrtDocStat',
                    PRT_DESC: '/bPrtDesc',
                    PRT_TXT_PRO: '/bPrtTxtPro',
                    PRT_STD_KEY: '/bPrtStdKey',
                    PRT_PLNT: '/bPrtPlnt',
                    PRT_QNTY: '/bPrtQnty'
                };
                function setMultipleProperties(oVisibilityModel, properties, value) {
                    Object.values(properties).forEach(prop => oVisibilityModel.setProperty(prop, value));
                }
                if (oVisibilityModel.getProperty('/isAllSelected')) {
                    // Deselect all
                    setMultipleProperties(oVisibilityModel, VISIBILITY_MODEL_PROPERTIES, false);
                    oVisibilityModel.setProperty('/isAllSelected', false);
                } else {
                    // Select all
                    setMultipleProperties(oVisibilityModel, VISIBILITY_MODEL_PROPERTIES, true);
                    oVisibilityModel.setProperty('/isAllSelected', true);
                }
            },
            /*Description : Row selection function for the PRT Management Table*/
            fnPRTRowSelect: function (oEvent) {
                var oTable = sap.ui.getCore().byId("idPRTManageTable")
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var aSelectedItems = oTable.getSelectedIndices();
                if (aSelectedItems.length > 0) {
                    //setting the delete button to enable only when one or more rows are selected .
                    aOperationItems.setProperty('/aPRTManageTableData/DelPrt', true);
                } else {
                    aOperationItems.setProperty('/aPRTManageTableData/DelPrt', false);
                }
            },
            /*Description : Open directly selected PRT documents in new Table..*/
            fnPRTDocOpen: function (oEvent) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var sPRTPath = sPath + "/PRT/results/";
                var aFilters = [];
                var aSelectedIndices = oEvent.getSource().getParent().getParent().getSelectedIndices();
                var sSelect5PRTs = oBundle.getText("Select5PRTs");
                if (aSelectedIndices.length > 5) {
                    MessageToast.show(sSelect5PRTs);
                } else {
                    for (var i = 0; i < aSelectedIndices.length; i++) {
                        var aTableRowData = oOperationItemsModel.getProperty(sPRTPath + aSelectedIndices[i]);
                        aFilters.push(
                            new sap.ui.model.Filter(
                                "Dokar",
                                sap.ui.model.FilterOperator.EQ,
                                aTableRowData.Dokar
                            )
                        );
                        aFilters.push(
                            new sap.ui.model.Filter(
                                "Doknr",
                                sap.ui.model.FilterOperator.EQ,
                                aTableRowData.Doknr
                            )
                        );
                        aFilters.push(
                            new sap.ui.model.Filter(
                                "Doktl",
                                sap.ui.model.FilterOperator.EQ,
                                aTableRowData.Doktl
                            )
                        );
                        aFilters.push(
                            new sap.ui.model.Filter(
                                "Dokvr",
                                sap.ui.model.FilterOperator.EQ,
                                aTableRowData.Dokvr
                            )
                        );
                        aFilters.push(
                            new sap.ui.model.Filter(
                                "Select",
                                sap.ui.model.FilterOperator.EQ,
                                "X"
                            )
                        );
                    }
                    var oParameters = {
                        filters: aFilters,
                        async: true,
                        success: function (oData) {
                            var aMessage = [];
                            var oMessageManager = sap.ui.getCore().getMessageManager();
                            oMessageManager.removeAllMessages();
                            for (var i = 0; i < oData.results.length; i++) {
                                var sURLs = oData.results[i].URL;
                                var sMessage = oData.results[i].Message;
                                var sDoknr = oData.results[i].Doknr;
                                if (sURLs !== "") {
                                    window.open(sURLs, "_blank");
                                } else {
                                    aMessage.push(sMessage + " " + sDoknr + " ");
                                    MessageToast.show(aMessage);
                                    oMessageManager.addMessages(
                                        new Message({
                                            message: sMessage + " " + sDoknr,
                                        })
                                    );
                                }
                            }
                        },
                    };
                    oDataModel.read("/ET_PRT_URLSet", oParameters);
                }
            },
            /*Description : Open directly selected PRT documents in new Tab*/
            fnPRTWebGUIOpen: function (oEvent) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var sPRTPath = sPath + "/PRT/results/";
                var aSelectedIndices = oEvent.getSource().getParent().getParent().getSelectedIndices();
                var sSelect5PRTs = oBundle.getText("Select5PRTs");
                if (aSelectedIndices.length > 5) {
                    MessageToast.show(sSelect5PRTs);
                } else {
                    var aPRTSelected = [];
                    for (var j = 0; j < aSelectedIndices.length; j++) {
                        var aTableRowData = oOperationItemsModel.getProperty(sPRTPath + aSelectedIndices[j]);
                        var sDoknr = aTableRowData.Doknr;
                        var sDokar = aTableRowData.Dokar;
                        var sDoktl = aTableRowData.Doktl;
                        var sDokvr = aTableRowData.Dokvr;
                        aPRTSelected.push(sDoknr);
                        aPRTSelected.push(sDokar);
                        aPRTSelected.push(sDoktl);
                        aPRTSelected.push(sDokvr);
                    }
                    var aFilters = [
                        new sap.ui.model.Filter("TCode", FilterOperator.EQ, "CV03N"),
                    ];
                    var oParameters = {
                        filters: aFilters,
                        async: true,
                        success: function (oData) {
                            for (var i = 0; i < aPRTSelected.length; i++) {
                                var Doknr = aPRTSelected[i];
                                i = i + 1;
                                var Dokar = aPRTSelected[i];
                                i = i + 1;
                                var Doktl = aPRTSelected[i];
                                i = i + 1;
                                var Dokvr = aPRTSelected[i];
                                var sURLs = oData.results[0].Link;
                                sap.m.URLHelper.redirect(
                                    sURLs +
                                    "?%20DRAW-DOKNR=" +
                                    Doknr +
                                    "&DRAW-DOKAR=" +
                                    Dokar +
                                    "&DRAW-DOKTL=" +
                                    Doktl +
                                    "&DRAW-DOKVR=" +
                                    Dokvr +
                                    "&~OKCODE=/00#",
                                    true
                                );
                            }
                        },
                        error: function (error) {
                            this.fnCheckError(error);
                        },
                    };
                    oDataModel.read("/ET_Web_GuiSet", oParameters);
                }
            },
            /*This method used to Copy PRTs in Operation*/
            fnCopyPRT: function (oEvent) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oTable = oEvent.getSource().getParent().getParent();
                var sPath = oTable.getBindingContext("oOperationItemsModel").getPath();
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var sPRTpath = sPath + "/PRT/results/";
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                //get Seleted indices from the PRT table
                var aSelectedIndices = oTable.getSelectedIndices();
                var oTableRow,
                    aSelectedRowsToCopy = [];
                //get previous table instances if any
                var aTableInstances = oRoutingModel.getProperty("/aTableInstances") || [];
                if (aSelectedIndices.length === 0) {
                    //show message if no items selected from PRT table
                    MessageBox.error(oBundle.getText("selectAtLeastOne"));
                } else {
                    // oTable to table instance list
                    aTableInstances.push(oTable);
                    oRoutingModel.setProperty("/aTableInstances", aTableInstances);
                    for (var i = 0; i < aSelectedIndices.length; i++) {
                        //Set each selected row in an array
                        oTableRow = oOperationItemsModel.getProperty(sPRTpath + aSelectedIndices[i]);
                        //copy properties from selected row
                        var oItem = {
                            Dokar: oTableRow.Dokar,
                            Doknr: oTableRow.Doknr,
                            Doktl: oTableRow.Doktl,
                            Dokvr: oTableRow.Dokvr,
                            Fhktx: oTableRow.Fhktx,
                            Fhmar: oTableRow.Fhmar,
                            Fhwrk: oTableRow.Fhwrk,
                            Loekz: oTableRow.Loekz,
                            Matnr: oTableRow.Matnr,
                            Mgeinh: oTableRow.Mgeinh,
                            Mgvgw: oTableRow.Mgvgw,
                            Psnfh: oTableRow.Psnfh,
                            Steuf: oTableRow.Steuf,
                            Txtz1: oTableRow.Txtz1,
                            Vornr: "",
                            sRefOpr: oTableRow.sRefOpr,
                            Doknr_Vstate: oTableRow.Doknr_Vstate,
                            Doktl_Vstate: oTableRow.Doktl_Vstate,
                            Dokvr_Vstate: oTableRow.Dokvr_Vstate,
                            Ktsch: oTableRow.Ktsch,
                        };
                        aSelectedRowsToCopy.push(oItem);
                    }
                    oRoutingModel.setProperty("/aSelectedRowsToCopy", aSelectedRowsToCopy);
                    sap.m.MessageToast.show(oBundle.getText("itemsCopied"));
                }
            },
            /*This method used to Paste PRTs in Operation*/
            fnPastePRT: function (oEvent) {
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var sOprNum = aOperationItems.getProperty(sPath + "/Vornr");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                //get previous table instances if any
                var aTableInstances = oRoutingModel.getProperty("/aTableInstances") || [];
                if (sPath) {
                    var sPRTpath = sPath + "/PRT/results";
                    var aPRT = aOperationItems.getProperty(sPRTpath) || [];
                    //get the copied PRTs
                    var aRowsToPaste = JSON.parse(
                        JSON.stringify(
                            this.getView()
                                .getModel("oRoutingModel")
                                .getProperty("/aSelectedRowsToCopy")
                        )
                    );
                    //to add rows to the top of the table in correct order
                    aRowsToPaste.reverse();
                    if (aRowsToPaste.length !== 0) {
                        for (var i = 0; i < aRowsToPaste.length; i++) {
                            //set the operation number to that of current operation
                            aRowsToPaste[i].Vornr = sOprNum;
                            //set isNew to 'X' to make the row editable
                            aRowsToPaste[i].isNew = "X";
                            //v2.0 change add flag to detrmine true or false
                            aRowsToPaste[i].bEnable = "X";
                            //adding Prt_mass to X is mass update user pasting records
                            aRowsToPaste[i].Prt_mass = "X";
                            //add row to the top of the PRT table
                            aPRT.unshift(aRowsToPaste[i]);
                        }
                        aOperationItems.setProperty(sPRTpath, aPRT);
                        aOperationItems.refresh();
                    }
                    //clear table selection after paste
                    oEvent.getSource().getParent().getParent().clearSelection();
                    //clear all table selections
                    for (var j = 0; j < aTableInstances.length; j++) {
                        aTableInstances[j].clearSelection();
                    }
                    oRoutingModel.setProperty("/aTableInstances", []);
                }
            },
            /*This method used to drag and drop PRTs to another operation*/
            fnPRTDrop: function (oEvent) {
                var oDraggedControl = oEvent.getParameter("draggedControl");
                var oDroppedControl = oEvent.getParameter("droppedControl");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oTableDrag = oDraggedControl.getParent();
                var oTableDrop = oDroppedControl.getParent();
                var sPathDrag = oTableDrag.getBindingContext("oOperationItemsModel").getPath();
                var sPathDrop = oTableDrop.getBindingContext("oOperationItemsModel").getPath();
                var sOprNumDrag = oOperationItemsModel.getProperty(sPathDrag + "/Vornr");
                var sOprNumDrop = oOperationItemsModel.getProperty(sPathDrop + "/Vornr");
                var sVplnrDrop = oDroppedControl.getBindingContext("oOperationItemsModel").getProperty("Vplnr") || "";
                var sVplnrDrag = oDraggedControl.getBindingContext("oOperationItemsModel").getProperty("Vplnr") || "";
                //get previous table instances if any
                var aTableInstances = oRoutingModel.getProperty("/aTableInstances") || [];
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                //to not allow user to drop in same table or reference operation
                if (
                    sVplnrDrag !== "" ||
                    sVplnrDrop !== "" ||
                    sOprNumDrag === sOprNumDrop
                ) {
                    return;
                } else {
                    aTableInstances.push(oTableDrag);
                    var aSelectedIndices = oTableDrag.getSelectedIndices() || [];
                    var aPRTDrag =
                        JSON.parse(
                            JSON.stringify(
                                oOperationItemsModel.getProperty(sPathDrag + "/PRT/results")
                            )
                        ) || [];
                    var aPRTDrop =
                        oOperationItemsModel.getProperty(sPathDrop + "/PRT/results") || [];
                    var aDraggedRows = [],
                        oTableRow;
                    //Add index to aSelectedIndex even if no item is selected in table
                    if (aSelectedIndices.length === 0) {
                        var sIndex = oDraggedControl.getBindingContext("oOperationItemsModel").sPath.split("/").slice(-1)[0];
                        aSelectedIndices.push(parseInt(sIndex, 10));
                    }
                    //get data from rows that are dragged
                    for (var i = 0; i < aSelectedIndices.length; i++) {
                        //Set each selected row in an array
                        oTableRow = aPRTDrag[aSelectedIndices[i]];
                        //copy properties from selected row
                        var oItem = {
                            Dokar: oTableRow.Dokar,
                            Doknr: oTableRow.Doknr,
                            Doktl: oTableRow.Doktl,
                            Dokvr: oTableRow.Dokvr,
                            Fhktx: oTableRow.Fhktx,
                            Fhmar: oTableRow.Fhmar,
                            Fhwrk: oTableRow.Fhwrk,
                            Loekz: oTableRow.Loekz,
                            Matnr: oTableRow.Matnr,
                            Mgeinh: oTableRow.Mgeinh,
                            Mgvgw: oTableRow.Mgvgw,
                            Psnfh: oTableRow.Psnfh,
                            Steuf: oTableRow.Steuf,
                            Txtz1: oTableRow.Txtz1,
                            Vornr: "",
                            sRefOpr: oTableRow.sRefOpr,
                            Doknr_Vstate: oTableRow.Doknr_Vstate,
                            Doktl_Vstate: oTableRow.Doktl_Vstate,
                            Dokvr_Vstate: oTableRow.Dokvr_Vstate,
                            bEnable: true, //v2.0 changes for enabling the unsaved fields
                            Ktsch: oTableRow.Ktsch, //V2.3 changes
                        };
                        aDraggedRows.push(oItem);
                    }
                    aDraggedRows.reverse();
                    for (var j = 0; j < aDraggedRows.length; j++) {
                        //set the operation number to that of current operation
                        aDraggedRows[j].Vornr = sOprNumDrop;
                        //set isNew to 'X' to make the row editable
                        aDraggedRows[j].isNew = "X";
                        //add row to the top of the PRT table
                        aPRTDrop.unshift(aDraggedRows[j]);
                    }
                    oOperationItemsModel.setProperty(sPathDrop + "/PRT/results", aPRTDrop);
                    oOperationItemsModel.refresh();
                    //clear selection after drop
                    //clear all table selections
                    for (var k = 0; k < aTableInstances.length; k++) {
                        aTableInstances[k].clearSelection();
                    }
                    oRoutingModel.setProperty("/aTableInstances", []);
                }
            },
            /*This method used to row in PRT*/
            fnADDPRT: function (oEvent) {
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var sOprNum = aOperationItems.getProperty(sPath + "/Vornr");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (sPath) {
                    var sPRTpath = sPath + "/PRT/results";
                    var aPRT = aOperationItems.getProperty(sPRTpath) || [];
                    if (aPRT.length > 0) {
                        var iDocNumber = Number(aPRT[0].Psnfh) > Number(aPRT[aPRT.length - 1].Psnfh)
                            ? Number(aPRT[0].Psnfh)
                            : Number(aPRT[aPRT.length - 1].Psnfh) || 10;
                        iDocNumber = iDocNumber + 10;
                        iDocNumber = iDocNumber + "";
                    } else {
                        iDocNumber = "10";
                    }
                    if (
                        this.getView().getModel("oOperationItemsModel").getProperty(sPath + "/aTempAddedDelButton") === true
                    ) {
                        var oObjPRT = {
                            Psnfh: iDocNumber,
                            Fhmar: "D",
                            Doknr: "",
                            Doktl: "",
                            Dokvr: "",
                            Txtz1: "",
                            Fhktx: "",
                            Steuf: "",
                            Matnr: "",
                            Fhwrk: "",
                            Mgvgw: "1",
                            isNew: "X",
                            Prt_mass: "X",
                            Prt_color: "3",
                            Vornr: sOprNum,
                            Loekz: false,
                            sRefOpr: "",
                            bEnable: true, // V2.0 changes
                            Ktsch: "", // V2.3 changes
                        };
                        aPRT.unshift(oObjPRT);
                        aOperationItems.setProperty(sPRTpath, aPRT);
                        aOperationItems.refresh();
                    } else {
                        var oObj = {
                            Psnfh: iDocNumber,
                            Fhmar: "D",
                            Doknr: "",
                            Doktl: "",
                            Dokvr: "",
                            Txtz1: "",
                            Fhktx: "",
                            Steuf: "",
                            Matnr: "",
                            Fhwrk: "",
                            Mgvgw: "1",
                            isNew: "X",
                            Prt_mass: "X",
                            Prt_color: "",
                            Vornr: sOprNum,
                            Loekz: false,
                            sRefOpr: "",
                            bEnable: true, // V2.0 changes
                            Ktsch: "", // V2.3 changes 
                        };
                        aPRT.unshift(oObj);
                        aOperationItems.setProperty(sPRTpath, aPRT);
                        aOperationItems.refresh();
                    }
                }
            },
            /*This method used to Delete PRT's in operation*/
            fnDeletePRT: function (oEvent) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oTable = oEvent.getSource().getParent().getParent();
                var sPath = oTable.getBindingContext("oOperationItemsModel").getPath();
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                oRoutingModel.setProperty("/oTableSource", oTable);
                var sPRTpath = sPath + "/PRT/results";
                oRoutingModel.setProperty("/sPrtPath", sPRTpath);
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oSelectedIndices = oTable.getSelectedIndices();
                oRoutingModel.setProperty("/sPrtSelIndices", oSelectedIndices);
                var sTitle, sConfirmTxt, sCancel, sDel, sSelecttodel;
                sTitle = oBundle.getText("update.confirmdel");
                sCancel = oBundle.getText("update.cancel");
                sConfirmTxt = oBundle.getText("update.confirmdelprttxt");
                sDel = oBundle.getText("update.delete");
                sSelecttodel = oBundle.getText("update.selectprttodelete");
                if (oSelectedIndices.length > 0) {
                    if (!this.delPRTDialog) {
                        this.delPRTDialog = new sap.m.Dialog({
                            type: "Message",
                            title: sTitle,
                            content: new sap.m.Text({
                                text: sConfirmTxt,
                            }),
                            beginButton: new sap.m.Button({
                                type: sap.m.ButtonType.Reject,
                                text: sDel,
                                press: function () {
                                    var oTableRef = oRoutingModel.getProperty("/oTableSource");
                                    var sPRTPathRef = oRoutingModel.getProperty("/sPrtPath");
                                    var aSelectedIndicesRef = oRoutingModel.getProperty("/sPrtSelIndices");
                                    var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                                    oVisibilityModel.setProperty("/bUnsavedChange", true);
                                    aSelectedIndicesRef = aSelectedIndicesRef.reverse();
                                    aSelectedIndicesRef.map(function (index) {
                                        var sDocnum = oTableRef.getContextByIndex(index).getProperty("Psnfh");
                                        var bFlag = oTableRef.getContextByIndex(index).getProperty("Loekz");
                                        var isNew = oTableRef.getContextByIndex(index).getProperty("isNew");
                                        var sDokar = oTableRef.getContextByIndex(index).getProperty("Dokar");
                                        var sDoknr = oTableRef.getContextByIndex(index).getProperty("Doknr");
                                        var sDoktl = oTableRef.getContextByIndex(index).getProperty("Doktl");
                                        var sDokvr = oTableRef.getContextByIndex(index).getProperty("Dokvr");
                                        var sFhmar = oTableRef.getContextByIndex(index).getProperty("Fhmar");
                                        var sSteuf = oTableRef.getContextByIndex(index).getProperty("Steuf");
                                        var sFhktx = oTableRef.getContextByIndex(index).getProperty("Fhktx");
                                        var aPRTS = [];
                                        aPRTS = oOperationItemsModel.getProperty(sPRTPathRef) || [];
                                        var oPRTIndex = aPRTS.findIndex(function (oPRTItem) {
                                            return (
                                                oPRTItem.Psnfh === sDocnum && oPRTItem.Loekz === bFlag &&
                                                oPRTItem.Dokar === sDokar && oPRTItem.Doknr === sDoknr &&
                                                oPRTItem.Doktl === sDoktl && oPRTItem.Dokvr === sDokvr &&
                                                oPRTItem.Fhmar === sFhmar && oPRTItem.Steuf === sSteuf &&
                                                oPRTItem.Fhktx === sFhktx
                                            );
                                        });
                                        if (isNew !== "X") {
                                            var oBinding = oTableRef.getBinding("rows");
                                            aPRTS[oPRTIndex].Loekz = true; //Set delete flag
                                            aPRTS[oPRTIndex].Prt_mass = "X"; //Set mass update flag while deleting
                                            var filter = new sap.ui.model.Filter(
                                                "Loekz",
                                                sap.ui.model.FilterOperator.NE,
                                                true
                                            );
                                            oBinding.filter([filter]);
                                        } else {
                                            aPRTS.splice(oPRTIndex, 1);
                                        }
                                    });
                                    oOperationItemsModel.refresh();
                                    oTableRef.clearSelection(true);
                                    this.delPRTDialog.close();
                                }.bind(this),
                            }),
                            endButton: new sap.m.Button({
                                text: sCancel,
                                press: function () {
                                    this.delPRTDialog.close();
                                }.bind(this),
                            }),
                        });
                    }
                    this.delPRTDialog.open();
                } else {
                    MessageBox.error(sSelecttodel);
                }
            },
            /*Description : Modify Effectivity for PRT Area*/
            fnOnPressPRT: function (oEvent) {
                var oRoutingHeaderModel = this.getOwnerComponent().getModel("oRoutingHeaderModel"),
                    sBOMMatNumber = oRoutingHeaderModel.getProperty("/BOM/Material");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    oPath = sPath.substring(0, sPath.indexOf("/PRT")),
                    oPrtData = oOperationItemsModel.getProperty(sPath),
                    oOperationItem = oOperationItemsModel.getProperty(oPath),
                    sOprArbpl = oOperationItem.Arbpl,
                    sPRTVornr = oPrtData.Vornr,
                    sPRTPlnnr = oPrtData.Plnnr,//Plnnr
                    sPRTplnty = oPrtData.Plnty,//Plnty
                    sPRTplnkn = oPrtData.Plnkn,//Plnkn
                    sPRTPosnr = oPrtData.Psnfh,
                    sPRTKnobj = oPrtData.Knobj,
                    sPRTPsnfh = oPrtData.Psnfh,
                    sPRTPzlfh = oPrtData.Pzlfh;
                if (oOperationItem.S_Plnnr !== "") {
                    var sMsgNoDTimportOpr = this.getView().getModel("i18n").getResourceBundle().getText("update.MsgNoDTimportOpr");
                    sap.m.MessageToast.show(sMsgNoDTimportOpr, {
                        duration: 7000,
                        width: "68em",
                    });
                } else {
                    var sGrpCntr = oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr");
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilters = [
                        new sap.ui.model.Filter(
                            "TCode",
                            FilterOperator.EQ,
                            "ZM_MEAU_EFFCA02"
                        ),
                    ];
                    oDataModel.read("/ET_Web_GuiSet", {
                        filters: aFilters,
                        success: function (oData) {
                            var sLink = oData.results[0].Link;
                            sap.m.URLHelper.redirect(
                                sLink +
                                "?BOMOK=" +
                                sBOMMatNumber +
                                "&VORNR=" +
                                sPRTVornr +
                                "&PLNAL=" +
                                sGrpCntr +
                                "&PZLFH=" +
                                sPRTPzlfh +
                                "&ARBPL=" +
                                sOprArbpl +
                                "&PSNFH=" +
                                sPRTPsnfh +
                                "&PLNNR=" +
                                sPRTPlnnr +
                                "&PLNTY=" +
                                sPRTplnty +
                                "&PLNKN=" +
                                sPRTplnkn +
                                "&KNOBJ=" +
                                sPRTKnobj +
                                "&POSNR=" +
                                sPRTPosnr +
                                "&P_FLAG=PRT&~OKCODE=ONLI/#",
                                true
                            );
                        },
                    })
                };
            },
            /* This method used for validation of item number in PRT area*/
            fnValidateItemNumber: function (oEvent) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsgEmpty = oBundle.getText("update.itemnumberemptymsgs");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                var sMsg = oBundle.getText("update.itemnumber");
                var sValue = parseInt(oEvent.getSource().getValue(), 0);
                var sRegExp = /^\d*$/;
                var bMatched = sRegExp.test(sValue);
                var sPRTItemPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                if (sValue === "") {
                    oEvent.getSource().setValueState("Error");
                    oEvent.getSource().setValue(" ");
                } else if (!bMatched) {
                    oEvent.getSource().setValueState("Error");
                    oEvent.getSource().setValueStateText(sMsgEmpty);
                    oEvent.getSource().setValue("");
                } else if (sValue > 9999) {
                    oEvent.getSource().setValueState("Error");
                    oEvent.getSource().setValueStateText(sMsg);
                    oEvent.getSource().setValue("");
                } else {
                    oEvent.getSource().setValueState("None");
                    oVisibilityModel.setProperty("/Psnfh_Vstate", "");
                    oEvent.getSource().setValueStateText(" ");
                    if (sAction === 'PRT') {
                        oOperationItemsModel.setProperty(
                            sPRTItemPath + "/isChange", true);
                    }
                }
            },
            /*on change of PRT */
            fnChangePRTCategory: function (oEvent) {
                var sPRTCategory = oEvent.getSource().getSelectedKey();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPRTItemPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oOperationItemsModel.setProperty(sPRTItemPath + "/Fhmar_Vstate", "None");
                oOperationItemsModel.setProperty(sPRTItemPath + "/isChange", true);
                if (sPRTCategory === "D") {
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Sfhnr", ""); // Material 
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Mgvgw", "1"); // Quantity
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Matnr", ""); // Material
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Fhwrk", ""); // Plant
                    oOperationItemsModel.setProperty(sPRTItemPath + "/aPRTPlants", []); // Plant dropdown
                    //reset value state of material
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Matnr_Vstate", "None");
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Fhwrk_Vstate", "None");
                } else if (sPRTCategory === "M") {
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar", ""); // Document type
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr", ""); // Document
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl", ""); // Document Part
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr", ""); // Document Version
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Dokst", ""); // Document Status
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Fhktx", ""); // Document Description
                    //reset value state of document
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar_Vstate", "None");
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Dokst_Vstate", "None");
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr_Vstate", "None");
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl_Vstate", "None");
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr_Vstate", "None");
                }
                //Mat - ""  State - None 
                if (sAction === "PRT") {
                    if (sPRTCategory === "M") { // Material 
                        var sfhnrValue = oOperationItemsModel.getProperty(sPRTItemPath + "/Sfhnr");
                        var sfhnrVState = oOperationItemsModel.getProperty(sPRTItemPath + "/Matnr_Vstate");
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Matnr_Vstate", sfhnrVState === "Error" ? "Error" : (sfhnrValue === "" ? "Error" : "None"));
                        var sFhwrkValue = oOperationItemsModel.getProperty(sPRTItemPath + "/Fhwrk");
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Fhwrk_Vstate", sFhwrkValue === "" ? "Error" : "None");
                    } else if (sPRTCategory === "D") {
                        var sDocType = oOperationItemsModel.getProperty(sPRTItemPath + "/Dokar"); // Document type
                        var sDocTypeVState = oOperationItemsModel.getProperty(sPRTItemPath + "/Dokar_Vstate");
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar_Vstate", sDocTypeVState === "Error" ? "Error" : (sDocType === "" ? "Error" : "None"));
                        var sDoc = oOperationItemsModel.getProperty(sPRTItemPath + "/Doknr"); // Document
                        var sDocVState = oOperationItemsModel.getProperty(sPRTItemPath + "/Doknr_Vstate");
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr_Vstate", sDocVState === "Error" ? "Error" : (sDoc === "" ? "Error" : "None"));
                        var sDocPart = oOperationItemsModel.getProperty(sPRTItemPath + "/Doktl"); // Document Part
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl_Vstate", sDocPart === "" ? "Error" : "None");
                        var sDocVersion = oOperationItemsModel.getProperty(sPRTItemPath + "/Dokvr");
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr_Vstate", sDocVersion === "" ? "Error" : "None");
                    }
                }
            },
            /*Description : This function is used to change PRT Doc. type and validate the document, part and version on selection of type.*/
            fnChangePRTDocType: function (oEvent, sAction) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oDataModel = this.getView().getModel("oSrvModel");
                var sPRTItemPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var oVisibilityModel = this.getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (sPRTItemPath) {
                    //pre filling control key
                    var sSelType = oEvent.getSource().getSelectedKey();
                    var aTypesData = this.getOwnerComponent().getModel("oRoutingModel").getProperty("/aPRTTypeData");
                    var aSelectedItemCtrlKey = aTypesData.filter(function (oEle) {
                        return oEle["DOKAR"] === sSelType;
                    });
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Steuf", aSelectedItemCtrlKey[0].STEUF); // Control key
                    if (oOperationItemsModel.getProperty(sPRTItemPath + "/Steuf") !== "") {
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Steuf_Vstate", "None"); //PRT Copy paste
                    } else {
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Steuf_Vstate", "Error");
                    }
                    // Setting new property for prt managment popup
                    if (sAction === 'PRT') {
                        oOperationItemsModel.setProperty(sPRTItemPath + "/isChange", true);
                    }
                    var sDocument = oOperationItemsModel.getProperty(sPRTItemPath + "/Doknr");
                    var sDocumentPart = oOperationItemsModel.getProperty(sPRTItemPath + "/Doktl");
                    var sDocumentVersion = oOperationItemsModel.getProperty(sPRTItemPath + "/Dokvr");
                    var sDocumentDesc = oOperationItemsModel.getProperty(sPRTItemPath + "/Dokst");
                    var sDocumentStatus = oOperationItemsModel.getProperty(sPRTItemPath + "/Fhktx");
                    // If Document, version and part is empty don't make odata call
                    if (sDocument === "" && sDocumentPart === "" && sDocumentVersion === "" && sAction !== 'PRT') {
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar", oEvent.getParameters().value);// Document Type
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar_Vstate", "None");
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr", ""); // Document
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr_Vstate", "None");
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl", ""); // Document Part
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl_Vstate", "None");
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr", ""); // Document Version
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr_Vstate", "None");
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokst", ""); // Document Status
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Fhktx", ""); // Document Description
                    } else {
                        var aFilter = [
                            new Filter("Dokar", FilterOperator.EQ, oEvent.getParameters().value),
                            new Filter("Doknr", FilterOperator.EQ, sDocument),
                            new Filter("Doktl", FilterOperator.EQ, sDocumentPart),
                            new Filter("Dokvr", FilterOperator.EQ, sDocumentVersion)
                        ];
                        var oBusyIndicator = new BusyDialog();
                        oBusyIndicator.open();
                        oDataModel.read("/ET_PRT_ValidationSet", {
                            filters: aFilter,
                            success: function (oData) {
                                if (oData.results.length > 0) {
                                    //if document info is invalid on change of type make the document, part and version in red color else keep already selected info as it is 
                                    // Document Type vaildation
                                    if (oData.results[0].Dokar_Vstate === "None") {
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar", oData.results[0].Dokar);
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar_Vstate", oData.results[0].Dokar_Vstate);
                                    } else {
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar_Vstate", oData.results[0].Dokar_Vstate);
                                    }
                                    // Document vaildation
                                    if (oData.results[0].Doknr_Vstate === "None") {
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr", oData.results[0].Doknr);
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr_Vstate", oData.results[0].Doknr_Vstate);
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Fhktx", sDocumentStatus);
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokst", sDocumentDesc);
                                    } else {
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr_Vstate", oData.results[0].Doknr_Vstate);
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Fhktx", "");
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokst", "");
                                    }
                                    // Document Part vaildation
                                    if (oData.results[0].Dokvr_Vstate === "None") {
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr", oData.results[0].Dokvr);
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr_Vstate", oData.results[0].Dokvr_Vstate);
                                    } else {
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr_Vstate", oData.results[0].Dokvr_Vstate);
                                    }
                                    // Document Version vaildation
                                    if (oData.results[0].Doktl_Vstate === "None") {
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl", oData.results[0].Doktl);
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl_Vstate", oData.results[0].Doktl_Vstate);
                                    } else {
                                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl_Vstate", oData.results[0].Doktl_Vstate);
                                    }
                                }
                                oBusyIndicator.close();
                            }.bind(this),
                            error: function (error) {
                                this.fnCheckError(error);
                                oBusyIndicator.close();
                            },
                        });
                    }
                }
            },
            /*This method is triggered when control key is selected*/
            fnChangeControlKey: function (oEvent) {
                var sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (sAction === 'PRT') {
                    oOperationItemsModel.setProperty(sCurrentPath + "/isChange", true);
                    if (oOperationItemsModel.getProperty(sCurrentPath + "/Steuf") === "") {
                        oOperationItemsModel.setProperty(sCurrentPath + "/Steuf_Vstate", "Error");
                    } else {
                        oOperationItemsModel.setProperty(sCurrentPath + "/Steuf_Vstate", "None");
                    }
                } else {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Steuf_Vstate", "None");
                }
            },
            /*This method used to open dialog for operation header text*/
            fnDocumentValuehelp: function (oEvent, sAction) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPRTItemPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var aPRTItemPath = sPRTItemPath.split("/");
                if (sAction === 'PRT') {
                    var sPRTPath = "/" + aPRTItemPath[1] + "/" + aPRTItemPath[2] + "/PRT";
                } else {
                    var sPRTPath = "/" + aPRTItemPath[1] + "/" + aPRTItemPath[2];
                }
                sap.ui.getCore().AppContext = new Object();
                sap.ui.getCore().AppContext.sPRTPath = sPRTPath;
                oRoutingModel.setProperty("/selectedPRTItemPath", sPRTItemPath);
                var sDocType = oOperationItemsModel.getProperty(sPRTItemPath + "/Dokar") || "";
                var iDocumentNumber = oRoutingHeaderModel.getProperty("/docSearchNo") || "";
                var sDocumentDesc = oRoutingHeaderModel.getProperty("/docSearchText") || "";
                if (!this._DOCValueHelpDialog) {
                    this._DOCValueHelpDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.DocValueHelp", this);
                    this.getView().addDependent(this._DOCValueHelpDialog);
                }
                if (sap.ui.getCore().getConfiguration()) {
                    oRoutingHeaderModel.setProperty("/searchLangDocValueHelp", sap.ui.getCore().getConfiguration().getLanguage().toLocaleUpperCase());
                } else {
                    oRoutingHeaderModel.setProperty("/searchLangDocValueHelp", "");
                }
                var sLanguage = oRoutingHeaderModel.getProperty("/searchLangDocValueHelp");
                if (sLanguage === "ES") {
                    var sLang = "S";
                } else {
                    sLang = sLanguage;
                }
                var oBinding = this._DOCValueHelpDialog.getContent()[0].getBinding("items"),
                    oFilter = new Filter(
                        [
                            new Filter("DOKNR", FilterOperator.Contains, iDocumentNumber),
                            new Filter("DKTXT", FilterOperator.Contains, sDocumentDesc),
                            new Filter("DOKAR", FilterOperator.EQ, sDocType),
                            new Filter("LANGU", FilterOperator.EQ, sLang),
                        ],
                        true
                    );
                oBinding.filter(oFilter);
                this._DOCValueHelpDialog.open();
                sap.ui.getCore().byId("idDocttype").setValue(sDocType);
                var aDocSel = [];
                oRoutingHeaderModel.setProperty("/aSelectedDocs", aDocSel);
                sap.ui.getCore().byId("tabledocTexts").removeSelections();
                //Prefilling of 9 digits from Material should be available only for Key User, hence applying below condition
                var sKeyUser = oRoutingModel.getProperty("/keyUser");
                if (sKeyUser !== "X") {
                    var sMaterialNo = oRoutingHeaderModel.getProperty("/aHeaderDetails/Material");
                    var sDocSearchNo = sMaterialNo.toString();
                    var iDocSearchNo = sDocSearchNo.substring(0, 9);
                    var bDocNo = /^[a-zA-Z][0-9]{8}$/.test(iDocSearchNo);
                    if (bDocNo) {
                        oRoutingHeaderModel.setProperty("/docSearchNo", iDocSearchNo);
                    } else {
                        oRoutingHeaderModel.setProperty("/docSearchNo", "");
                    }
                    this.fnFilterPRTDocuments();
                }
            },
            /*on change of document  clear document corresponding fields*/
            fnChangePRTDocument: function (oEvent) {
                var sValue = oEvent.getSource().getValue();
                var oSelectedRow = oEvent.getSource().getSelectedRow();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPRTItemPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (sPRTItemPath) {
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr_Vstate", "None");
                    if (!sValue || sValue === "") {
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl", ""); // Document Part
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr", ""); // Document Version
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Fhktx", ""); // Document Description
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar", ""); // Type
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Steuf", ""); // Control key
                        return;
                    }
                    if (oSelectedRow) {
                        var oSelectedIndex = oSelectedRow.split("-").slice(-1)[0];
                        var oSelectedItem = oOperationItemsModel.getProperty(sPRTItemPath + "/aSuggestOperationDocumentNum")
                        [oSelectedIndex];
                        if (oSelectedItem) {
                            if (oSelectedItem.DOKNR === sValue) {
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl", oSelectedItem.DOKTL); // Document Part
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr", oSelectedItem.DOKVR); // Document Version
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Fhktx", oSelectedItem.DKTXT); // Document Description
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar", oSelectedItem.DOKAR); // Type
                                //pre filling control key
                                var sSelType = oSelectedItem.DOKAR;
                                var aTypesData = this.getOwnerComponent().getModel("oRoutingModel").getProperty("/aPRTTypeData");
                                var aSelectedItemCtrlKey = aTypesData.filter(function (oEle) {
                                    return oEle["DOKAR"] === sSelType;
                                });
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Steuf", aSelectedItemCtrlKey[0].STEUF); // Control key
                            } else {
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr_Vstate", "Error");
                                sap.m.MessageToast.show(oBundle.getText("prt.nodoc", [sValue]));
                            }
                        } else {
                            oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr_Vstate", "Error");
                            sap.m.MessageToast.show(oBundle.getText("prt.nodoc", [sValue]));
                        }
                    } else {
                        var sUrl = "/ET_DocumentSet";
                        var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                        //get language selected in launchpad
                        var sSelectedLang = "std." + sap.ui.getCore().getConfiguration().getLanguage();
                        var sLang = oBundle.getText(sSelectedLang);
                        var aFilter = [
                            new Filter("DOKNR", FilterOperator.EQ, sValue),
                            new Filter("LANGU", FilterOperator.EQ, sLang),
                        ];
                        oDataModel.read(sUrl, {
                            filters: aFilter,
                            success: function (oData) {
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl", oData.results[0].DOKTL); // Document Part
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr", oData.results[0].DOKVR); // Document Version
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Fhktx", oData.results[0].DKTXT); // Document Description
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar", oData.results[0].DOKAR); // Type
                                //pre filling control key
                                var sSelTypeRes = oData.results[0].DOKAR;
                                var aTypesDataRes = this.getOwnerComponent().getModel("oRoutingModel").getProperty("/aPRTTypeData");
                                var aSelectedItemCtrlKeyRes = aTypesDataRes.filter(function (
                                    oEle
                                ) {
                                    return oEle["DOKAR"] === sSelTypeRes;
                                });
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Steuf", aSelectedItemCtrlKeyRes[0].STEUF); // Control key
                            }.bind(this),
                            error: function (error) {
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr_Vstate", "Error");
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl", ""); // Document Part
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr", ""); // Document Version
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Fhktx", ""); // Document Description
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar", ""); // Type
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Steuf", ""); // Control key
                                sap.m.MessageToast.show(oBundle.getText("prt.nodoc", [sValue]));
                            },
                        });
                    }
                }
            },
            /*This method used to open dialog for operation header text*/
            fnDocumentValuehelp: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPRTItemPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var aPRTItemPath = sPRTItemPath.split("/");
                var sPRTPath = "/" + aPRTItemPath[1] + "/" + aPRTItemPath[2];
                sap.ui.getCore().AppContext = new Object();
                sap.ui.getCore().AppContext.sPRTPath = sPRTPath;
                oRoutingModel.setProperty("/selectedPRTItemPath", sPRTItemPath);
                var sDocType = oOperationItemsModel.getProperty(sPRTItemPath + "/Dokar") || "";
                var iDocumentNumber = oRoutingHeaderModel.getProperty("/docSearchNo") || "";
                var sDocumentDesc = oRoutingHeaderModel.getProperty("/docSearchText") || "";
                if (!this._DOCValueHelpDialog) {
                    this._DOCValueHelpDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.DocValueHelp", this
                    );
                    this.getView().addDependent(this._DOCValueHelpDialog);
                }
                if (sap.ui.getCore().getConfiguration()) {
                    oRoutingHeaderModel.setProperty("/searchLangDocValueHelp", sap.ui.getCore().getConfiguration().getLanguage().toLocaleUpperCase());
                } else {
                    oRoutingHeaderModel.setProperty("/searchLangDocValueHelp", "");
                }
                var sLanguage = oRoutingHeaderModel.getProperty("/searchLangDocValueHelp");
                if (sLanguage === "ES") {
                    var sLang = "S";
                } else {
                    sLang = sLanguage;
                }
                var oBinding = this._DOCValueHelpDialog.getContent()[0].getBinding("items"),
                    oFilter = new Filter(
                        [
                            new Filter("DOKNR", FilterOperator.Contains, iDocumentNumber),
                            new Filter("DKTXT", FilterOperator.Contains, sDocumentDesc),
                            new Filter("DOKAR", FilterOperator.EQ, sDocType),
                            new Filter("LANGU", FilterOperator.EQ, sLang),
                        ],
                        true
                    );
                oBinding.filter(oFilter);
                this._DOCValueHelpDialog.open();
                sap.ui.getCore().byId("idDocttype").setValue(sDocType);
                var aDocSel = [];
                oRoutingHeaderModel.setProperty("/aSelectedDocs", aDocSel);
                sap.ui.getCore().byId("tabledocTexts").removeSelections();
                //Prefilling of 9 digits from Material should be available only for Key User, hence applying below condition
                var sKeyUser = oRoutingModel.getProperty("/keyUser");
                if (sKeyUser !== "X") {
                    var sMaterialNo = oRoutingHeaderModel.getProperty("/aHeaderDetails/Material");
                    var sDocSearchNo = sMaterialNo.toString();
                    var iDocSearchNo = sDocSearchNo.substring(0, 9);
                    var bDocNo = /^[a-zA-Z][0-9]{8}$/.test(iDocSearchNo);
                    if (bDocNo) {
                        oRoutingHeaderModel.setProperty("/docSearchNo", iDocSearchNo);
                    } else {
                        oRoutingHeaderModel.setProperty("/docSearchNo", "");
                    }
                    this.fnFilterPRTDocuments();
                }
            },
            //Method for filtering by Language in Document value help (In table column When user clicks on ADD PRT button)
            fnFilterPRTDocuments: function () {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel"),
                    //Get value of Input search box
                    iDocumentNumber = oRoutingHeaderModel.getProperty("/docSearchNo") || "",
                    sDocumentDesc = oRoutingHeaderModel.getProperty("/docSearchText") || "",
                    // Changing the sDocType because we have added filter for document type in Search
                    sDocType = sap.ui.getCore().byId("idDocttype").getValue() || "",
                    sLang = oRoutingHeaderModel.getProperty("/searchLangDocValueHelp") || "",
                    oFilter = [],
                    oBinding = sap.ui.getCore().byId("tabledocTexts").getBinding("items");
                if (sLang === "ES") {
                    sLang = "S";
                }
                oFilter = new Filter(
                    [new Filter("DOKNR", FilterOperator.Contains, iDocumentNumber),
                    new Filter("DKTXT", FilterOperator.Contains, sDocumentDesc),
                    new Filter("DOKAR", FilterOperator.EQ, sDocType),
                    new Filter("LANGU", FilterOperator.EQ, sLang)
                    ], true);
                oBinding.filter(oFilter);
            },
            /*This method used validate document/part/version combination*/
            fnValidateDocument: function (oEvent) {
                var aFilter = [],
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                var sSelectedLang = "std." + sap.ui.getCore().getConfiguration().getLanguage();
                //get language selected in launchpad
                var sLang = oBundle.getText(sSelectedLang);
                var sDocPart = oOperationItemsModel.getProperty(sCurrentPath + "/Doktl"); // Document Part
                var sDocVer = oOperationItemsModel.getProperty(sCurrentPath + "/Dokvr"); // Document Version
                var sDocNum = oOperationItemsModel.getProperty(sCurrentPath + "/Doknr"); // Document number
                if (sDocPart && sDocPart !== "" && sDocVer && sDocVer !== "" && sDocNum && sDocNum !== "") {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    aFilter = [
                        new Filter("DOKNR", FilterOperator.EQ, sDocNum),
                        new Filter("DOKVR", FilterOperator.EQ, sDocVer),
                        new Filter("DOKTL", FilterOperator.EQ, sDocPart),
                        new Filter("LANGU", FilterOperator.EQ, sLang),
                    ];
                    oDataModel.read("/ET_DocumentSet", {
                        filters: aFilter,
                        success: function (oData) {
                            if (oData.results.length > 0) {
                                //oOperationItemsModel.setProperty(sCurrentPath + "/Doknr_Vstate", "None");
                                oOperationItemsModel.setProperty(sCurrentPath + "/Doktl_Vstate", "None");
                                oOperationItemsModel.setProperty(sCurrentPath + "/Dokvr_Vstate", "None");
                            } else {
                                oOperationItemsModel.setProperty(sCurrentPath + "/Doktl_Vstate", "Error");
                                oOperationItemsModel.setProperty(sCurrentPath + "/Dokvr_Vstate", "Error");
                                sap.m.MessageToast.show(
                                    oBundle.getText("prt.nocomb", [sDocPart, sDocVer, sDocNum])
                                );
                            }
                        }.bind(this),
                        error: function (error) {
                            oOperationItemsModel.setProperty(sCurrentPath + "/Doktl_Vstate", "Error");
                            oOperationItemsModel.setProperty(sCurrentPath + "/Dokvr_Vstate", "Error");
                            sap.m.MessageToast.show(
                                oBundle.getText("prt.nocomb", [sDocPart, sDocVer, sDocNum])
                            );
                        },
                    });
                }
            },
            /*Description : This method is used to set unsavedchange flag for Text for Production resources/tools PRT*/
            fnTextforproduction: function () {
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
            },
            /*Event handler for the value help stdKeys fragment*/
            fnOnStdKeyValueHelp: function (oEvent) {
                var oDialog = this.fnGetGenericValueHelpDialog(),
                    oResBundle = this.getView().getModel("i18n").getResourceBundle();
                oDialog.setTitle(oResBundle.getText("prt.selStdKey"));
                oDialog.removeAllColumns();
                var oItemTemplate = new sap.m.ColumnListItem({
                    type: "Active",
                    vAlign: "Middle",
                    cells: [
                        new sap.m.ObjectIdentifier({
                            text: "{oSrvModel>KTSCH}",
                        }),
                        new sap.m.Label({
                            text: "{oSrvModel>TXT}",
                        }),
                    ],
                });
                oDialog.insertColumn(
                    new sap.m.Column({
                        hAlign: "Begin",
                        header: new sap.m.Label({
                            text: oResBundle.getText("prt.stdKeyDesc"),
                        }),
                    })
                );
                oDialog.insertColumn(
                    new sap.m.Column({
                        hAlign: "Begin",
                        header: new sap.m.Label({
                            text: oResBundle.getText("prt.StdKey"),
                        }),
                    })
                );
                oDialog.bindAggregation("items", {
                    path: "oSrvModel>/ET_STD_TXT_KEY_F4Set",
                    template: oItemTemplate,
                });
                oDialog.open();
                this._GenValueHelpSearchFields = ["KTSCH"];
                this._oSource = oEvent.getSource();
            },
            /*Copy Multi Operations Function to get the Value help fragment*/
            fnGetGenericValueHelpDialog: function () {
                if (!this.oGenericDialogValueHelp) {
                    this.oGenericDialogValueHelp = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.GenericValueHelp", this
                    );
                    this.getView().addDependent(this.oGenericDialogValueHelp);
                }
                return this.oGenericDialogValueHelp;
            },
            /*on Change of material clear plant*/
            fnChangePRTMaterial: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPRTItemPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var sMaterial = oEvent.getParameter("value");
                var oSelectedRow = oEvent.getSource().getSelectedRow();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oOperationItemsModel.setProperty(sPRTItemPath + "/Fhwrk", "");
                if (sPRTItemPath) {
                    this.fnPopulatePRTPlant(sMaterial, sPRTItemPath);
                    if (oSelectedRow) {
                        var oSelectedIndex = oSelectedRow.split("-").slice(-1)[0];
                        var oSelectedItem = oOperationItemsModel.getProperty(sPRTItemPath + "/aSuggestMaterialNum")[oSelectedIndex];
                        if (oSelectedItem) {
                            if (oSelectedItem.Material === sMaterial) {
                                oSelectedItem = oOperationItemsModel.getProperty(sPRTItemPath + "/aSuggestMaterialNum")[oSelectedIndex];
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Fhwrk", oSelectedItem.Plant);
                            } else {
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Matnr_Vstate", "Error");
                                sap.m.MessageToast.show(
                                    oBundle.getText("prt.nomat", [sMaterial])
                                );
                            }
                        } else {
                            oOperationItemsModel.setProperty(sPRTItemPath + "/Matnr_Vstate", "Error");
                            sap.m.MessageToast.show(
                                oBundle.getText("prt.nomat", [sMaterial])
                            );
                        }
                    } else {
                        var sUrl = "/ET_PRT_MaterialSet";
                        var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                        var aFilter = [
                            new Filter("Material", FilterOperator.EQ, sMaterial),
                        ];
                        oDataModel.read(sUrl, {
                            filters: aFilter,
                            success: function (oData) {
                                if (oData.results.length > 0) {
                                    oOperationItemsModel.setProperty(sPRTItemPath + "/Fhwrk", oData.results[0].Plant);
                                } else {
                                    oOperationItemsModel.setProperty(sPRTItemPath + "/Matnr_Vstate", "Error");
                                    oOperationItemsModel.setProperty(sPRTItemPath + "/Fhwrk", "");
                                    sap.m.MessageToast.show(
                                        oBundle.getText("prt.nomat", [sMaterial])
                                    );
                                }
                            }.bind(this),
                            error: function (error) {
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Matnr_Vstate", "Error");
                                oOperationItemsModel.setProperty(sPRTItemPath + "/Fhwrk", "");
                                sap.m.MessageToast.show(
                                    oBundle.getText("prt.nomat", [sMaterial])
                                );
                            },
                        });
                    }
                }
            },
            /*This method triggerd on value hep for Material*/
            fnPRTMaterialhelp: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPRTItemPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                if (!this._oPRTDSValueHelpDialog) {
                    this._oPRTDSValueHelpDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.PRTDSValueHelp", this
                    );
                    this.getView().addDependent(this._oPRTDSValueHelpDialog);
                    this._oPRTDSValueHelpDialog.setModel("i18n");
                }
                oOperationItemsModel.setProperty("/SelectedPRTPath", sPRTItemPath);
                this._oPRTDSValueHelpDialog.open();
            },
            /*This method is used to get suggestion values for material*/
            fnGetMaterialLive: function (oEvent) {
                var aFilter,
                    sValue = oEvent.getSource().getValue(),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    oBundle = this.getView().getModel("i18n").getResourceBundle();
                oOperationItemsModel.setProperty(sCurrentPath + "/Matnr_Vstate", "None");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oOperationItemsModel.setProperty(sCurrentPath + "/Fhwrk", "");
                if (sValue) {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    aFilter = [new Filter("Material", FilterOperator.Contains, sValue)];
                    oOperationItemsModel.setProperty(sCurrentPath + "/aSuggestMaterialNum", []);
                    oDataModel.read("/ET_PRT_MaterialSet", {
                        filters: aFilter,
                        success: function (oData) {
                            if (oData.results.length > 0) {
                                oOperationItemsModel.setProperty(
                                    sCurrentPath + "/aSuggestMaterialNum",
                                    oData.results
                                );
                                oOperationItemsModel.refresh();
                            }
                        }.bind(this),
                        error: function (error) { },
                    });
                }
            },
            /*This method triggerd on value hep for plant*/
            fnPlantPRThelp: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPRTItemPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var sMaterial = oOperationItemsModel.getProperty(sPRTItemPath + "/Matnr");
                this.fnPopulatePRTPlant(sMaterial, sPRTItemPath);
                if (!this._oPRTPlantValueHelpDialog) {
                    this._oPRTPlantValueHelpDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.PRTPlantValueHelp", this
                    );
                    this.getView().addDependent(this._oPRTPlantValueHelpDialog);
                    this._oPRTPlantValueHelpDialog.setModel("i18n");
                }
                oOperationItemsModel.setProperty("/SelectedPRTPath", sPRTItemPath);
                this._oPRTPlantValueHelpDialog.open();
            },
            // Logic to validate PRT Quantity field.
            fnChangePRTQuantity: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPRTItemPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var iValue = oEvent.getSource().getValue();
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (iValue === "") {
                    oOperationItemsModel.setProperty(sPRTItemPath + "/Mgvgw_Vstate", "Error");
                }
            },
            /*This method opens messages dialog*/
            onMessagePopoverPress: function (oEvent) {
                this.fngetMessagePopover().openBy(oEvent.getSource());
            },
            /*This method initialises messagebox.*/
            fngetMessagePopover: function () {
                // create popover lazily (singleton)
                if (!this._oMessagePopover) {
                    // create popover lazily (singleton)
                    this._oMessagePopover = sap.ui.xmlfragment(this.getView().getId(),
                        "com.airbus.zcfe2meautorc.fragment.MessagePopover", this);
                    this.getView().addDependent(this._oMessagePopover);
                }
                return this._oMessagePopover;
            },
            /*This method used to create reference operations from existing S-routing*/
            fnCreateRefOpSet: function (oEvent) {
                if (!this._createRefOpSetDialog) {
                    this._createRefOpSetDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.CreateRefOpSet", this
                    );
                    this.getView().addDependent(this._createRefOpSetDialog);
                    this._createRefOpSetDialog.setModel(this.geti18nModel(), "i18nlocal");
                    this._createRefOpSetDialog.setModel(this.getModel("oRefOprSetModel"), "oRefOprSetModel");
                }
                this.getModel("oRefOprSetModel").setData([]);
                this.getModel("oRefOprSetModel").setProperty("/Vintv", "0010");
                this._createRefOpSetDialog.open();
            },
            /*Copy Multi Operations function to open the copey operation Pop up */
            fnOnImportOpr: function () {
                var oLclDialogData = {
                    Material: "",
                    Plant: "",
                    Group: "",
                    GropComboBox: "",
                    GroupCounter: "",
                    bTabVisible: false,
                    bWarnOnClosePopUp: false,
                    bMaterial: false,
                    bSwitchState: false,
                    bEnableOprFileds: true,
                    sRouteType: "N",
                    ValState: {
                        Material: "None",
                        Plant: "None",
                        Group: "None",
                        GroupCounter: "None",
                        GropComboBox: "None",
                    },
                };

                if (!this._oImportOprDialog) {
                    this._oImportOprDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.ImportOpr", this
                    );
                    this.getView().addDependent(this._oImportOprDialog);
                }
                this._oImportOprDialog.setModel(new JSONModel(oLclDialogData));
                this._oImportOprDialog.open();
            },
            // Method is to delete multiple operations looping through array
            fnDelMultipleOpr: function () {
                var that = this,
                    oBundle = that.getView().getModel("i18n").getResourceBundle(),
                    sDeleteWarning = oBundle.getText("update.deleteoperationsvalidation"),
                    oSelectedItems = that.getView().byId("listBindingOpr").getSelectedItems();
                var sBOMStatusMsg = oBundle.getText("proposal.BOMStatusMsg");
                if (oSelectedItems.length === 0) {
                    sap.m.MessageToast.show(sDeleteWarning);
                    return;
                }
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var aSelectedCheckBoxes = oOperationItemsModel.getProperty("/aSelectedCheckBoxes") || [];
                for (var i = 0; i < oSelectedItems.length; i++) {
                    var oItem = oSelectedItems[i];
                    var oObject = oItem.getBindingContext("oOperationItemsModel").getObject();
                    //var oValue = oObject.Vornr;
                    aSelectedCheckBoxes.push(oObject);
                }
                var aOperations = oOperationItemsModel.getProperty("/aOperationItems") || [];
                aSelectedCheckBoxes.forEach(function (item) {
                    var sOprnum = item.Vornr;
                    var isNew = item.isNew;
                    var sVplnr = item.Vplnr;
                    var sVplal = item.Vplal;
                    var sPlnkn = item.Plnkn;
                    if (sVplnr) {
                        //If Included S-Routing Operation then delete all operations
                        var aIndexes = [];
                        for (var i = 0; i < aOperations.length; i++) {
                            //Find all Indices based on Vplnr
                            if (
                                aOperations[i].Vplnr === sVplnr &&
                                aOperations[i].Vplal === sVplal &&
                                aOperations[i].Plnkn === sPlnkn
                            )
                                aIndexes.push(i);
                        }
                        if (isNew === "X") {
                            //If Newly added
                            for (var index = aIndexes.length - 1; index >= 0; index--)
                                aOperations.splice(aIndexes[index], 1);
                        } else {
                            var sOprList = that.getView().byId("listBindingOpr");
                            var oBinding = sOprList.getBinding("items");
                            for (var j = 0; j < aIndexes.length; j++)
                                aOperations[aIndexes[j]].Loekz = true; //Set delete flag
                            var filter = new sap.ui.model.Filter(
                                "Loekz",
                                sap.ui.model.FilterOperator.NE,
                                true
                            );
                            oBinding.filter([filter]);
                        }
                    } else {
                        var oprIndex = aOperations.findIndex(function (oprItem) {
                            return oprItem.Vornr === sOprnum;
                        });
                        // Update Bom Assignments
                        that.fnUpdateBomAssignments(sOprnum, "");
                        if (isNew !== "X") {
                            sOprList = that.getView().byId("listBindingOpr");
                            oBinding = sOprList.getBinding("items");
                            aOperations[oprIndex].Loekz = true; //Set delete flag
                            filter = new sap.ui.model.Filter(
                                "Loekz",
                                sap.ui.model.FilterOperator.NE,
                                true
                            );
                            oBinding.filter([filter]);
                        } else {
                            aOperations.splice(oprIndex, 1);
                        }
                    }
                });
                oOperationItemsModel.setProperty("/aOperationItems", aOperations);
                this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", false);
                this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBOMStatusMsg);
                for (i = 0; oSelectedItems.length > i; i++) {
                    this.getView().getModel("oOperationItemsModel").getProperty("/aTempAddedOper").pop()
                }
                oOperationItemsModel.refresh();
                // Reset when multi Deletion of operations is completed
                oOperationItemsModel.setProperty("/aSelectedCheckBoxes", []);
                that.getView().byId("listBindingOpr").removeSelections(true);
            },
            /*This method used to remove bom assignments for given operation number*/
            fnUpdateBomAssignments: function (sOperationNumber, sNewOprNum) {
                var sOprNum = sOperationNumber;
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var aBOMItemsData = oRoutingHeaderModel.getProperty("/BOM/Items/results") || [];
                aBOMItemsData.map(function (oBomItem) {
                    if (oBomItem.Vornr === sOprNum) {
                        if (sNewOprNum === "") {
                            //Delete Operation case
                            oBomItem.Vornr = "";
                            oBomItem.UnRead = "None";
                        } else {
                            //Change Opeartion case
                            oBomItem.Vornr = sNewOprNum;
                        }
                    }
                });
                oRoutingHeaderModel.setProperty("/BOM/Items/results", aBOMItemsData);
                oRoutingHeaderModel.refresh();
            },
            // Method for opening C223 WEB GUI link.
            fnOpenWEBGUIC223: function () {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel"),
                    sPlant = oRoutingHeaderModel.getProperty("/BOM/Plant"),
                    sMaterial = oRoutingHeaderModel.getProperty("/aHeaderDetails/Material");
                var aFilters = [new sap.ui.model.Filter("TCode", FilterOperator.EQ, "C223"),];
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.read("/ET_Web_GuiSet", {
                    filters: aFilters,
                    success: function (oData) {
                        var sLink = oData.results[0].Link;
                        sap.m.URLHelper.redirect(sLink + "?MKAL-WERKS=" + sPlant + "&MKAL-MATNR=" + sMaterial + "&~OKCODE=FCPU#", true);
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            /*Description : Method to open Open VMP_Maintain transaction from URL*/
            fnOpenVMP: function () {
                var sService = this.getOwnerComponent().getModel("oSrvModel")._getServerUrl() +
                    this.getOwnerComponent().getModel("oSrvModel").sServiceUrl,
                    Material = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj").Material;
                var sURL = sService + "/ET_SAPGUI_LINKSet(Material='" + Material + "')/$value";
                window.open(sURL);
            },
            /*Description: this function is used to open the Material Classification Application in new tab.*/
            fnGoToMaterialClassification: function () {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sKeyUser = oRoutingModel.getProperty("/keyUser");
                var CopyKeyword = oRoutingModel.getProperty("/sCopyKeyword");
                var CopyParameter1 = oRoutingModel.getProperty("/sCopyParameter1");
                var CopyParameter2 = oRoutingModel.getProperty("/sCopyParameter2");
                var CopyParameter3 = oRoutingModel.getProperty("/sCopyParameter3");
                if (sKeyUser) {
                    var App = "KeyUser";
                    var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant");
                    var sGroup = oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No");
                    var sGroupCounter = oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr");
                    var oParam = {
                        User: App,
                        Group: sGroup,
                        GroupCounter: sGroupCounter,
                        Plant: sPlant,
                        Keyword: CopyKeyword,
                        Parameter1: CopyParameter1,
                        Parameter2: CopyParameter2,
                        Parameter3: CopyParameter3,
                    };
                } else {
                    var App = "EndUser";
                    var sMaterial = oRoutingHeaderModel.getProperty("/aHeaderDetails/Material");
                    var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant");
                    var oParam = {
                        User: App,
                        Material: sMaterial,
                        Plant: sPlant,
                        Keyword: CopyKeyword,
                        Parameter1: CopyParameter1,
                        Parameter2: CopyParameter2,
                        Parameter3: CopyParameter3,
                    };
                }
                var oCrossAppNavigator = sap.ushell.Container.getService("CrossApplicationNavigation"); // get a handle on the global XAppNav service
                var hash = (oCrossAppNavigator &&
                    oCrossAppNavigator.hrefForExternal({
                        target: {
                            semanticObject: "ZSO_CFE2_MATCLASS",
                            action: "display",
                        },
                        params: oParam,
                    })) || "";
                var url = window.location.href.split("#")[0] + hash;
                sap.m.URLHelper.redirect(url, true);
            },
            /*Description : This method validates whether there are any unsaved changes or not
              If there are any unsaved changes, then it triggers main save function else triggers open smartcopy function*/
            fnOpenSmartCopyValidation: function (oEvent) {
                var that = this;
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var unSavedChangeFlag = oVisibilityModel.getProperty("/bUnsavedChange");
                //if there are any un save changes
                if (unSavedChangeFlag) {
                    //trigger save button logic and call that.fnOpenSmartCopyPopup(); in side success
                    that.fnCreateRouting(oEvent, "SMARTCOPY");
                } else {
                    that.fnOpenSmartCopyPopup();
                }
            },
            /*Description : This method is used to open Smart Copy dialog*/
            fnOpenSmartCopyPopup: function () {
                var that = this;
                if (!this._oSmartCopy) {
                    this._oSmartCopy = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.SmartCopy", this
                    );
                    this.getView().addDependent(this._oSmartCopy);
                }
                //Function call to fetch data
                this.fnGetSmartCopyTemplateData();
            },
            /*Description : This method is used to fetch data from ET_Smart_CopySet Odata*/
            fnGetSmartCopyTemplateData: function () {
                var that = this;
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                var sWaitMsg = oBundle.getText("smart.waitMsg");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var sSelTargetGroup = oOperationItemsModel.getProperty("/selTargetGroupNo");
                var aBomDetails = oOperationItemsModel.getProperty("/aSmartCopyBomDetails");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var aHeaderDetails = oRoutingHeaderModel.getProperty("/aHeaderDetails");
                var sMaterial = oRoutingHeaderModel.getProperty("/aHeaderDetails/Material");
                var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant");
                var sGroupNum = oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No");
                var sGroupCounter = oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr");
                var bomNum;
                var altBomNum;
                var aFilters = [
                    new sap.ui.model.Filter("Plnnr", FilterOperator.EQ, sGroupNum),
                    new sap.ui.model.Filter("Plnal", FilterOperator.EQ, sGroupCounter),
                    new sap.ui.model.Filter("Plnty", FilterOperator.EQ, "N"),
                    new sap.ui.model.Filter("Matnr", FilterOperator.EQ, sMaterial),
                    new sap.ui.model.Filter("Werks", FilterOperator.EQ, sPlant),
                ];
                var oDialog = new sap.m.BusyDialog({
                    text: sWaitMsg,
                });
                oDialog.open();
                oDataModel.read("/ET_Smart_CopySet", {
                    filters: aFilters,
                    async: true,
                    urlParameters: {
                        $expand: ["Errors"],
                    },
                    success: function (oData) {
                        oDialog.close();
                        if (oData.results.length > 0) {
                            oOperationItemsModel.setProperty("/aSmartCopyTemplatesData", oData.results);
                            var aSmartCopyTemplatesData = oOperationItemsModel.getProperty("/aSmartCopyTemplatesData");
                        } else {
                            oOperationItemsModel.setProperty("/aSmartCopyTemplatesData", []);
                            var aSmartCopyTemplatesData = oOperationItemsModel.getProperty("/aSmartCopyTemplatesData");
                        }
                        //Looping target group & group counters
                        for (var i = 0; i < aSmartCopyTemplatesData.length; i++) {
                            aSmartCopyTemplatesData[i].T_Plnnr = sSelTargetGroup;
                            aSmartCopyTemplatesData[i].T_Plnal =
                                aSmartCopyTemplatesData[i].S_Plnal;
                        }
                        //This condition satisfies when there is only one Target group number
                        if (sSelTargetGroup !== "") {
                            this.fnSmartCopyTargetGroupChange("", sSelTargetGroup);
                        }
                        if (aBomDetails !== "") {
                            if (aBomDetails.length === 1) {
                                bomNum = aBomDetails[0].BomNo;
                                oOperationItemsModel.setProperty("/aSmartCopyBomAltNum", aBomDetails[0].Items.results);
                                if (aBomDetails[0].Items.results.length === 1) {
                                    altBomNum = aBomDetails[0].Items.results[0].AltBom;
                                } else {
                                    altBomNum = "";
                                }
                            } else {
                                bomNum = "";
                                altBomNum = "";
                            }
                            for (var i = 0; i < aSmartCopyTemplatesData.length; i++) {
                                aSmartCopyTemplatesData[i].Bom_no = bomNum;
                                aSmartCopyTemplatesData[i].Alt_Bom = altBomNum;
                            }
                        }
                        oOperationItemsModel.updateBindings(true);
                        this._oSmartCopy.open();
                    }.bind(this),
                    error: function (error) {
                        oDialog.close();
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            /*Description : This method is triggered when user changes smart copy target group*/
            fnSmartCopyTargetGroupChange: function (oEvent, sGrpNum) {
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var grpnotFndMsg = oBundle.getText("smart.grpnotfndMsg");
                if (sGrpNum !== "" && sGrpNum !== undefined) {
                    //The below code will be executed for only one Target group number condition
                    var sGroup = sGrpNum;
                    var aSmartCopyTemplatesData = oOperationItemsModel.getProperty("/aSmartCopyTemplatesData");
                    var oBusyIndicator = new BusyDialog();
                    oBusyIndicator.open();
                    var aTargetGCounters = [];
                    oDataModel.read("/ET_Used_GCSet", {
                        filters: [new Filter("Plnnr", FilterOperator.EQ, sGroup)],
                        success: function (oData) {
                            oBusyIndicator.close();
                            var aGroupCountersArray = oData.results;
                            aGroupCountersArray.filter(function (c) {
                                aTargetGCounters.push({
                                    Available_GC: c.Plnal,
                                });
                            });
                            //Looping the target group counters at each row level
                            for (var i = 0; i < aSmartCopyTemplatesData.length; i++) {
                                aSmartCopyTemplatesData[i].aTargetGroupCounters = aTargetGCounters;
                            }
                            //checking whether prepopulated group counter is already existing or not
                            for (var i = 0; i < aSmartCopyTemplatesData.length; i++) {
                                for (var j = 0; j < aTargetGCounters.length; j++) {
                                    if (
                                        aSmartCopyTemplatesData[i].T_Plnal === aTargetGCounters[j].Available_GC
                                    ) {
                                        aSmartCopyTemplatesData[i].T_Plnal_Vstate = "Error";
                                        var sMsg = oBundle.getText("countervaluestatemsg", [
                                            sGroup,
                                            aSmartCopyTemplatesData[i].T_Plnal,
                                        ]);
                                        aSmartCopyTemplatesData[i].T_Plnal_Vstatetext = sMsg;
                                        break;
                                    } else {
                                        aSmartCopyTemplatesData[i].T_Plnal_Vstate = "None";
                                        aSmartCopyTemplatesData[i].T_Plnal_Vstatetext = "";
                                    }
                                }
                            }
                            oOperationItemsModel.updateBindings(true);
                        }.bind(this),
                        error: function (error) {
                            oBusyIndicator.close();
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                } else {
                    //The below code will be executed when group number is changed
                    var sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                    var oSelectedItem = oEvent.getSource().getSelectedItem();
                    var oSource = oEvent.getSource();
                    var sGroup = "";
                    var sCurrentGrpCounter = oOperationItemsModel.getProperty(sCurrentPath + "/T_Plnal");
                    sGroup = oEvent.getSource().getValue();
                    if (oSelectedItem) {
                        sGroup = oSelectedItem.getKey();
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnnr_Vstate", "None");
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnnr_Vstatetext", "");
                        var oBusyIndicator = new BusyDialog();
                        oBusyIndicator.open();
                        var aTargetGCounters = [];
                        oDataModel.read("/ET_Used_GCSet", {
                            filters: [new Filter("Plnnr", FilterOperator.EQ, sGroup)],
                            success: function (oData) {
                                oBusyIndicator.close();
                                var aGroupCountersArray = oData.results;
                                aGroupCountersArray.filter(function (c) {
                                    aTargetGCounters.push({
                                        Available_GC: c.Plnal,
                                    });
                                });
                                var aCounter = $.grep(aTargetGCounters, function (e) {
                                    return e.Available_GC === sCurrentGrpCounter;
                                });
                                //checking whether prepopulated group counter is already existing or not
                                if (aCounter.length > 0) {
                                    oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstate", "Error");
                                    var sMsg = oBundle.getText("countervaluestatemsg", [
                                        sGroup,
                                        sCurrentGrpCounter,
                                    ]);
                                    oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstatetext", sMsg);
                                } else {
                                    oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstate", "None");
                                    oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstatetext", "");
                                }
                                oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnnr", sGroup);
                                oOperationItemsModel.setProperty(sCurrentPath + "/aTargetGroupCounters", aTargetGCounters);
                            }.bind(this),
                            error: function (error) {
                                oBusyIndicator.close();
                                this.fnCheckError(error);
                            }.bind(this),
                        });
                    } else if (sGroup === "") {
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnnr_Vstate", "None");
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnnr_Vstatetext", "");
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnnr", sGroup);
                        oOperationItemsModel.setProperty(sCurrentPath + "/aTargetGroupCounters", []);
                    } else {
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnnr_Vstate", "Error");
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnnr_Vstatetext", grpnotFndMsg);
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnnr", "");
                        oOperationItemsModel.setProperty(sCurrentPath + "/aTargetGroupCounters", []);
                    }
                }
            },
            // Method for opening Parallel Lines WEB GUI link.
            fnOpenWEBGUIParallelLines: function () {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel"),
                    sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant"),
                    sMaterial = oRoutingHeaderModel.getProperty("/aHeaderDetails/Material");
                var aFilters = [new sap.ui.model.Filter("TCode", FilterOperator.EQ, "ZMARS_PARALLEL_LINES"),
                ];
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.read("/ET_Web_GuiSet", {
                    filters: aFilters,
                    success: function (oData) {
                        var sLink = oData.results[0].Link;
                        //sap.m.URLHelper.redirect(sLink + "?MKAL-WERKS=" + sPlant + "&MKAL-MATNR=" + sMaterial + "&~OKCODE=FCPU#", true);
                        sap.m.URLHelper.redirect(
                            sLink +
                            "?P_MATNR=" +
                            sMaterial +
                            "&P_WERKS=" +
                            sPlant +
                            "&~OKCODE=ONLI#",
                            true
                        );
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            // Method to jump to RCS UI5 application and to generate RCS document.
            fnNavigateToRCS: function () {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant") || "";
                var sMat_Txt = oRoutingHeaderModel.getProperty("/aHeaderDetails/Mat_Txt") || "";
                var iCounter = oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr") || "";
                var oCrossAppNavigator = sap.ushell.Container.getService("CrossApplicationNavigation"); // get a handle on the global XAppNav service
                var hash = (oCrossAppNavigator &&
                    oCrossAppNavigator.hrefForExternal({
                        target: {
                            semanticObject: "ZSO_B91A_RCS",
                            action: "create",
                        },
                        params: {
                            Plant: sPlant,
                            MatDesc: sMat_Txt,
                            Counter: iCounter,
                        },
                    })) || "";
                var url = window.location.href.split("#")[0] + hash;
                sap.m.URLHelper.redirect(url, true);
            },
            /*This method used to create and update routing*/
            fnCreateRouting: async function (oEvent, sAction) {
                var that = this;
                var oCreateScratchPayload = {},
                    oClassification = {},
                    aClassification = [];
                // var sButtonText = oEvent.getSource().getText();
                if (oEvent.getSource() === null && this.getView().getModel("oVisibilityModel").getProperty("/sMassUpdateUser") === "X") {
                    var sButtonText = "Proceed to routing modification";
                } else {
                    var sButtonText = oEvent.getSource().getText();
                }
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oRoutingHeaderData = oRoutingHeaderModel.getProperty("/aHeaderDetails");
                var aMultipleAOCI = oRoutingModel.getProperty("/aMAOCI") || [];
                var aOperationItems = this.getView().getModel("oOperationItemsModel").getProperty("/aOperationItems") || [];
                var sBtnProposeToolTip = oBundle.getText("proposal.BtnTxtToolTip");
                var sDelOperError = oBundle.getText("update.DelOperError");
                var sCAPPWCError = oBundle.getText("update.errormsgcappwc");
                var sCAPPWCErrorvalid = oBundle.getText("update.errormsgcappwcvalid");
                var sKeyUserStatus = oRoutingHeaderModel.getProperty("/sKeyUserCheck");
                var sStatusValidation = oBundle.getText("statusvalidation");
                // Checking for duplicate operation numbers and throwing error.
                // Array after filtering over deletion flag
                var aFinalArrayD = aOperationItems.filter(function (item) {
                    return item.Loekz === false;
                });
                var bResultToReturn = false;
                var aDArray = [];
                for (var i = 0; i < aFinalArrayD.length; i++) {
                    for (var j = 0; j < aFinalArrayD.length; j++) {
                        // prevents the element from comparing with itself
                        if (i !== j) {
                            if (
                                Number(aFinalArrayD[i].Vornr) === Number(aFinalArrayD[j].Vornr)
                            ) {
                                bResultToReturn = true;
                                aDArray.push(Number(aFinalArrayD[i].Vornr));
                                break;
                            }
                        }
                    }
                }
                // Getting unique elements from duplicates array to show in error message.
                var filteredArray = aDArray.filter(function (item, pos) {
                    return aDArray.indexOf(item) === pos;
                });
                var sMsgDup = oBundle.getText("update.duplicateopnum", filteredArray.toString());
                if (bResultToReturn) {
                    MessageBox.error(sMsgDup);
                    return;
                }
                // End
                var aBOM = oRoutingHeaderModel.getProperty("/BOM");
                var sRoutingHeaderHTMLLongText = oRoutingHeaderModel.getProperty("/sLongText") || "";
                var isKeyuser = oRoutingModel.getProperty("/keyUser") || "";
                var bMandate = this.fnCheckMandateCreateRouting(aOperationItems, isKeyuser) || false; //Checking Mandatory fields
                this.getView().getModel("oOperationItemsModel").refresh();
                var oBusyIndicator = new BusyDialog();
                if (
                    Number(oRoutingHeaderData.Losvn) > Number(oRoutingHeaderData.Losbs) ||
                    Number(oRoutingHeaderData.Losvn) > 99999999 ||
                    Number(oRoutingHeaderData.Losbs) > 99999999
                ) {
                    var sMsg = oBundle.getText("errormsglotsize");
                    MessageBox.error(sMsg);
                } else if (
                    sKeyUserStatus === "X" &&
                    this.getView()
                        .getModel("oVisibilityModel")
                        .getProperty("/sMassUpdateUser") !== "X" &&
                    (oRoutingHeaderData.Status === "ME" ||
                        oRoutingHeaderData.Status === "MD")
                ) {
                    MessageBox.error(sStatusValidation);
                } else if (
                    this.getView().getModel("oVisibilityModel").getProperty("/sMassUpdateUser") === "X" &&
                    this.getView().getModel("oOperationItemsModel").getProperty("/aVornrTempAddedOper") !== 0 &&
                    this.getView().getModel("oOperationItemsModel").getProperty("/aTempAddedOper").length !== 0 &&
                    this.getView().getModel("oRoutingHeaderModel").getProperty("/aTempAddedOperButton") === true) {
                    MessageBox.error(sDelOperError);
                } else if (oRoutingHeaderData.Plant === "FFF1" && oRoutingHeaderData.KapArbpl === "") {
                    MessageBox.error(sCAPPWCError);
                } else if (oRoutingHeaderData.Plant === "FFF1" && oRoutingModel.getProperty("/aValidCAPPWC") === false) {
                    MessageBox.error(sCAPPWCErrorvalid);
                }
                else if (oRoutingHeaderData.Plant &&
                    oRoutingHeaderData.Status &&
                    oRoutingHeaderData.Task_List_Desc &&
                    oRoutingHeaderData.Verwe &&
                    bMandate
                ) {
                    //Deleting additional properties
                    delete oRoutingHeaderData.Plnr_Grp_Txt;
                    delete oRoutingHeaderData.Mat_Txt;
                    delete oRoutingHeaderData.TlExtid;
                    delete oRoutingHeaderData.statusState;
                    oRoutingHeaderData.Key_User = isKeyuser;
                    //Routing Header
                    oCreateScratchPayload = oRoutingHeaderData;
                    // BOM
                    if (aBOM !== undefined) {
                        if (aBOM.Items.results.length > 0) {
                            var aBOMItemsDataForPayload = [];
                            aBOM.Items.results.map(function (oBOMItem) {
                                delete oBOMItem.UnRead;
                                aBOMItemsDataForPayload.push({
                                    AiGroup: oBOMItem.AiGroup,
                                    AiPrio: oBOMItem.AiPrio,
                                    AiStrateg: oBOMItem.AiStrateg,
                                    AleInd: oBOMItem.AleInd,
                                    AltBom: oBOMItem.AltBom,
                                    BomAlt: oBOMItem.BomAlt,
                                    BomNo: oBOMItem.BomNo,
                                    BulkMat: oBOMItem.BulkMat,
                                    CadInd: oBOMItem.CadInd,
                                    ChangeNo: oBOMItem.ChangeNo,
                                    ChangedBy: oBOMItem.ChangedBy,
                                    ChangedOn: oBOMItem.ChangedOn,
                                    ChgNoTo: oBOMItem.ChgNoTo,
                                    Class: oBOMItem.Class,
                                    ClassType: oBOMItem.ClassType,
                                    CoProduct: oBOMItem.CoProduct,
                                    CompDesc: oBOMItem.CompDesc,
                                    CompQty: oBOMItem.CompQty,
                                    CompScrap: oBOMItem.CompScrap,
                                    CompUnit: oBOMItem.CompUnit,
                                    Component: oBOMItem.Component,
                                    CostElem: oBOMItem.CostElem,
                                    CreatedBy: oBOMItem.CreatedBy,
                                    CreatedOn: oBOMItem.CreatedOn,
                                    Cufactor: oBOMItem.Cufactor,
                                    Currency: oBOMItem.Currency,
                                    DelivTime: oBOMItem.DelivTime,
                                    DepLink: oBOMItem.DepLink,
                                    DisconGrp: oBOMItem.DisconGrp,
                                    DistrKey: oBOMItem.DistrKey,
                                    DocPart: oBOMItem.DocPart,
                                    DocType: oBOMItem.DocType,
                                    DocVers: oBOMItem.DocVers,
                                    Document: oBOMItem.Document,
                                    ExplType: oBOMItem.ExplType,
                                    FixedQty: oBOMItem.FixedQty,
                                    Fldelete: oBOMItem.Fldelete,
                                    FollowGrp: oBOMItem.FollowGrp,
                                    FshCriticalComp: oBOMItem.FshCriticalComp,
                                    FshCriticalLevel: oBOMItem.FshCriticalLevel,
                                    GrRcpt: oBOMItem.GrRcpt,
                                    GrpTime: oBOMItem.GrpTime,
                                    Identifier: oBOMItem.Identifier,
                                    IssueLoc: oBOMItem.IssueLoc,
                                    ItemCateg: oBOMItem.ItemCateg,
                                    ItemCount: oBOMItem.ItemCount,
                                    ItemGuid: oBOMItem.ItemGuid,
                                    ItemNo: oBOMItem.ItemNo,
                                    ItemNode: oBOMItem.ItemNode,
                                    ItemText1: oBOMItem.ItemText1,
                                    ItemText2: oBOMItem.ItemText2,
                                    ItmIdent: oBOMItem.ItmIdent,
                                    LeadTime: oBOMItem.LeadTime,
                                    MatGroup: oBOMItem.MatGroup,
                                    MatProvis: oBOMItem.MatProvis,
                                    Modify: oBOMItem.Modify,
                                    MultSelec: oBOMItem.MultSelec,
                                    OpLeadTm: oBOMItem.OpLeadTm,
                                    OpLtUnit: oBOMItem.OpLtUnit,
                                    OpNetInd: oBOMItem.OpNetInd,
                                    OpScrap: oBOMItem.OpScrap,
                                    PmAssmbly: oBOMItem.PmAssmbly,
                                    Price: oBOMItem.Price,
                                    PriceUnit: oBOMItem.PriceUnit,
                                    PurchGrp: oBOMItem.PurchGrp,
                                    PurchOrg: oBOMItem.PurchOrg,
                                    RecAllowd: oBOMItem.RecAllowd,
                                    Recursive: oBOMItem.Recursive,
                                    Refpoint: oBOMItem.Refpoint,
                                    RelCost: oBOMItem.RelCost,
                                    RelEngin: oBOMItem.RelEngin,
                                    RelHlconf: oBOMItem.RelHlconf,
                                    RelPmaint: oBOMItem.RelPmaint,
                                    RelProd: oBOMItem.RelProd,
                                    RelSales: oBOMItem.RelSales,
                                    ReqdComp: oBOMItem.ReqdComp,
                                    ResItmCt: oBOMItem.ResItmCt,
                                    SNo: oBOMItem.SNo,
                                    SegmentRelevant: oBOMItem.SegmentRelevant,
                                    SegmentValue: oBOMItem.SegmentValue,
                                    SelCond: oBOMItem.SelCond,
                                    Sortstring: oBOMItem.Sortstring,
                                    SparePart: oBOMItem.SparePart,
                                    Spproctype: oBOMItem.Spproctype,
                                    Supplyarea: oBOMItem.Supplyarea,
                                    UnloadPt: oBOMItem.UnloadPt,
                                    UsageProb: oBOMItem.UsageProb,
                                    ValidFrom: oBOMItem.ValidFrom,
                                    ValidTo: oBOMItem.ValidTo,
                                    Vendor: oBOMItem.Vendor,
                                    Vornr: oBOMItem.Vornr,
                                    VsiFormul: oBOMItem.VsiFormul,
                                    VsiNo: oBOMItem.VsiNo,
                                    VsiQty: oBOMItem.VsiQty,
                                    VsiSize1: oBOMItem.VsiSize1,
                                    VsiSize2: oBOMItem.VsiSize2,
                                    VsiSize3: oBOMItem.VsiSize3,
                                    VsiSzunit: oBOMItem.VsiSzunit,
                                    ZzbomPosnr: oBOMItem.ZzbomPosnr,
                                    ZzciMatnr: oBOMItem.ZzciMatnr,
                                    ZzdassyType: oBOMItem.ZzdassyType,
                                    ZzdsIssue: oBOMItem.ZzdsIssue,
                                    ZzdsMatnr: oBOMItem.ZzdsMatnr,
                                    ZzesnFlag: oBOMItem.ZzesnFlag,
                                    ZzfinMatnr: oBOMItem.ZzfinMatnr,
                                    ZzmatLink: oBOMItem.ZzmatLink,
                                    ZzpasyMatnr: oBOMItem.ZzpasyMatnr,
                                    Vornr_c: oBOMItem.Vornr_c,
                                    Prob_Prio: oBOMItem.Prob_Prio,
                                    AllocNo: oBOMItem.AllocNo,
                                    Colr_Status: oBOMItem.Colr_Status,
                                    Multi_Prio_Eq: oBOMItem.Multi_Prio_Eq,
                                    Multi_Prio: oBOMItem.Multi_Prio,
                                    BOM_Opr_Items: [],
                                });
                            });
                            var aFinalBOM = {
                                BomNo: aBOM.BomNo,
                                BomStatus: aBOM.BomStatus,
                                AltText: aBOM.AltText,
                                Altsl: aBOM.Altsl || "",
                                BomGroup: aBOM.BomGroup,
                                ChgNo: aBOM.ChgNo,
                                Plant: aBOM.Plant,
                                Material: aBOM.Material,
                                BomUsage: aBOM.BomUsage,
                                AltBom: aBOM.AltBom,
                                Alt_Grp_Cntr: aBOM.Alt_Grp_Cntr,
                                SaveFlag: aBOM.SaveFlag,
                                Items: aBOMItemsDataForPayload,
                            };
                            oCreateScratchPayload.BOM = [aFinalBOM];
                        }
                    }
                    //Classification Details
                    var sDebitor = oRoutingHeaderModel.getProperty("/DEBITOR");
                    var sPlanIndex = oRoutingHeaderModel.getProperty("/PLAN_INDEX");
                    var sAllocDate = oRoutingHeaderModel.getProperty("/AllocDate");
                    var sAllocMode = oRoutingHeaderModel.getProperty("/AllocDateMode");
                    var sAllocSource = oRoutingHeaderModel.getProperty("/AllocDateSourceSelected");
                    oClassification = {
                        CHARACT: "DEBITOR",
                        VALUE_NEUTRAL: sDebitor,
                    };
                    aClassification.push(oClassification);
                    oClassification = {
                        CHARACT: "PLAN_INDEX",
                        VALUE_NEUTRAL: sPlanIndex,
                    };
                    aClassification.push(oClassification);
                    oClassification = {
                        CHARACT: "ME_AUTO_ALLOC_DATE",
                        VALUE_NEUTRAL: sAllocDate,
                    };
                    aClassification.push(oClassification);
                    oClassification = {
                        CHARACT: "ME_AUTO_ALLOC_DATE_TYPE",
                        VALUE_NEUTRAL: sAllocMode,
                    };
                    aClassification.push(oClassification);
                    oClassification = {
                        CHARACT: "ME_AUTO_ALLOC_DATE_SOURCE",
                        VALUE_NEUTRAL: sAllocSource,
                    };
                    aClassification.push(oClassification);
                    oCreateScratchPayload.Classification = aClassification;
                    var aAOCIMgtData = oRoutingHeaderModel.getProperty("/aAOCIData") || [];
                    var aAOCIMgt = [];
                    aAOCIMgtData.map(function (oItem) {
                        if (oItem.bExistingRecord === "N") {
                            if (oItem.Loekz !== "X") {
                                aAOCIMgt.push({
                                    Material: oItem.Material,
                                    Plant: oItem.Plant,
                                    Loekz: oItem.Loekz,
                                });
                            }
                        } else {
                            aAOCIMgt.push({
                                Material: oItem.Material,
                                Plant: oItem.Plant,
                                Loekz: oItem.Loekz,
                            });
                        }
                    });
                    oCreateScratchPayload.Multiple_AOCIs = aAOCIMgt;
                    //Operations
                    oCreateScratchPayload.Operation = aOperationItems;
                    var sCreateScratchPayload = JSON.stringify(oCreateScratchPayload);
                    oCreateScratchPayload = JSON.parse(sCreateScratchPayload);
                    // StringConversion
                    if (oCreateScratchPayload.Losvn !== undefined) {
                        oCreateScratchPayload.Losvn = oCreateScratchPayload.Losvn + "";
                    }
                    if (oCreateScratchPayload.Losbs !== undefined) {
                        oCreateScratchPayload.Losbs = oCreateScratchPayload.Losbs + "";
                    }
                    //Dates Parsing
                    if (oCreateScratchPayload.Datuv) {
                        oCreateScratchPayload.Datuv =
                            oCreateScratchPayload.Datuv.split("Z")[0];
                    }
                    if (oCreateScratchPayload.Datub) {
                        oCreateScratchPayload.Datub =
                            oCreateScratchPayload.Datub.split("Z")[0];
                    }
                    if (oCreateScratchPayload.Aedat) {
                        oCreateScratchPayload.Aedat =
                            oCreateScratchPayload.Aedat.split("Z")[0];
                    }
                    if (oCreateScratchPayload.Abdat) {
                        oCreateScratchPayload.Abdat =
                            oCreateScratchPayload.Abdat.split("Z")[0];
                    }
                    if (oCreateScratchPayload.Andat) {
                        oCreateScratchPayload.Andat =
                            oCreateScratchPayload.Andat.split("Z")[0];
                    }
                    //Time field
                    if (oCreateScratchPayload.Aeuzeit) {
                        delete oCreateScratchPayload.Aeuzeit;
                    }
                    //LongText Formatting
                    var aRoutingHeaderLongText = [];
                    if (sRoutingHeaderHTMLLongText.length > 0) {
                        aRoutingHeaderLongText = formatter.fnPlainText(sRoutingHeaderHTMLLongText);
                        aRoutingHeaderLongText = formatter.fnFormatPlainText(aRoutingHeaderLongText); // Decode unicode
                    }
                    oCreateScratchPayload.Long_Text = aRoutingHeaderLongText;
                    // Send Create flag as "X" or Blank based on Create or Save button for identifying diff between Create / Change
                    if (sButtonText === "Create") {
                        oCreateScratchPayload.Create = "X";
                    } else {
                        oCreateScratchPayload.Create = "";
                    }
                    // End
                    oCreateScratchPayload.Operation.map(function (oOpr) {
                        //setuptime and labortime converting to string
                        if (oOpr.Vgw01 !== undefined) {
                            oOpr.Vgw01 = oOpr.Vgw01 + "";
                        }
                        if (oOpr.Vgw02 !== undefined) {
                            oOpr.Vgw02 = oOpr.Vgw02 + "";
                        }
                        if (oOpr.Anzma !== undefined) {
                            oOpr.Anzma = oOpr.Anzma + "";
                        }
                        // Operation level
                        var aPRT = oOpr.PRT.results;
                        delete oOpr.aTempAddedDelButton;
                        delete oOpr.aSuggestOperationPlants; //CAPP MARS 3.0 deleting additional properties
                        delete oOpr.aSuggestOperationWorkCenter; //deleting additional properties
                        delete oOpr.aSuggestOperationCAPPord; //deleting additional properties
                        delete oOpr.bEnable; // ver 2.0 changes
                        delete oOpr.Werks_Vstate; //deleting additional propertie Plant
                        delete oOpr.Arbpl_Vstate; //deleting additional propertie Work centre
                        delete oOpr.USR00_Vstate; //deleting additional propertie Group
                        delete oOpr.USR02_Vstate; //deleting additional propertie Group Counter
                        delete oOpr.USR03_Vstate; //deleting additional propertie Interval
                        delete oOpr.USR03_VstateText; //deleting additional propertie Interval message
                        delete oOpr.Vplnr_Vstate; //deleting additional propertie Reference Group
                        delete oOpr.Vplal_Vstate; //deleting additional propertie Reference Group Counter
                        delete oOpr.Vgw01_Vstate; //setuptime
                        delete oOpr.Vgw02_Vstate; //Labourtime
                        delete oOpr.Vgw01_bChangedFlag; //setuptime if Changed flag
                        delete oOpr.Vgw02_bChangedFlag; //Labour Time if Changed flag
                        delete oOpr.Anzma_bChangedFlag; //No of Emp
                        delete oOpr.Anzma_Vstate; //No of Emp
                        // Delete flags if there.
                        delete oOpr.Ticon_status_1;
                        delete oOpr.Ticon_status_2;
                        delete oOpr.Ticon_status_3;
                        /*Please dont forget to delete the temp added properties*/
                        //Delete flags of MASS UPDATE 
                        delete oOpr.bEnableKeyUserFileds;
                        delete oOpr.bEnableOprFileds; //opr
                        delete oOpr.bEnableKeyUserOprLongTxt;
                        delete oOpr.bEnableOprTiconFileds;
                        delete oOpr.bEnableOprDoc;
                        delete oOpr.bEnableKeyUserWorkCenter;
                        delete oOpr.bEnableKeyUserOprShortTxtDesc;
                        delete oOpr.bEnableKeyUserPRTAdd;
                        delete oOpr.bEnableKeyUserPRTDel;
                        delete oOpr.bEnableKeyUserPRTTable;
                        delete oOpr.isNew;
                        //V2.5 changes in Mass Update            
                        delete oOpr.aTempAddedDelButton;//deleting additional properties
                        //remove the date usr fields as it will be mapped from the backend v2.2 change
                        delete oOpr.USR08;
                        delete oOpr.USR09;
                        delete oOpr.bStdKeyReq;
                        delete oOpr.bTiconCalInPrg;
                        /*v2.2 changes format the user date field*/
                        if (oOpr.OprUserFields && oOpr.OprUserFields.results.length > 0) {
                            oOpr.OprUserFields.results.forEach(function (oItem) {
                                if (oItem.UserField9) {
                                    oItem.UserField9 = oItem.UserField9.split("Z")[0];
                                }
                                if (oItem.UserField10) {
                                    oItem.UserField10 = oItem.UserField10.split("Z")[0];
                                }
                            });
                        }
                        //LongText Formatting
                        if (oOpr.Long_Text.results.length > 0) {
                            if (oOpr.isUiNew === "X") {
                                oOpr.bLongText_isFormatted = true;
                            }
                            if (oOpr.bLongText_isFormatted === true) {
                                //Replacing Longtext with Short text if short text edited after sych
                                if (oOpr.Ltxa1 !== oOpr.SyncOprText) {
                                    var aPlainText = formatter.fnPlainText(
                                        oOpr.Long_Text.results
                                    );
                                    if (aPlainText[0].Edit === "I") {
                                        //in case of Include text
                                        var sIncludeTextPara = that.fnHtmlParas(
                                            oOpr.Long_Text.results
                                        );
                                        var sOprShortTextPara = "<p>" + oOpr.Ltxa1 + "</p>";
                                        oOpr.Long_Text.results = oOpr.Long_Text.results.replace(
                                            sIncludeTextPara,
                                            sOprShortTextPara
                                        ); //Replacing with opr shortText to make synch
                                    } else {
                                        var sFirstLine = aPlainText[0].Line;
                                        var sFormattedText = sFirstLine.replace(
                                            /(\r\n|\n|\r)/gm,
                                            ""
                                        );
                                        oOpr.Long_Text.results = oOpr.Long_Text.results.replace(
                                            sFormattedText,
                                            oOpr.Ltxa1
                                        );
                                    }
                                }
                                oOpr.Long_Text.results = formatter.fnPlainText(
                                    oOpr.Long_Text.results
                                ); //Plain text format to send to backend
                                oOpr.Long_Text.results = formatter.fnFormatPlainText(
                                    oOpr.Long_Text.results
                                ); // Decode unicode
                            } //Additional conditon to check Synch
                            else if (
                                oOpr.bLongText_isFormatted === undefined &&
                                oOpr.SyncOprText === undefined
                            ) {
                                oOpr.SyncOprText = oOpr.Long_Text.results[0].Line.substring(
                                    0, 40
                                );
                                if (oOpr.Ltxa1 !== oOpr.SyncOprText) {
                                    oOpr.Long_Text.results[0].Line = oOpr.Ltxa1;
                                    oOpr.Long_Text.results[0].Edit = "E";
                                }
                            }
                        } else if (oOpr.Ltxa1 !== undefined) {
                            if (oOpr.Ltxa1.length > 0) {
                                oOpr.Long_Text.results = [
                                    {
                                        Line: oOpr.Ltxa1,
                                        Edit: "E",
                                        // "Hightlight": ""
                                    },
                                ];
                            } else {
                                oOpr.Long_Text.results = [];
                            }
                        } else {
                            oOpr.Long_Text.results = [];
                        }
                        delete oOpr.bLongText_isFormatted; //deleting additional properties.
                        delete oOpr.SyncOprText;
                        delete oOpr.bOPenPRTBtnEnable;
                        delete oOpr.isUiNew; //deleting additional properties
                        // Date Format
                        if (oOpr.Aedat) {
                            oOpr.Aedat = oOpr.Aedat.split("Z")[0];
                        }
                        if (oOpr.Andat) {
                            oOpr.Andat = oOpr.Andat.split("Z")[0];
                        }
                        if (oOpr.Datuv) {
                            oOpr.Datuv = oOpr.Datuv.split("Z")[0];
                        }
                        var sVornr = oOpr.Vornr;
                        var sLoekz = oOpr.Loekz || "";
                        aPRT.map(function (oPRT) {
                            // PRT level
                            oPRT.Mgvgw = oPRT.Mgvgw + ""; //quantity to string
                            delete oPRT.aPRTPlants; //deleting property additional properties for plants
                            delete oPRT.isNew; //deleting additional properties
                            delete oPRT.bEnable; // ver 2.0 changes
                            oPRT.Mgeinh = "EA";
                            oPRT.Vornr = sVornr;
                            //	delete oPRT.DOKAR; // deleting additional Document type being passed
                            delete oPRT.Fhmar_Vstate; // PRT Category
                            delete oPRT.Doktl_Vstate; //document Type
                            delete oPRT.Dokvr_Vstate; //document version - NG90950 - 29/09/2022
                            delete oPRT.Doknr_Vstate; //document
                            delete oPRT.Matnr_Vstate; //material
                            delete oPRT.Fhwrk_Vstate; //plant
                            // Changes done to perform validations for Item document number
                            delete oPRT.Steuf_Vstate; //control key
                            delete oPRT.Psnfh_Vstate; //item document number
                            delete oPRT.Mgvgw_Vstate; //quantity
                            delete oPRT.sRefOpr;
                            delete oPRT.sLoginMassUpdateUser;
                            //NG90950 - Delete stored suggestion items - 28/09/2022
                            delete oPRT.aSuggestOperationDocumentNum;
                            delete oPRT.aSuggestMaterialNum;
                            delete oPRT.Dokar_Vstate;
                            //V2.3 changes -- StdKey US --- SKAGP1R5
                            delete oPRT.Ktsch_Vstate;
                            delete oPRT.bStdKeyReq;
                            //if operation is deleted sending delete flag to prt as well
                            if (sLoekz) {
                                oPRT.Loekz = true;
                            }
                            // Date Format
                            if (oPRT.Datub) {
                                oPRT.Datub = oPRT.Datub.split("Z")[0];
                            }
                            if (oPRT.Datui) {
                                oPRT.Datui = oPRT.Datui.split("Z")[0];
                            }
                            if (oPRT.Datuv) {
                                oPRT.Datuv = oPRT.Datuv.split("Z")[0];
                            }
                        });
                    });
                    if (this.getView().getModel("oVisibilityModel").getProperty("/sMassUpdateUser") === "X"
                    ) {
                        var oRoutingModificationsLocalModel = this.getOwnerComponent().getModel("oRoutingModel");
                        var sChoosenItem = this.getModel("oVisibilityModel").getProperty("/sSelectedAction");
                        var sCheckedFlag = this.getModel("oVisibilityModel").getProperty("/bMassCheck");
                        var sStatus = this.getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails/Status");
                        var oBundle = this.getView().getModel("i18n").getResourceBundle();
                        if (
                            (sCheckedFlag && sStatus === "MA") ||
                            (sCheckedFlag && sStatus === "MC") ||
                            (sCheckedFlag && sStatus === "MG") ||
                            (sCheckedFlag && sStatus === "MD") ||
                            (sCheckedFlag && sStatus === "ME")
                        ) {
                            sap.m.MessageToast.show(
                                oBundle.getText("update.StatusChangeRestriciton")
                            );
                            return;
                        } else {
                            oRoutingModificationsLocalModel.setProperty("/aTempaleFinalPayload", oCreateScratchPayload);
                            this.fnProceedToRoutingModification();
                        }
                    } else {
                        if (oRoutingHeaderData.Smallci === "X") {
                            //new Small CI 
                            var sStatusExist = false;
                            var sRoutingStatusValue = oRoutingHeaderModel.getProperty("/aHeaderDetails/Status");
                            oDataModel.read("/ET_SMALLCI_StatusesSet", {
                                success: function (oData) {
                                    for (var i = 0; i < oData.results.length; i++) {
                                        if (oData.results[i].Status === sRoutingStatusValue) {
                                            sStatusExist = true;
                                        }
                                    }
                                    if (sStatusExist) {
                                        var sMsg = oBundle.getText("update.SmallCISave");
                                        var stitle = oBundle.getText("update.SmallCISaveHeading");
                                        MessageBox.show(
                                            sMsg,
                                            {
                                                title: stitle,
                                                actions: [MessageBox.Action.YES, MessageBox.Action.NO],
                                                emphasizedAction: MessageBox.Action.YES,
                                                onClose: function (userAction) {
                                                    if (userAction === MessageBox.Action.YES) {
                                                        oCreateScratchPayload.Smallci = "X";
                                                    } else if (userAction === MessageBox.Action.NO) {
                                                        oCreateScratchPayload.Smallci = "";
                                                    }
                                                    oBusyIndicator.open();
                                                    oDataModel.create(
                                                        "/ET_Rout_HdrSet",
                                                        oCreateScratchPayload,
                                                        {
                                                            success: function (responseData) {
                                                                oBusyIndicator.close();
                                                                var visibilityModel = this.getModel("oVisibilityModel");
                                                                // Clear messages and refresh message model
                                                                sap.ui.getCore().getMessageManager().removeAllMessages();
                                                                that.getView().getModel("message").refresh();
                                                                // Set properties in visibility model
                                                                visibilityModel.setProperty("/bSaveVisible", true);
                                                                visibilityModel.setProperty("/bProposedBtnEnabled", true);
                                                                visibilityModel.setProperty("/bUnsavedChange", false);
                                                                visibilityModel.setProperty("/bProposedBtnEnabledTooltip", sBtnProposeToolTip);
                                                                // ... (other property settings)
                                                                var responseObject = {
                                                                    Material: responseData.Material,
                                                                    Plant: responseData.Plant,
                                                                    Group_No: responseData.Group_No,
                                                                    Grp_Cntr: responseData.Grp_Cntr,
                                                                };
                                                                oRoutingModel.setProperty("/aSelectedRowsToCopy", undefined);
                                                                var tableInstances = oRoutingModel.getProperty("/aTableInstances") || [];
                                                                if (tableInstances.length > 0) {
                                                                    for (
                                                                        var i = 0;
                                                                        i < tableInstances.length;
                                                                        i++
                                                                    ) {
                                                                        tableInstances[i].clearSelection();
                                                                    }
                                                                    oRoutingModel.setProperty("/aTableInstances");
                                                                }
                                                                if (sAction === "SAVE") {
                                                                    this.fnHandleSuccessMsg(responseObject);
                                                                } else if (sAction === "SMARTCOPY") {
                                                                    visibilityModel.setProperty("/bSmartCopySuccessHeaderVisible", true);
                                                                    this.fnGetRoutingDetails(responseObject);
                                                                    this.fnOpenSmartCopyPopup();
                                                                } else {
                                                                    this.fnHandleCreateMsg(responseObject);
                                                                }
                                                            }.bind(this),
                                                            error: function (error) {
                                                                oBusyIndicator.close();
                                                                this.fnCheckError(error);
                                                            }.bind(this),
                                                        }
                                                    );
                                                }.bind(this),
                                            }
                                        );
                                    } else {
                                        oBusyIndicator.open();
                                        oDataModel.create("/ET_Rout_HdrSet", oCreateScratchPayload, {
                                            success: function (oData) {
                                                oBusyIndicator.close();
                                                // Clear message manager
                                                sap.ui.getCore().getMessageManager().removeAllMessages();
                                                this.getView().getModel("message").refresh();
                                                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                                                oVisibilityModel.setProperty("/bSaveVisible", true);
                                                oVisibilityModel.setProperty("/bProposedBtnEnabled", true);
                                                oVisibilityModel.setProperty("/bUnsavedChange", false);
                                                oVisibilityModel.setProperty("/bProposedBtnEnabledTooltip", sBtnProposeToolTip);
                                                oVisibilityModel.setProperty("/bProposeQuickAssignBtn", true);
                                                oVisibilityModel.setProperty("/sAlternateGrpCntrForProposedML", "");
                                                oVisibilityModel.setProperty("/ProposeByCategoryAccurate", true);
                                                oVisibilityModel.setProperty("/ProposeByCategoryHigh", true);
                                                oVisibilityModel.setProperty("/ProposeByCategoryMedium", true);
                                                oVisibilityModel.setProperty("/ProposeByCategoryLow", true);
                                                oVisibilityModel.setProperty("/ProposeByCategoryAccurateIcon", false);
                                                oVisibilityModel.setProperty("/ProposeByCategoryHighIcon", false);
                                                oVisibilityModel.setProperty("/ProposeByCategoryMediumIcon", false);
                                                oVisibilityModel.setProperty("/ProposeByCategoryLowIcon", false);
                                                oVisibilityModel.setProperty("/bProposeAllocateBtnVisible", false);
                                                oVisibilityModel.setProperty("/bBOMSplitBtnEnabled", true);
                                                oVisibilityModel.setProperty("/sGobalExpand", true);
                                                oVisibilityModel.setProperty("/sGobalCollapse", false);
                                                var oObj = {
                                                    Material: oData.Material,
                                                    Plant: oData.Plant,
                                                    Group_No: oData.Group_No,
                                                    Grp_Cntr: oData.Grp_Cntr,
                                                };
                                                //clear copy PRTs instance when user saves 
                                                oRoutingModel.setProperty("/aSelectedRowsToCopy", undefined);
                                                //table selection and instances when user saves 
                                                var aTableInstances = oRoutingModel.getProperty("/aTableInstances") || [];
                                                if (aTableInstances.length > 0) {
                                                    for (var k = 0; k < aTableInstances.length; k++) {
                                                        aTableInstances[k].clearSelection();
                                                    }
                                                    oRoutingModel.setProperty("/aTableInstances");
                                                }
                                                if (sAction === "SAVE") {
                                                    this.fnHandleSuccessMsg(oObj);
                                                } else if (sAction === "SMARTCOPY") {
                                                    oVisibilityModel.setProperty(
                                                        "/bSmartCopySuccessHeaderVisible", true
                                                    );
                                                    this.fnGetRoutingDetails(oObj);
                                                    this.fnOpenSmartCopyPopup();
                                                } else {
                                                    this.fnHandleCreateMsg(oObj);
                                                }
                                            }.bind(this),
                                            error: function (error) {
                                                oBusyIndicator.close();
                                                this.fnCheckError(error);
                                            }.bind(this),
                                        });
                                    }
                                }.bind(this),
                                error: function (error) { console.log(error); },
                            });
                        }
                        else {
                            oBusyIndicator.open();
                            oDataModel.create("/ET_Rout_HdrSet", oCreateScratchPayload, {
                                success: function (oData) {
                                    oBusyIndicator.close();
                                    // Clear message manager
                                    sap.ui.getCore().getMessageManager().removeAllMessages();
                                    this.getView().getModel("message").refresh();
                                    var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                                    oVisibilityModel.setProperty("/bSaveVisible", true);
                                    oVisibilityModel.setProperty("/bProposedBtnEnabled", true);
                                    oVisibilityModel.setProperty("/bUnsavedChange", false);
                                    oVisibilityModel.setProperty("/bProposedBtnEnabledTooltip", sBtnProposeToolTip);
                                    oVisibilityModel.setProperty("/bProposeQuickAssignBtn", true);
                                    oVisibilityModel.setProperty("/sAlternateGrpCntrForProposedML", "");
                                    oVisibilityModel.setProperty("/ProposeByCategoryAccurate", true);
                                    oVisibilityModel.setProperty("/ProposeByCategoryHigh", true);
                                    oVisibilityModel.setProperty("/ProposeByCategoryMedium", true);
                                    oVisibilityModel.setProperty("/ProposeByCategoryLow", true);
                                    oVisibilityModel.setProperty("/ProposeByCategoryAccurateIcon", false);
                                    oVisibilityModel.setProperty("/ProposeByCategoryHighIcon", false);
                                    oVisibilityModel.setProperty("/ProposeByCategoryMediumIcon", false);
                                    oVisibilityModel.setProperty("/ProposeByCategoryLowIcon", false);
                                    oVisibilityModel.setProperty("/bProposeAllocateBtnVisible", false);
                                    oVisibilityModel.setProperty("/bBOMSplitBtnEnabled", true);
                                    oVisibilityModel.setProperty("/sGobalExpand", true);
                                    oVisibilityModel.setProperty("/sGobalCollapse", false);
                                    var oObj = {
                                        Material: oData.Material,
                                        Plant: oData.Plant,
                                        Group_No: oData.Group_No,
                                        Grp_Cntr: oData.Grp_Cntr,
                                    };
                                    //clear copy PRTs instance when user saves - NG90950 - 22/09/2022
                                    oRoutingModel.setProperty("/aSelectedRowsToCopy", undefined);
                                    //table selection and instances when user saves - NG90950 - 26/09/2022
                                    var aTableInstances = oRoutingModel.getProperty("/aTableInstances") || [];
                                    if (aTableInstances.length > 0) {
                                        for (var k = 0; k < aTableInstances.length; k++) {
                                            aTableInstances[k].clearSelection();
                                        }
                                        oRoutingModel.setProperty("/aTableInstances");
                                    }
                                    if (sAction === "SAVE") {
                                        this.fnHandleSuccessMsg(oObj);
                                    } else if (sAction === "SMARTCOPY") {
                                        oVisibilityModel.setProperty("/bSmartCopySuccessHeaderVisible", true);
                                        this.fnGetRoutingDetails(oObj);
                                        this.fnOpenSmartCopyPopup();
                                    } else {
                                        this.fnHandleCreateMsg(oObj);
                                    }
                                }.bind(this),
                                error: function (error) {
                                    oBusyIndicator.close();
                                    this.fnCheckError(error);
                                }.bind(this),
                            });
                        }
                    }
                } else {
                    var aErrors = [];
                    var oBundle = this.getView().getModel("i18n").getResourceBundle();
                    // Clear message manager first to avoid duplicate messages.
                    var oMessageManager = sap.ui.getCore().getMessageManager();
                    oMessageManager.removeAllMessages();
                    // Empty Task List Description validation in routing header
                    if (!oRoutingHeaderData.Task_List_Desc) {
                        aErrors.push({
                            TaskListDescError: oBundle.getText("update.errortaskdesc"),
                        });
                        oMessageManager.addMessages(
                            new Message({
                                message: oBundle.getText("update.errortaskdesc"),
                            })
                        );
                    } else {
                        oMessageManager.removeMessages(
                            new Message({
                                message: oBundle.getText("update.errortaskdesc"),
                            })
                        );
                    }
                    // Empty Status validation in routing header
                    if (!oRoutingHeaderData.Status) {
                        aErrors.push({
                            StatusError: oBundle.getText("update.errormsgstatus"),
                        });
                        oMessageManager.addMessages(
                            new Message({
                                message: oBundle.getText("update.errormsgstatus"),
                            })
                        );
                    } else {
                        oMessageManager.removeMessages(
                            new Message({
                                message: oBundle.getText("update.errormsgstatus"),
                            })
                        );
                    }
                    // Empty Usage validation in routing header
                    if (!oRoutingHeaderData.Verwe) {
                        aErrors.push({
                            UsageError: oBundle.getText("update.errormsgusage"),
                        });
                        oMessageManager.addMessages(
                            new Message({
                                message: oBundle.getText("update.errormsgusage"),
                            })
                        );
                    } else {
                        oMessageManager.removeMessages(
                            new Message({
                                message: oBundle.getText("update.errormsgusage"),
                            })
                        );
                    }
                    // Empty CAPP order work center in routing header
                    if (oRoutingHeaderModel.getProperty("/aHeaderDetails/KapArbpl") == '' && oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant") == "FFF1") {
                        aErrors.push({
                            CAPPWCError: oBundle.getText("update.errormsgcappwc"),
                        });
                        oMessageManager.addMessages(
                            new Message({
                                message: oBundle.getText("update.errormsgcappwc"),
                            })
                        );
                    } else {
                        oMessageManager.removeMessages(
                            new Message({
                                message: oBundle.getText("update.errormsgcappwc"),
                            })
                        );
                    }
                    // Validate PRT items
                    aOperationItems.map(function (oOpr) {
                        // Operation level
                        var aPRT = oOpr.PRT.results;
                        var iOperationNo = oOpr.Vornr;
                        // Plant validation if empty
                        var sPlant = oOpr.Werks;
                        if (sPlant === "") {
                            aErrors.push({
                                PlantError: oBundle.getText("update.errormsgplant", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgplant", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgplant", iOperationNo),
                                })
                            );
                        }
                        // WC validation if empty
                        var sWC = oOpr.Arbpl;
                        if (sWC === "" || sWC === undefined) {
                            aErrors.push({
                                WCError: oBundle.getText("update.errormsgwc", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgwc", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgwc", iOperationNo),
                                })
                            );
                        }
                        // Validate Item doc number
                        var aItemDoc = aPRT.filter(function (item) {
                            return item.Psnfh === "";
                        });
                        if (aItemDoc.length > 0) {
                            aErrors.push({
                                ItemDocError: oBundle.getText("update.errormsgitemdoc", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgitemdoc", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgitemdoc", iOperationNo),
                                })
                            );
                        }
                        // Validate PRT category
                        var aPRTCat = aPRT.filter(function (item) {
                            return item.Fhmar === "";
                        });
                        if (aPRTCat.length > 0) {
                            aErrors.push({
                                PRTCatError: oBundle.getText("update.errormsgprtcat", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgprtcat", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgprtcat", iOperationNo),
                                })
                            );
                        }
                        // Validate Document field
                        var aDocument = aPRT.filter(function (item) {
                            return item.Doknr === "" && item.Fhmar === "D";
                        });
                        if (aDocument.length > 0) {
                            aErrors.push({
                                PRTDocumentError: oBundle.getText("update.errormsgdocument", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgdocument", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgdocument", iOperationNo),
                                })
                            );
                        }
                        // Validate Document field 
                        var aDocumentValueState = aPRT.filter(function (item) {
                            return (
                                item.Doknr &&
                                item.Doknr !== "" &&
                                item.Doknr_Vstate === "Error" &&
                                item.Fhmar === "D"
                            );
                        });
                        if (aDocumentValueState.length > 0) {
                            aErrors.push({
                                PRTDocumentError: oBundle.getText("update.invaliddoc", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.invaliddoc", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.invaliddoc", iOperationNo),
                                })
                            );
                        }
                        // Validate Document part NG90950 - 07/10/2022
                        var aDocumentPart = aPRT.filter(function (item) {
                            return (
                                item.Doknr &&
                                item.Doknr !== "" &&
                                item.Doknr_Vstate !== "Error" &&
                                item.Fhmar === "D" &&
                                (!item.Doktl || item.Doktl === "")
                            );
                        });
                        if (aDocumentPart.length > 0) {
                            aErrors.push({
                                PRTDocumentError: oBundle.getText("update.nodocpart", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.nodocpart", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.nodocpart", iOperationNo),
                                })
                            );
                        }
                        // Validate Document version
                        var aDocumentVer = aPRT.filter(function (item) {
                            return (
                                item.Doknr &&
                                item.Doknr !== "" &&
                                item.Doknr_Vstate !== "Error" &&
                                item.Fhmar === "D" &&
                                (!item.Dokvr || item.Dokvr === "")
                            );
                        });
                        if (aDocumentVer.length > 0) {
                            aErrors.push({
                                PRTDocumentError: oBundle.getText("update.nodocver", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.nodocver", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.nodocver", iOperationNo),
                                })
                            );
                        }
                        // Validate Document part field - 
                        var aDocumentPartValueState = aPRT.filter(function (item) {
                            return (
                                (item.Doktl || item.Doktl !== "") &&
                                item.Doktl_Vstate === "Error" &&
                                item.Fhmar === "D"
                            );
                        });
                        if (aDocumentPartValueState.length > 0) {
                            aErrors.push({
                                PRTDocumentError: oBundle.getText("update.invalidpart", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.invalidpart", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.invalidpart", iOperationNo),
                                })
                            );
                        }
                        // Validate Document version field -
                        var aDocumentVerValueState = aPRT.filter(function (item) {
                            return (
                                (item.Dokvr || item.Dokvr !== "") &&
                                item.Dokvr_Vstate === "Error" &&
                                item.Fhmar === "D"
                            );
                        });
                        if (aDocumentVerValueState.length > 0) {
                            aErrors.push({
                                PRTDocumentError: oBundle.getText("update.invalidver", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.invalidver", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.invalidver", iOperationNo),
                                })
                            );
                        }
                        // Validate Control key number
                        var aControlKey = aPRT.filter(function (item) {
                            return item.Steuf === "";
                        });
                        if (aControlKey.length > 0) {
                            aErrors.push({
                                ControlKeyError: oBundle.getText("update.errormsgcontrolkey", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgcontrolkey", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgcontrolkey", iOperationNo),
                                })
                            );
                        }
                        //V2.3 changes -- StdKey US
                        if (!oOpr.sRefOpr && oOpr.bStdKeyReq) {
                            var aStdKeys = aPRT.filter(function (item) {
                                return item.Ktsch === "" && item.Fhmar === "M";
                            });
                            if (aStdKeys.length > 0) {
                                aErrors.push({
                                    standardkeyError: oBundle.getText("update.errMsgstandardkey", iOperationNo),
                                });
                                oMessageManager.addMessages(
                                    new Message({
                                        message: oBundle.getText("update.errMsgstandardkey", iOperationNo),
                                    })
                                );
                            } else {
                                oMessageManager.removeMessages(
                                    new Message({
                                        message: oBundle.getText("update.errMsgstandardkey", iOperationNo),
                                    })
                                );
                            }
                        }
                        // Validate Material number
                        var aMatnum = aPRT.filter(function (item) {
                            return item.Matnr === "" && item.Fhmar === "M";
                        });
                        if (aMatnum.length > 0) {
                            aErrors.push({
                                MatNumError: oBundle.getText("update.errormsgmaterial", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgmaterial", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgmaterial", iOperationNo),
                                })
                            );
                        }
                        // Validate Material number NG90950 - 07/10/2022
                        var aMatrnum = aPRT.filter(function (item) {
                            return (
                                item.Matnr &&
                                item.Matnr !== "" &&
                                item.Matnr_Vstate === "Error" &&
                                item.Fhmar === "M"
                            );
                        });
                        if (aMatrnum.length > 0) {
                            aErrors.push({
                                MatNumError: oBundle.getText("update.invalidmat", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.invalidmat", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.invalidmat", iOperationNo),
                                })
                            );
                        }
                        // Validate Quantity number
                        var aQuantity = aPRT.filter(function (item) {
                            return item.Mgvgw_Vstate === "Error";
                        });
                        if (aQuantity.length > 0) {
                            aErrors.push({
                                QuantityError: oBundle.getText("update.errormsgquantity", iOperationNo),
                            });
                            oMessageManager.addMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgquantity", iOperationNo),
                                })
                            );
                        } else {
                            oMessageManager.removeMessages(
                                new Message({
                                    message: oBundle.getText("update.errormsgquantity", iOperationNo),
                                })
                            );
                        }
                    });
                    oRoutingModel.setProperty("/aErrorMessages", aErrors);
                    if (aErrors.length > 0) {
                        if (!this.oMessage) {
                            this.oMessage = sap.ui.xmlfragment(
                                "com.airbus.zcfe2meautorc.fragment.ErrorMessages", this
                            );
                            this.getView().addDependent(this.oMessage);
                        }
                        this.oMessage.open();
                        oRoutingModel.refresh(true);
                    }
                }
            },
            /**This method used to prompt sucess message and navigate appropriately */
            fnHandleSuccessMsg: function (oObj) {
                var isKeyuser = this.getView().getModel("oRoutingModel").getProperty("/keyUser");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sSaveMsg = oBundle.getText("update.savemsg", [oObj.Group_No, oObj.Grp_Cntr,]);
                var sContinueEdit = oBundle.getText("update.continueedit");
                var sHome = oBundle.getText("update.homescreen");
                var sSuccess = oBundle.getText("success");
                var sFormattedSaveMsg = new sap.m.FormattedText({ htmlText: sSaveMsg, });
                this.getModel("oVisibilityModel").setProperty("/bUnsavedSelectAltBom", true);
                var that = this;
                MessageBox.success(sFormattedSaveMsg, {
                    title: sSuccess,
                    actions: [sContinueEdit, sHome],
                    emphasizedAction: sContinueEdit,
                    initialFocus: sContinueEdit,
                    styleClass: "msgBoxWidthCls",
                    onClose: function (sAction) {
                        if (sAction === sHome) {
                            sap.ushell.Container.setDirtyFlag(false);
                            if (isKeyuser === "X") {
                                that.getOwnerComponent().getRouter().navTo("CreateTemplate");
                            } else {
                                that.getOwnerComponent().getRouter().navTo("CreateRouting");
                            }
                        } else {
                            that.fnGetRoutingDetails(oObj); //To fetch the routing details
                        }
                    },
                });
            },
            /* oOprItems This method used to check manadatory fields and set value state*/
            fnCheckMandateCreateRouting: function (oOprItems, isKeyuser) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var bMandate = true;
                oOprItems.map(function (oOpr) {
                    // Operation level
                    var aPRT = oOpr.PRT.results;
                    var sdelFlag = oOpr.Loekz || false;
                    if (oOpr.Vplnr === "" && !sdelFlag) {
                        //Reference Group  and delflag of operation
                        // Plant
                        if (!oOpr.Werks) {
                            oOpr.Werks_Vstate = "Error";
                            bMandate = false;
                        } else {
                            oOpr.Werks_Vstate = "None";
                        }
                        // WorkCenter
                        if (!oOpr.Arbpl && oOpr.SLWID !== "ZMEAUTO") {
                            //S-Route Special operation check
                            oOpr.Arbpl_Vstate = "Error";
                            bMandate = false;
                        } else {
                            oOpr.Arbpl_Vstate = "None";
                        }
                    }
                    // setuptime and labourtime
                    if (oOpr.Vgw01_Vstate === "Error") {
                        bMandate = false;
                    } else {
                        oOpr.Vgw01_Vstate = "None";
                    }
                    if (oOpr.Vgw02_Vstate === "Error") {
                        bMandate = false;
                    } else {
                        oOpr.Vgw02_Vstate = "None";
                    }
                    if (oOpr.Anzma_Vstate === "Error") {
                        bMandate = false;
                    } else {
                        oOpr.Anzma_Vstate = "None";
                    }
                    if (isKeyuser === "X" && !sdelFlag && oOpr.SLWID === "ZMEAUTO") {
                        //Key user  and delflag of operation and keyfield
                        if (!oOpr.USR00) {
                            // group
                            oOpr.USR00_Vstate = "Error";
                            bMandate = false;
                        } else {
                            oOpr.USR00_Vstate = "None";
                        }
                        if (!oOpr.USR02) {
                            // group counter
                            oOpr.USR02_Vstate = "Error";
                            bMandate = false;
                        } else {
                            oOpr.USR02_Vstate = "None";
                        }
                        var sUSR03Txt = oBundle.getText("update.intervalmsg");
                        if (oOpr.USR03 === "" || oOpr.USR03 === undefined) {
                            // interval
                            oOpr.USR03_Vstate = "Error";
                            bMandate = false;
                            oOpr.USR03_VstateText = "";
                        } else if (oOpr.USR03 > 999 || oOpr.USR03 < 1) {
                            bMandate = false;
                            oOpr.USR03_Vstate = "Error";
                            oOpr.USR03_VstateText = sUSR03Txt;
                        } else {
                            oOpr.USR03_VstateText = "";
                            oOpr.USR03_Vstate = "None";
                        }
                    } else if (!sdelFlag && oOpr.Vplnr !== "") {
                        //end user ,  Reference Group  and delflag of operation
                        // Reference Group
                        if (!oOpr.Vplnr) {
                            oOpr.Vplnr_Vstate = "Error";
                            bMandate = false;
                        } else {
                            oOpr.Vplnr_Vstate = "None";
                        }
                        // Reference Group Counter
                        if (!oOpr.Vplal) {
                            oOpr.Vplal_Vstate = "Error";
                            bMandate = false;
                        } else {
                            oOpr.Vplal_Vstate = "None";
                        }
                    }
                    if (!sdelFlag) {
                        aPRT.map(function (oPRT) {
                            var sDelPRTFlag = oPRT.Loekz || false;
                            if (!sDelPRTFlag) {
                                // PRT level
                                if (!oPRT.Fhmar) {
                                    // PRT Category
                                    oPRT.Fhmar_Vstate = "Error";
                                    bMandate = false;
                                } else {
                                    oPRT.Fhmar_Vstate = "None";
                                    if (oPRT.Fhmar === "D") {
                                        if (!oPRT.Doknr || oPRT.Doknr_Vstate === "Error") {
                                            //document check error status 
                                            oPRT.Doknr_Vstate = "Error";
                                            bMandate = false;
                                        } else {
                                            oPRT.Doknr_Vstate = "None";
                                        }
                                        if (!oPRT.Dokar) {
                                            //document type check error status
                                            oPRT.Dokar_Vstate = "Error";
                                            bMandate = false;
                                        } else {
                                            oPRT.Dokar_Vstate = "None";
                                        }

                                        if (!oPRT.Doktl || oPRT.Doktl_Vstate === "Error") {
                                            //document part check error status 
                                            oPRT.Doktl_Vstate = "Error";
                                            bMandate = false;
                                        } else {
                                            oPRT.Doktl_Vstate = "None";
                                        }
                                        if (!oPRT.Dokvr || oPRT.Dokvr_Vstate === "Error") {
                                            //document  check error status 
                                            oPRT.Dokvr_Vstate = "Error";
                                            bMandate = false;
                                        } else {
                                            oPRT.Doknr_Vstate = "None";
                                        }
                                    } else if (oPRT.Fhmar === "M") {
                                        if (!oPRT.Matnr) {
                                            //material
                                            oPRT.Matnr_Vstate = "Error";
                                            bMandate = false;
                                        } else {
                                            oPRT.Matnr_Vstate = "None";
                                        }
                                        if (!oPRT.Fhwrk) {
                                            //plant
                                            oPRT.Fhwrk_Vstate = "Error";
                                            bMandate = false;
                                        } else {
                                            oPRT.Fhwrk_Vstate = "None";
                                        }
                                    }
                                }
                                if (!oPRT.Steuf) {
                                    //control key
                                    oPRT.Steuf_Vstate = "Error";
                                    bMandate = false;
                                } else {
                                    oPRT.Steuf_Vstate = "None";
                                }
                                // Changes done to perform validations for Item document number
                                if (!oPRT.Psnfh) {
                                    //item document number
                                    oPRT.Psnfh_Vstate = "Error";
                                    bMandate = false;
                                } else {
                                    oPRT.Psnfh_Vstate = "None";
                                }
                                if (!oPRT.Mgvgw) {
                                    //quantity
                                    oPRT.Mgvgw_Vstate = "Error";
                                    bMandate = false;
                                } else {
                                    oPRT.Mgvgw_Vstate = "None";
                                }
                                // v2.3 changes --- stdKey US
                                if (
                                    !oOpr.sRefOpr &&
                                    oOpr.bStdKeyReq &&
                                    oPRT.Ktsch === "" &&
                                    oPRT.Fhmar === "M" &&
                                    oOpr.Plnty === "N"
                                ) {
                                    oPRT.Ktsch_Vstate = "Error";
                                    bMandate = false;
                                } else {
                                    oPRT.Ktsch_Vstate = "None";
                                }
                            }
                        });
                    }
                });
                return bMandate;
            },
            fnProceedToRoutingModification: function () {
                var that = this;
                var oRoutingHeaderModel = that.getOwnerComponent().getModel("oRoutingHeaderModel");
                var oRoutingModificationsLocalModel = that.getOwnerComponent().getModel("oRoutingModel");
                var MUSelectionList = oRoutingHeaderModel.getProperty("/oActionListData");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var sChoosenItem = oVisibilityModel.getProperty("/sSelectedAction");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var aOpData = oOperationItemsModel.getProperty("/aOperationItems");
                var aExistingList = oOperationItemsModel.getProperty("/sOperationList");
                if (sChoosenItem === "1") {
                    var aNewOprs = [];
                    for (var i = 0; i < aOpData.length; i++) {
                        var aOperDataAvailable = [];
                        aOperDataAvailable = aExistingList.filter(function (oEle) {
                            return oEle["sOprText"] === aOpData[i].Vornr;
                        });
                        if (aOperDataAvailable.length !== 1) {
                            aOpData[i].Opr_Mass = "X";
                            aNewOprs.push({
                                sOprText: aOpData[i].Vornr,
                            });
                        }
                    }
                    oOperationItemsModel.updateBindings(true);
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateAffectedOperationList", aNewOprs);
                    if (aNewOprs.length > 0) {
                        var sOprFormat = "";
                        for (var j = 0; j < aNewOprs.length; j++) {
                            sOprFormat = sOprFormat + aNewOprs[j].sOprText + ";";
                        }
                        oRoutingModificationsLocalModel.setProperty("/aMassUpdateSelectedOprFormatForBackend", sOprFormat.slice(0, -1));
                    } else {
                        oRoutingModificationsLocalModel.setProperty("/aMassUpdateSelectedOprFormatForBackend", "");
                    }
                } else if (sChoosenItem === "2") {
                    var aRemOprs = [];
                    for (var i = 0; i < aOpData.length; i++) {
                        if (aOpData[i].Loekz === true) {
                            aOpData[i].Opr_Mass = "X";
                            aRemOprs.push({
                                sOprText: aOpData[i].Vornr,
                            });
                        }
                    }
                    oOperationItemsModel.updateBindings(true);
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateAffectedOperationList", aRemOprs);
                    if (aRemOprs.length > 0) {
                        var sOprFormat = "";
                        for (var j = 0; j < aRemOprs.length; j++) {
                            sOprFormat = sOprFormat + aRemOprs[j].sOprText + ";";
                        }
                        oRoutingModificationsLocalModel.setProperty("/aMassUpdateSelectedOprFormatForBackend", sOprFormat.slice(0, -1));
                    } else {
                        oRoutingModificationsLocalModel.setProperty("/aMassUpdateSelectedOprFormatForBackend", "");
                    }
                } else if (sChoosenItem === "3") {
                    var aNewWorkCenters = [];
                    var aSelectedOps = this.getView().byId("oOperationCombo").getSelectedKeys();
                    var aExistWorkCenters = oRoutingModificationsLocalModel.getProperty("/aMassUpdateExistWorkCenters");
                    for (var i = 0; i < aSelectedOps.length; i++) {
                        var aOperDataAvailable = aOpData.filter(function (oEle) {
                            return (
                                oEle["Vornr"] === aExistWorkCenters[i].sOprNo &&
                                oEle["Arbpl"] !== aExistWorkCenters[i].sWorkCenter
                            );
                        });
                        if (aOperDataAvailable[0] !== undefined) {
                            aOperDataAvailable[0].Opr_Mass = "X";
                            aNewWorkCenters.push({
                                sNewWorkCenter: aOperDataAvailable[0].Arbpl,
                                sOldWorkCenter: aExistWorkCenters[i].sWorkCenter,
                                sOprNo: aOperDataAvailable[0].Vornr,
                            });
                        }
                    }
                    oOperationItemsModel.updateBindings(true);
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateModifiedWorkCenters", aNewWorkCenters);
                } else if (sChoosenItem === "4") {
                    var aNewShrtTxtDesc = [];
                    var aSelectedOps = this.getView().byId("oOperationCombo").getSelectedKeys();
                    var aExistShrtTxtDesc = oRoutingModificationsLocalModel.getProperty("/aMassUpdateExistShrtTxtDesc");
                    for (var i = 0; i < aSelectedOps.length; i++) {
                        var aOperDataAvailable = aOpData.filter(function (oEle) {
                            return (
                                oEle["Vornr"] === aExistShrtTxtDesc[i].sOprNo &&
                                oEle["Ltxa1"] !== aExistShrtTxtDesc[i].sShrtDesc
                            );
                        });
                        if (aOperDataAvailable[0] !== undefined) {
                            aOperDataAvailable[0].Opr_Mass = "X";
                            aNewShrtTxtDesc.push({
                                sNewShortTxt: aOperDataAvailable[0].Ltxa1,
                                sOldShortTxt: aExistShrtTxtDesc[i].sShrtDesc,
                                sOprNo: aOperDataAvailable[0].Vornr,
                            });
                        }
                    }
                    oOperationItemsModel.updateBindings(true);
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateModifiedShortTxtDesc", aNewShrtTxtDesc);
                } else if (sChoosenItem === "5") {
                    var aNewLngTxtDesc = [];
                    var aSelectedOps = this.getView().byId("oOperationCombo").getSelectedKeys();
                    var aExistLngTxtDesc = oRoutingModificationsLocalModel.getProperty("/aMassUpdateExistLngTxtDesc");
                    for (var i = 0; i < aSelectedOps.length; i++) {
                        var aOperDataAvailable = aOpData.filter(function (oEle) {
                            return oEle["Vornr"] === aExistLngTxtDesc[i].sOprNo;
                        });
                        if (aOperDataAvailable[0] !== undefined) {
                            aOperDataAvailable[0].Opr_Mass = "X";
                            aNewLngTxtDesc.push({
                                sOprNo: aOperDataAvailable[0].Vornr,
                            });
                        }
                    }
                    oOperationItemsModel.updateBindings(true);
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateModifiedLngTxtDesc", aNewLngTxtDesc);
                } else if (sChoosenItem === "6" || sChoosenItem === "7") {
                    var aNewPRTDesc = [];
                    var aSelectedOps = this.getView().byId("oOperationCombo").getSelectedKeys();
                    var aExistPRTDesc = oRoutingModificationsLocalModel.getProperty("/aMassUpdateExistPRTDesc");
                    for (var i = 0; i < aSelectedOps.length; i++) {
                        var aOperDataAvailable = aOpData.filter(function (oEle) {
                            return oEle["Vornr"] === aExistPRTDesc[i].sOprNo;
                        });
                        if (aOperDataAvailable[0] !== undefined) {
                            aNewPRTDesc.push({
                                sOprNo: aOperDataAvailable[0].Vornr,
                            });
                        }
                    }
                    oRoutingModificationsLocalModel.setProperty("/aMassUpdateModifiedPRTDesc", aNewPRTDesc);
                }
                sap.ushell.Container.setDirtyFlag(false);
                this.getOwnerComponent().getRouter().navTo("RoutingModification");
            },
            /*This method used to fetch Routing details */
            fnGetRoutingDetails: function (oObj, mode) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oVisibilityModel = this.getView().getModel('oVisibilityModel');
                var sKeyUser = oRoutingModel.getProperty("/keyUser");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sBOMStatusMsg = oBundle.getText("proposal.BOMStatusMsg");
                var sBtnProposeToolTip = oBundle.getText("proposal.BtnTxtToolTip");
                if (oObj !== undefined) {
                    if (oObj.Material && oObj.Plant && oObj.Group_No && oObj.Grp_Cntr) {
                        //This is to pass filter for Key User and End User
                        if (sKeyUser === "X") {
                            oObj.Task_type = "S";
                        } else {
                            oObj.Task_type = "N";
                        }
                        // End
                        var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                        var aFilters = [new sap.ui.model.Filter("Material", FilterOperator.EQ, oObj.Material),
                        new sap.ui.model.Filter("Plant", FilterOperator.EQ, oObj.Plant),
                        new sap.ui.model.Filter("Group_No", FilterOperator.EQ, oObj.Group_No),
                        new sap.ui.model.Filter("Grp_Cntr", FilterOperator.EQ, oObj.Grp_Cntr),
                        new sap.ui.model.Filter("Task_type", FilterOperator.EQ, oObj.Task_type)
                        ];
                        var oBusyIndicator = new BusyDialog();
                        oBusyIndicator.open();
                        oDataModel.read("/ET_Rout_HdrSet", {
                            filters: aFilters,
                            async: true,
                            urlParameters: {
                                "$expand": ["Long_Text", "Operation/Long_Text", "Operation/PRT", "Classification", "Classification_DrpDown", "Multiple_AOCIs", "BOM/Items",
                                    "Operation/OprUserFields"
                                ]
                            },
                            success: function (oData) {
                                oBusyIndicator.close();
                                if (oData.results.length > 0) {
                                    this.getView().getModel("oRoutingHeaderModel").setProperty("/aHeaderDetails", oData.results[0]);
                                    var oRoutingModificationsLocalModel = this.getView().getModel("oRoutingModel");
                                    var sAOCIData = oData.results[0].Material;
                                    var oBundle = this.getView().getModel("i18n").getResourceBundle();
                                    var aAOCIArray = [sAOCIData];
                                    oRoutingModificationsLocalModel.setProperty("/sSelectedMultiAOCI", aAOCIArray);
                                    oRoutingModificationsLocalModel.setProperty("/sMAOCI", oData.results[0].Multiple_AOCIs.results);
                                    oRoutingModificationsLocalModel.setProperty("/sRMSelectedPlant", oData.results[0].Plant);
                                    oRoutingModificationsLocalModel.setProperty("/sStatusValidation", oData.results[0].Status);
                                    var aMulAOCI = oRoutingModificationsLocalModel.getProperty("/sMAOCI");
                                    if (aMulAOCI.length > 1 && this.getView().getModel('oVisibilityModel').getProperty('/sMassUpdateUser') === 'X') {
                                        var aAOCIData = [];
                                        for (var i = 0; aMulAOCI.length > i; i++) {
                                            var sAOCI = aMulAOCI[i].Material;
                                            aAOCIData.push(sAOCI);
                                        }
                                        var sAOCIList = aAOCIData.join(", ");
                                        var sMultiAOCimessage = oBundle.getText("update.MultiAOCI");
                                        MessageBox.information(sMultiAOCimessage + " " + sAOCIList);
                                    }
                                    if (sKeyUser === "X") {
                                        //add propoerties to AOCI data for UI porpose
                                        if (oData.results[0].Multiple_AOCIs.results.length > 0) {
                                            for (var k = 0; k < oData.results[0].Multiple_AOCIs.results.length; k++) {
                                                oData.results[0].Multiple_AOCIs.results[k].bExistingRecord = "X";
                                                oData.results[0].Multiple_AOCIs.results[k].bValidationStatusAOCI = "None";
                                                oData.results[0].Multiple_AOCIs.results[k].bValidationStatusPlant = "None";
                                                oData.results[0].Multiple_AOCIs.results[k].bDelBtnEnabled = true;
                                            }
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/aAOCIData", oData.results[0].Multiple_AOCIs.results);
                                        } else {
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/aAOCIData", []);
                                        }
                                    } else {
                                        if (oData.results[0].BOM.results[0].BomStatus === "12" || oData.results[0].BOM.results[0].BomStatus === "11" || oData.results[0].BOM.results[0].BomStatus === "10") {
                                            this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", true);
                                            this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBtnProposeToolTip);
                                        } else {
                                            this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", false);
                                            this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBOMStatusMsg);
                                        }
                                    }
                                    this.getView().getModel("oRoutingModel").setProperty("/sSetAllocDateAvailable", "No");
                                    //Fetch Classification details
                                    var aClassification = oData.results[0].Classification.results;
                                    if (aClassification.length > 0) {
                                        jQuery.each(aClassification, function (index, oClassification) {
                                            if (oClassification.CHARACT === "DEBITOR") {
                                                this.getView().getModel("oRoutingHeaderModel").setProperty("/DEBITOR", oClassification.VALUE_NEUTRAL);
                                            } else if (oClassification.CHARACT === "PLAN_INDEX") {
                                                this.getView().getModel("oRoutingHeaderModel").setProperty("/PLAN_INDEX", oClassification.VALUE_NEUTRAL);
                                            } else if (oClassification.CHARACT === "ME_AUTO_ALLOC_DATE") {
                                                if (this.getView().getModel("oRoutingModel").getProperty("/sRadioMode") !== "New") {
                                                    this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDate", oClassification.VALUE_NEUTRAL);
                                                    this.getView().getModel("oRoutingModel").setProperty("/selectedCIPlantSetDate", oClassification.VALUE_NEUTRAL);
                                                    this.getView().getModel("oRoutingModel").setProperty("/sSetAllocDateAvailable", "Yes");
                                                }
                                            } else if (oClassification.CHARACT === "ME_AUTO_ALLOC_DATE_TYPE") {
                                                if (this.getView().getModel("oRoutingModel").getProperty("/sRadioMode") !== "New") {
                                                    this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDateMode", oClassification.VALUE_NEUTRAL);
                                                }
                                            }
                                            else if (oClassification.CHARACT === "ME_AUTO_ALLOC_DATE_SOURCE") {
                                                if (this.getView().getModel("oRoutingModel").getProperty("/sRadioMode") !== "New") {
                                                    this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDateSourceSelected", oClassification.VALUE_NEUTRAL);
                                                }
                                            }
                                        }.bind(this));
                                    } else {
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/DEBITOR", "");
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/PLAN_INDEX", "");
                                        if (this.getView().getModel("oRoutingModel").getProperty("/selectedCIPlantSetDate") &&
                                            this.getView().getModel("oRoutingModel").getProperty("/sSetAllocDateConsidered") === "Y") {
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDate", this.getView().getModel("oRoutingModel").getProperty("/selectedCIPlantSetDate"));
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDateMode", "CREATION DATE");
                                        } else {
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDate", "");
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDateMode", "");
                                            this.getView().getModel("oRoutingHeaderModel").setProperty("/AllocDateSourceSelected", "");
                                        }
                                    }
                                    var Classification_DrpDown = oData.results[0].Classification_DrpDown.results;
                                    var previousObject = {};
                                    var iSourcelength = Classification_DrpDown.length,
                                        sAllocSource = this.getView().getModel("oRoutingHeaderModel").getProperty("/AllocDateSourceSelected"),
                                        sManlDate = this.getView().getModel("oRoutingHeaderModel").getProperty("/AllocDate"),
                                        sManlType = this.getView().getModel("oRoutingHeaderModel").getProperty("/AllocDateMode");
                                    this.getModel("oRoutingHeaderModel").setProperty("/AllocSourceLength", iSourcelength);
                                    if (Classification_DrpDown.length > 0) {
                                        jQuery.each(Classification_DrpDown, function (index, oClassification) {
                                            if (oClassification.CHARACT === "ME_AUTO_ALLOC_DATE") {
                                                previousObject.sDate = oClassification.VALUE_NEUTRAL;
                                            }
                                            if (oClassification.CHARACT === "ME_AUTO_ALLOC_DATE_TYPE") {
                                                previousObject.sDateType = oClassification.VALUE_NEUTRAL;
                                            }
                                            if (oClassification.CHARACT === "ME_AUTO_ALLOC_DATE_SOURCE") {
                                                if (this.getView().getModel("oRoutingModel").getProperty("/sRadioMode") !== "New") {
                                                    if (oClassification.VALUE_NEUTRAL === "TEMPLATE") {
                                                        this.getModel("oRoutingHeaderModel").setProperty("/AllocTempDate", previousObject.sDate);
                                                        this.getModel("oRoutingHeaderModel").setProperty("/AllocTempType", previousObject.sDateType);
                                                    }
                                                    if (oClassification.VALUE_NEUTRAL === "PLANT") {
                                                        this.getModel("oRoutingHeaderModel").setProperty("/AllocPlantDate", previousObject.sDate);
                                                        this.getModel("oRoutingHeaderModel").setProperty("/AllocPlantType", previousObject.sDateType);
                                                    }
                                                    if (oClassification.VALUE_NEUTRAL === "MANUAL") {
                                                        if (sAllocSource === "MANUAL") {
                                                            this.getModel("oRoutingHeaderModel").setProperty("/AllocManlDate", sManlDate);
                                                            this.getModel("oRoutingHeaderModel").setProperty('/AllocDateEnable', true);
                                                            this.getModel("oRoutingHeaderModel").setProperty("/AllocManlType", sManlType);
                                                        } else {
                                                            this.getModel("oRoutingHeaderModel").setProperty("/AllocManlDate", previousObject.sDate);
                                                            this.getModel("oRoutingHeaderModel").setProperty('/AllocDateEnable', false);
                                                            this.getModel("oRoutingHeaderModel").setProperty("/AllocManlType", previousObject.sDateType);
                                                        }
                                                    }

                                                }
                                            }
                                        }.bind(this));
                                    }
                                    //V2.5 -Set Allocation Date
                                    var aAllocSourceData = [];
                                    var sModeName = "";
                                    var j = 0;
                                    for (var i = 0; i < Classification_DrpDown.length; i++) {
                                        if (Classification_DrpDown[i].CHARACT === "ME_AUTO_ALLOC_DATE_SOURCE") {
                                            if (Classification_DrpDown[i].VALUE_NEUTRAL === "TEMPLATE") {
                                                sModeName = oBundle.getText("mlRef.TempDate");
                                            }
                                            if (Classification_DrpDown[i].VALUE_NEUTRAL === "PLANT") {
                                                sModeName = oBundle.getText("mlRef.PlantDate");
                                            }
                                            if (Classification_DrpDown[i].VALUE_NEUTRAL === "MANUAL") {
                                                sModeName = oBundle.getText("mlRef.ManulDate");
                                            }
                                            aAllocSourceData[j] = {
                                                modeKey: Classification_DrpDown[i].VALUE_NEUTRAL,
                                                modeName: sModeName
                                            };
                                            j++;
                                        }
                                    }
                                    this.getModel("oRoutingHeaderModel").setProperty("/aAllocDateSourceData", aAllocSourceData);
                                    var sLongText = formatter.fnHTMLFormat(oData.results[0].Long_Text.results) || ""; //Format to HTML text
                                    this.getView().getModel("oRoutingHeaderModel").setProperty("/sLongText", sLongText);
                                    this.getView().getModel("oRoutingHeaderModel").refresh();
                                    //  MASS UPDATE.
                                    if (this.getView().getModel('oVisibilityModel').getProperty('/sMassUpdateUser') === 'X') {
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/bEnableKeyUserFileds", false);
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/bEnableKeyUserStatus", false);
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/bEnableKeyUserAddImpOprButton", false);
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/bEnableKeyUserOprDelButton", false);
                                        this.getView().getModel("oRoutingHeaderModel").setProperty("/aTempAddedOperButton", false);
                                    }
                                    var sMassUpdateUser = oVisibilityModel.getProperty('/sMassUpdateUser');
                                    // Adding Operation reference to Prt inside Operations.
                                    oData.results[0].Operation.results.map(function (oOpr) {
                                        var sRefOpr = oOpr.Vplnr;
                                        oOpr.bOPenPRTBtnEnable = false;
                                        if (sKeyUser === 'X') {
                                            if (oOpr.SLWID === "ZMEAUTO") {
                                                oOpr.bEnableKeyUserWorkCenter = false;
                                            }
                                            if (sMassUpdateUser === 'X') {
                                                oOpr.aTempAddedDelButton = false;
                                                oOpr.bEnableKeyUserFileds = false;
                                                oOpr.bEnableOprFileds = false;
                                                oOpr.bEnableOprTiconFileds = false;
                                                oOpr.bEnableOprDoc = false;
                                                oOpr.bEnableKeyUserOprLongTxt = false;
                                                oOpr.bEnableKeyUserWorkCenter = false;
                                                oOpr.bEnableKeyUserOprShortTxtDesc = false;
                                                oOpr.bEnableKeyUserPRTAdd = false;
                                                oOpr.bEnableKeyUserPRTDel = false;
                                                oOpr.bEnableKeyUserPRTTable = false;
                                            }
                                        }
                                        /*formatting long text -- Ergonomy changes*/
                                        oOpr.Long_Text.results = formatter.fnFormatRteValue(oOpr.Long_Text.results, oOpr.Ltxa1, oOpr.SyncOprText);
                                        oOpr.bLongText_isFormatted = true;
                                        var sLoginUserType = "";
                                        if (sMassUpdateUser === 'X') {
                                            sLoginUserType = "X";
                                        }
                                        oOpr.PRT.results.map(function (oPRT) {
                                            oPRT.sRefOpr = sRefOpr;
                                            oPRT.sLoginMassUpdateUser = sLoginUserType;
                                        });
                                        //V2.3 changes -- STV background calculation --- SKAGP1R5
                                        oOpr.bTiconCalInPrg = false;
                                    });
                                    var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                                    var aOperationResultsArray = oData.results[0].Operation.results;
                                    oOperationItemsModel.setProperty("/aOperationItems", aOperationResultsArray);
                                    oOperationItemsModel.setProperty("/bOPenPRTBtnEnable", false);
                                    //function call to check Ticon Background JOB status on initial load of  each routing
                                    this.fnCheckTiconJobStatus(this, "initialLoading");
                                    //Function call to fetch target group numbers for Smart Copy dialog
                                    this.fnGetTargetGroup();
                                    //Function call to fetch BOM Details for Smart Copy dialog
                                    this.fnGetBomDetails();
                                    //function to get the TVRVC standared key list 
                                    //V2.3 changes -- StdKey US --- SKAGP1R5 
                                    this.fnGetStdKeyList();
                                    // New OData call to new TICON service to get values (Ticon_status_1, Ticon_status_2, Ticon_status_3)
                                    //this.fnGetTICONStatusValues();
                                    //var that = this;
                                    this.fnGetTICONStatusValues();
                                    // End
                                    if (sKeyUser === "X") { //Keyuser
                                        sap.m.MessageToast.show(oBundle.getText("loadtemplatesuccessmsg"));
                                    } else { //Enduser
                                        this.fnGetBom(); //To Get BOM data
                                        // v2.3 --- combine bom --- SKAGP1R5
                                        this.fnMangeMergeBtnVisibility();
                                        sap.m.MessageToast.show(oBundle.getText("loadroutingsuccessmsg"));
                                    }
                                    // V2.4 GGUNO6VD -- MASS UPDATE
                                    this.fnGetOperationList();
                                }
                                this.getView().getModel("oRoutingHeaderModel").updateBindings(true);
                                this.getModel("oVisibilityModel").updateBindings(true);
                                this.getView().getModel("oOperationItemsModel").updateBindings(true);
                            }.bind(this),
                            error: function (error) {
                                oBusyIndicator.close();
                                this.fnCheckError(error);
                            }.bind(this)
                        });
                    }
                } else {
                    if (sKeyUser === "X") {
                        var aMultipleAOCI = oRoutingModel.getProperty("/aMAOCI");
                        var aNewMAOCI = [];
                        var sMMaterial = oRoutingModel.getProperty("/selectedCI");
                        var sMPlant = oRoutingModel.getProperty("/selectedCIPlant");
                        aNewMAOCI.push({
                            Material: sMMaterial,
                            Plant: sMPlant,
                            Loekz: "",
                            bExistingRecord: "N",
                            bValidationStatusAOCI: "None",
                            bValidationStatusPlant: "None",
                            bDelBtnEnabled: true
                        });
                        aMultipleAOCI.map(function (oItem) {
                            aNewMAOCI.push({
                                Material: oItem.Material,
                                Plant: oItem.Plant,
                                Loekz: "",
                                bExistingRecord: "N",
                                bValidationStatusAOCI: "None",
                                bValidationStatusPlant: "None",
                                bDelBtnEnabled: true
                            });
                        });
                        this.getView().getModel("oRoutingHeaderModel").setProperty("/aAOCIData", aNewMAOCI);
                    }
                }
            },
            /*This method used to prompt success message and navigate appropriately*/
            fnHandleCreateMsg: function (oObj) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sCreateMsg = oBundle.getText("update.createmsg", [
                    oObj.Group_No,
                    oObj.Grp_Cntr,
                ]);
                var sLoadtemplate = oBundle.getText("update.loadtemplate");
                var sHome = oBundle.getText("update.homescreen");
                var sFormattedCreateMsg = new sap.m.FormattedText({
                    htmlText: sCreateMsg,
                });
                var that = this;
                MessageBox.success(sFormattedCreateMsg, {
                    actions: [sLoadtemplate, sHome],
                    emphasizedAction: sLoadtemplate,
                    initialFocus: sLoadtemplate,
                    onClose: function (sAction) {
                        if (sAction === sHome) {
                            that.getOwnerComponent().getRouter().navTo("CreateTemplate");
                        } else {
                            that.fnGetRoutingDetails(oObj);
                        }
                    },
                });
            },
            fnMUUpdatevalidation: function (oEvent) {
                var that = this;
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel"),
                    sGroup = oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No"),
                    sGroupCntr = oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr"),
                    sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant"),
                    sMaterial = oRoutingHeaderModel.getProperty("/aHeaderDetails/Material");
                var aFilters = [new sap.ui.model.Filter("WERKS", FilterOperator.EQ, sPlant),
                new sap.ui.model.Filter("MATNR", FilterOperator.EQ, sMaterial),
                new sap.ui.model.Filter("PLNNR", FilterOperator.EQ, sGroup),
                new sap.ui.model.Filter("PLNAL", FilterOperator.EQ, sGroupCntr),];
                var sChoosenItem = this.getModel("oVisibilityModel").getProperty("/sSelectedAction");
                var sCheckedFlag = this.getModel("oVisibilityModel").getProperty("/bMassCheck");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                if (sChoosenItem.length === 0 && !sCheckedFlag) {
                    sap.m.MessageToast.show(oBundle.getText("update.oneActRestriciton"));
                    return;
                } else {
                    oDataModel.read("/ET_Mass_JobStatusSet", {
                        filters: aFilters,
                        success: function (oData,) {
                            var oBundle = this.geti18nModel().getResourceBundle();
                            var sMsg1 = oBundle.getText("MUJobstatusvalidation1");
                            var sMsg2 = oBundle.getText("MUJobstatusvalidation2");
                            var sUname = oData.results[0].UNAME;
                            var sJobname = oData.results[0].JOBNAME;
                            if (oData.results[0].STATUS === "S") {
                                that.fnCreateRouting(oEvent, "SAVE");
                            } else {
                                MessageBox.error(sMsg1 + " " + sUname + " " + sMsg2);
                            }
                        }.bind(this),
                        error: function (error) {
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                }
            },
            /*************************AddBomComponent Fragment*****************************/
            fnAddBomItem: function () {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sItmCatTxt = oBundle.getText("bom.ItemCatVSTxt");
                var aData = this.oDialogAddBom.getModel("addBomModel").getData().items;
                var sNo = Number(aData.length) + 1;
                aData.unshift({
                    ItemNo: "0000",
                    Component: "",
                    CompDesc: "",
                    Component_qty: "0.000",
                    CompUnit: "",
                    ItemCateg: "",
                    ItemText1: "",
                    Price: "0.000",
                    PurchGrp: "",
                    MatGroup: "",
                    VsiSize1: "0.000",
                    VsiSize2: "0.000",
                    VsiSize3: "0.000",
                    VsiSzunit: "",
                    VsiNo: "0.000",
                    VsiFormul: "",
                    VsiQty: "0.000",
                    isNewComp: "Y",
                    isNewSNo: sNo.toString(),
                    Fldelete: false,
                    PartNumberEnable: false, // For Part number enable/disable
                    ItemTextLineReq: false,
                    addBomVisible: true,
                    VsiSize1Req: false, // For VarSize1 number enable/disable
                    VsiSize2Req: false, // For VarSize1 number enable/disable
                    VsiSize3Req: false, // For VarSize1 number enable/disable
                    VsiSize1VS: "None", // For VarSize1 number value state
                    VsiSize2VS: "None", // For VarSize2 number value state
                    VsiSize3VS: "None", // For VarSize3 number value state
                    VsiSizeNoReq: false,
                    VsiQtyVS: "None",
                    VsiSizeNoUnitReq: false,
                    QtyVsizItem: false,
                    QtyVsizItemUnitReq: false,
                    formulaEnabled: false, // For Formulakey enable/disable
                    Component_qty_Editable: true,
                    formulakeyVS: "None", // For Formulakey value state
                    priceReq: false, //For Price enable/disable
                    priceVS: "None", //For Price value state
                    purchaseGroupReq: false, //For Purchase Group enable/disable
                    purchaseGroupVS: "None", //For Purchase Group value state
                    materialGroupReq: false, //For material group enable/disable
                    materialGroupVS: "None", //For material group value state
                    Component_qty_Vstate: "None", //For Qty Value state
                    ZzdsMatnrVS: "None",
                    CompUnitVS: "None",
                    ItemCategVS: "Error", //For Item category Value state
                    ItemCategVSText: sItmCatTxt, //For Item category Value state text
                    ItemNoVS: "None", //For ItemNo Value state
                    ItemNoVSText: "", //For ItemNo Value state text
                    ItemText1VS: "None", //For Item Text Value state
                });
                this.oDialogAddBom.getModel("addBomModel").updateBindings();
            },
            fnItemCatChange: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel"),
                    sEvtSrc = oEvent.getSource();
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var sValue = oEvent.getSource().getValue(),
                    sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("routingheader.statusmsg");
                var aData = oModel.getProperty("/aAddReplaceItemCategList");
                for (var x = 0; x < aData.length; x++) {
                    if (sValue == aData[x].ItemCategory) {
                        oModel.setProperty(sPath + "/ItemCategVS", "None");
                        oModel.setProperty(sPath + "/ItemCateg", sValue.toUpperCase());
                        break;
                    } else {
                        oModel.setProperty(sPath + "/ItemCategVS", "Error");
                        oModel.setProperty(sPath + "/ItemCateg", "");
                        sEvtSrc.setValueStateText(sMsg);
                    }
                }
            },
            fnAddReplaceItemCatLiveChange: function (oEvent) {
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                this.oDialogAddBom.getModel("addBomModel").setProperty("/sAddReplaceRowPath", selectedRow);
                var sEvtSrc = oEvent.getSource();
                var sValue = oEvent.getParameter("value");
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("routingheader.statusmsg");
                var aFilters = [];
                this.getOwnerComponent()
                    .getModel("oSrvModel")
                    .read("/ET_ITEMSet", {
                        filters: aFilters,
                        success: function (oData) {
                            oModel.setProperty("/aAddReplaceItemCategList", oData.results);
                            if (oData.results.length === 0) {
                                oModel.setProperty(sPath + "/ItemCategVS", "Error");
                                sEvtSrc.setValueStateText(sMsg);
                            } else {
                                oModel.setProperty(sPath + "/ItemCategVS", "None");
                            }
                        }.bind(this),
                        error: function (error) { }.bind(this),
                    });
            },
            /*Description : Value Help for Item Category*/
            fnVHItemCategory: function (oEvent) {
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                this.oDialogAddBom.getModel("addBomModel").setProperty("/SelectedRow", selectedRow);
                var selectedRow = this.oDialogAddBom.getModel("addBomModel").getData().SelectedRow,
                    PartNum = this.oDialogAddBom.getModel("addBomModel").getProperty(selectedRow + "/Component"),
                    aFilters = [
                        new sap.ui.model.Filter(
                            "PartNum",
                            sap.ui.model.FilterOperator.EQ,
                            PartNum
                        ),
                    ];
                if (!this.oItemCategoryHelpDialog) {
                    this.oItemCategoryHelpDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.ItemCategory", this
                    );
                    this.getView().addDependent(this.oItemCategoryHelpDialog);
                }
                this.oItemCategoryHelpDialog.getBinding("items").filter(aFilters);
                this.oItemCategoryHelpDialog.open();
            },
            fnVHItemCategorySearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var aFilters = [];
                aFilters.push(
                    new sap.ui.model.Filter(
                        "ItemCategory",
                        sap.ui.model.FilterOperator.Contains,
                        sValue
                    )
                );
                this.oItemCategoryHelpDialog.getBinding("items").filter(aFilters);
            },
            fnVHItemCategoryConfirm: function (oEvent) {
                var sItem = oEvent.getParameter("selectedItem"),
                    value = sItem.getCells()[0].getTitle(),
                    oModel = this.oDialogAddBom.getModel("addBomModel"),
                    ItemCat_old = "";
                var BomTitle = this.oDialogAddBom.getCustomHeader().getContent()[0].getText();
                var oBundle = this.getView().getModel("i18n").getResourceBundle(),
                    AddTitle = oBundle.getText("bom.AddTitle"),
                    ReplaceTitle = oBundle.getText("bom.ReplaceTitle");
                if (BomTitle === AddTitle) {
                    ItemCat_old = " ";
                    oModel.setProperty(oModel.getData().SelectedRow + "/ItemCat_change", " ");
                } else if (BomTitle === ReplaceTitle) {
                    ItemCat_old = oModel.getProperty(oModel.getData().SelectedRow + "/ItemCateg");
                    oModel.setProperty(oModel.getData().SelectedRow + "/ItemCat_change", "X");
                }
                oModel.setProperty(oModel.getData().SelectedRow + "/ItemCat_old", ItemCat_old);
                oModel.setProperty(oModel.getData().SelectedRow + "/ItemCateg", value);
                this.fnValidateItemCategory(value, "", "");
            },
            fnItemCategorySuggestions: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var value = oEvent.getParameters().selectedItem.getText();
                var selectedRow = this.oDialogAddBom.getModel("addBomModel").getProperty("/sAddReplaceRowPath");
                this.fnValidateItemCategory(value, selectedRow, "");
            },
            fnValidateItemCategory: function (Item, selectedRow, sMode) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sItmCatTxt = oBundle.getText("bom.ItemCatVSTxt");
                var sItem4Char = oBundle.getText("bom.Item4Char"),
                    sItem4CharC = oBundle.getText("bom.Item4CharC");
                if (Item.length !== undefined) {
                    var selectedRow = oModel.getData().SelectedRow || selectedRow;
                    oModel.setProperty(selectedRow + "/PartNumberEnable", false);
                    oModel.setProperty(selectedRow + "/VsiSize1Req", false);
                    oModel.setProperty(selectedRow + "/VsiSize2Req", false);
                    oModel.setProperty(selectedRow + "/VsiSize3Req", false);
                    oModel.setProperty(selectedRow + "/VsiSize1VS", "None");
                    oModel.setProperty(selectedRow + "/VsiSize2VS", "None");
                    oModel.setProperty(selectedRow + "/VsiSize3VS", "None");
                    oModel.setProperty(selectedRow + "/VsiSize3Req", false);
                    oModel.setProperty(selectedRow + "/VsiSizeNoReq", false);
                    oModel.setProperty(selectedRow + "/VsiSizeNoUnitReq", false);
                    oModel.setProperty(selectedRow + "/QtyVsizItem", false);
                    oModel.setProperty(selectedRow + "/QtyVsizItemUnitReq", false);
                    oModel.setProperty(selectedRow + "/formulaEnabled", false);
                    oModel.setProperty(selectedRow + "/Component_qty_Editable", true);
                    oModel.setProperty(selectedRow + "/formulakeyVS", "None");
                    oModel.setProperty(selectedRow + "/priceReq", false);
                    oModel.setProperty(selectedRow + "/priceVS", "None");
                    oModel.setProperty(selectedRow + "/purchaseGroupReq", false);
                    oModel.setProperty(selectedRow + "/purchaseGroupVS", "None");
                    oModel.setProperty(selectedRow + "/materialGroupReq", false);
                    oModel.setProperty(selectedRow + "/materialGroupVS", "None");
                    oModel.setProperty(selectedRow + "/Component_qty_Vstate", "None");
                    oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "None");
                    oModel.setProperty(selectedRow + "/CompUnitVS", "None");
                    oModel.setProperty(selectedRow + "/ItemCategVS", "None");
                    oModel.setProperty(selectedRow + "/ItemCategVSText", "");
                    oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                    oModel.setProperty(selectedRow + "/ItemText1VS", "None");
                    if (sMode !== "Replace") {
                        oModel.setProperty(selectedRow + "/ItemText1", "");
                        oModel.setProperty(selectedRow + "/Price", "");
                        oModel.setProperty(selectedRow + "/PurchGrp", "");
                        oModel.setProperty(selectedRow + "/MatGroup", "");
                        oModel.setProperty(selectedRow + "/VsiSize1", "");
                        oModel.setProperty(selectedRow + "/VsiSize2", "");
                        oModel.setProperty(selectedRow + "/VsiSize3", "");
                        oModel.setProperty(selectedRow + "/VsiSzunit", "");
                        oModel.setProperty(selectedRow + "/VsiNo", "");
                        oModel.setProperty(selectedRow + "/VsiFormul", "");
                    }
                    if (
                        Item === "E" ||
                        Item === "P" ||
                        Item === "S" ||
                        Item === "T" ||
                        Item === "X"
                    ) {
                        oModel.setProperty(selectedRow + "/PartNumberEnable", false);
                        oModel.setProperty(selectedRow + "/Component", "");
                        oModel.setProperty(selectedRow + "/CompUnit", "");
                        oModel.setProperty(selectedRow + "/CompDesc", "");
                        oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "None");
                        oModel.setProperty(selectedRow + "/CompUnitVS", "None");
                        if (oModel.getProperty(selectedRow + "/ItemText1") === "") {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "Error");
                        }
                        if (
                            Number(oModel.getProperty(selectedRow + "/Component_qty")) < 1
                        ) {
                            oModel.setProperty(selectedRow + "/Component_qty", "1");
                            oModel.setProperty(selectedRow + "/Component_qty_Vstate", "None");
                        }
                        var sEnterItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        var sValueC = sEnterItemNo.toUpperCase();
                        if (sEnterItemNo.length !== 4) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4Char);
                        } else {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", "");
                        }
                    } else if (Item === "Q") {
                        oModel.setProperty(selectedRow + "/PartNumberEnable", false);
                        oModel.setProperty(selectedRow + "/Component", "");
                        oModel.setProperty(selectedRow + "/CompDesc", "");
                        oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "None");
                        oModel.setProperty(selectedRow + "/CompUnitVS", "None");
                        if (oModel.getProperty(selectedRow + "/ItemText1") === "") {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "Error");
                        }
                        if (
                            Number(oModel.getProperty(selectedRow + "/Component_qty")) < 1
                        ) {
                            oModel.setProperty(selectedRow + "/Component_qty", "1");
                            oModel.setProperty(selectedRow + "/Component_qty_Vstate", "None");
                        }
                        var sEnterItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        if (sEnterItemNo.length !== 4) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4Char);
                        } else {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", "");
                        }
                    } else if (Item === "L" || Item === "Y") {
                        oModel.setProperty(selectedRow + "/PartNumberEnable", true);
                        if (oModel.getProperty(selectedRow + "/Component") === "") {
                            oModel.setProperty(selectedRow + "/Component", "");
                            oModel.setProperty(selectedRow + "/CompDesc", "");
                            oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "Error");
                        }
                        if (Number(oModel.getProperty(selectedRow + "/CompUnit")) === 0) {
                            oModel.setProperty(selectedRow + "/CompUnitVS", "Error");
                        }
                        if (
                            Number(oModel.getProperty(selectedRow + "/Component_qty")) === 0
                        ) {
                            oModel.setProperty(selectedRow + "/Component_qty", "0");
                            oModel.setProperty(selectedRow + "/Component_qty_Vstate", "Error");
                        }
                        var sEnterItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        var sValueC = sEnterItemNo.toUpperCase();
                        if (sEnterItemNo.length !== 4) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4Char);
                        } else {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", "");
                        }
                    } else if (Item.toUpperCase() === "C") {
                        oModel.setProperty(selectedRow + "/PartNumberEnable", false);
                        oModel.setProperty(selectedRow + "/Component", "");
                        oModel.setProperty(selectedRow + "/CompDesc", "");
                        oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "None");
                        oModel.setProperty(selectedRow + "/CompUnitVS", "None");
                        if (oModel.getProperty(selectedRow + "/ItemText1") === "") {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "Error");
                        }
                        var sEnterItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        var sValueC = sEnterItemNo.toUpperCase();
                        if (sEnterItemNo.length !== 4) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4CharC);
                        } else if (!sValueC.startsWith("C")) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4CharC);
                        } else {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", "");
                        }
                    } else if (Item === "N") {
                        oModel.setProperty(selectedRow + "/PartNumberEnable", true);
                        if (oModel.getProperty(selectedRow + "/Component") === "") {
                            oModel.setProperty(selectedRow + "/Component", "");
                            oModel.setProperty(selectedRow + "/CompDesc", "");
                            oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "None");
                            oModel.setProperty(selectedRow + "/CompUnitVS", "None");
                        } else {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "None");
                        }
                        if (
                            Number(oModel.getProperty(selectedRow + "/Component_qty")) === 0
                        ) {
                            oModel.setProperty(selectedRow + "/Component_qty", "0");
                            oModel.setProperty(selectedRow + "/Component_qty_Vstate", "Error");
                        }
                        if (
                            oModel.getProperty(selectedRow + "/Component") === "" &&
                            oModel.getProperty(selectedRow + "/ItemText1") === ""
                        ) {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "Error");
                        }
                        if (oModel.getProperty(selectedRow + "/Component") === "") {
                            oModel.setProperty(selectedRow + "/priceReq", true);
                            if (Number(oModel.getProperty(selectedRow + "/Price")) === 0) {
                                oModel.setProperty(selectedRow + "/priceVS", "Error");
                            }
                        } else {
                            oModel.setProperty(selectedRow + "/priceReq", false);
                            oModel.setProperty(selectedRow + "/priceVS", "None");
                        }
                        if (oModel.getProperty(selectedRow + "/Component") === "") {
                            oModel.setProperty(selectedRow + "/purchaseGroupReq", true);
                            if (oModel.getProperty(selectedRow + "/PurchGrp") === "") {
                                oModel.setProperty(selectedRow + "/purchaseGroupVS", "Error");
                            }
                        } else {
                            oModel.setProperty(selectedRow + "/purchaseGroupReq", false);
                            oModel.setProperty(selectedRow + "/purchaseGroupVS", "None");
                        }
                        if (oModel.getProperty(selectedRow + "/Component") === "") {
                            oModel.setProperty(selectedRow + "/materialGroupReq", true);
                            if (oModel.getProperty(selectedRow + "/MatGroup") === "") {
                                oModel.setProperty(selectedRow + "/materialGroupVS", "Error");
                            }
                        } else {
                            oModel.setProperty(selectedRow + "/materialGroupReq", false);
                            oModel.setProperty(selectedRow + "/materialGroupVS", "None");
                        }
                        var sEnterItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        var sValueC = sEnterItemNo.toUpperCase();
                        if (sEnterItemNo.length !== 4) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4Char);
                        } else {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", "");
                        }
                    } else if (Item === "R") {
                        oModel.setProperty(selectedRow + "/PartNumberEnable", true);
                        if (oModel.getProperty(selectedRow + "/Component") === "") {
                            oModel.setProperty(selectedRow + "/Component", "");
                            oModel.setProperty(selectedRow + "/CompDesc", "");
                            oModel.setProperty(selectedRow + "/ZzdsMatnrVS", "Error");
                        }
                        if (Number(oModel.getProperty(selectedRow + "/CompUnit")) === 0) {
                            oModel.setProperty(selectedRow + "/CompUnitVS", "Error");
                        }
                        if (Number(oModel.getProperty(selectedRow + "/VsiNo")) === 0) {
                            oModel.setProperty(selectedRow + "/VsiSizeNoError", "Error");
                        }
                        if (Number(oModel.getProperty(selectedRow + "/VsiSize1")) === 0) {
                            oModel.setProperty(selectedRow + "/VsiSize1VS", "Error");
                        }
                        if (oModel.getProperty(selectedRow + "/VsiSzunit") === "") {
                            oModel.setProperty(selectedRow + "/VsiSzunitVS", "Error");
                        }
                        var sEnterItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        var sValueC = sEnterItemNo.toUpperCase();
                        if (sEnterItemNo.length !== 4) {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "Error");
                            oModel.setProperty(selectedRow + "/ItemNo", "");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", sItem4Char);
                        } else {
                            oModel.setProperty(selectedRow + "/ItemNoVS", "None");
                            oModel.setProperty(selectedRow + "/ItemNoVSText", "");
                        }
                        oModel.setProperty(selectedRow + "/VsiSize1Req", true);
                        oModel.setProperty(selectedRow + "/VsiSize2Req", true);
                        oModel.setProperty(selectedRow + "/VsiSize3Req", true);
                        oModel.setProperty(selectedRow + "/VsiSizeNoReq", true);
                        oModel.setProperty(selectedRow + "/VsiSizeNoUnitReq", true);
                        oModel.setProperty(selectedRow + "/QtyVsizItem", true);
                        oModel.setProperty(selectedRow + "/QtyVsizItemUnitReq", true);
                        oModel.setProperty(selectedRow + "/formulaEnabled", true);
                        oModel.setProperty(selectedRow + "/Component_qty_Editable", false);
                    }
                    oModel.refresh();
                } else {
                    var sValue = Item.getSource().getValue(),
                        sEvtSrc = Item.getSource(),
                        sPath = Item.getSource().getBindingContext("addBomModel").getPath();
                    var oBundle = this.getView().getModel("i18n").getResourceBundle(),
                        sMsg = oBundle.getText("routingheader.statusmsg");
                    oDataModel.read("/ET_ITEMSet", {
                        success: function (oData) {
                            for (var x = 0; x < oData.results.length; x++) {
                                if (
                                    sValue == oData.results[x].ItemCategory ||
                                    sValue == oData.results[x].ItemCategory.toLocaleLowerCase()
                                ) {
                                    oModel.setProperty(sPath + "/ItemCategVS", "None");
                                    oModel.setProperty(sPath + "/ItemCateg", sValue);
                                    break;
                                } else {
                                    oModel.setProperty(sPath + "/ItemCategVS", "Error");
                                    oModel.setProperty(sPath + "/ItemCateg", "");
                                    sEvtSrc.setValueStateText(sMsg);
                                }
                            }
                        }.bind(this),
                        error: function (error) {
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                }
            },
            /*Description : Value Help for Part Number*/
            fnVHPartNumber: function (oEvent) {
                if (
                    this.oDialogAddBom.getModel("addBomModel").getProperty("/ItemCateg") !== ""
                ) {
                    var Material = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj").Material,
                        sPlant = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj").Plant,
                        selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath(),
                        aFilters = [
                            new sap.ui.model.Filter(
                                "Plant",
                                sap.ui.model.FilterOperator.EQ,
                                sPlant
                            ),
                        ];
                    this.oDialogAddBom.getModel("addBomModel").setProperty("/SelectedRow", selectedRow);
                    if (!this.oPartNumHelpDialog) {
                        this.oPartNumHelpDialog = sap.ui.xmlfragment(
                            "com.airbus.zcfe2meautorc.fragment.PartNumberValueHelp", this
                        );
                        this.getView().addDependent(this.oPartNumHelpDialog);
                    }
                    this.oPartNumHelpDialog.getBinding("items").filter(aFilters);
                    this.oPartNumHelpDialog.open();
                } else {
                    var oBundle = this.getView().getModel("i18n").getResourceBundle();
                    var sPartNumberWarning = oBundle.getText("bom.PartNumberWarning");
                    MessageBox.warning(sPartNumberWarning, {
                        icon: MessageBox.Icon.WARNING,
                        actions: [MessageBox.Action.OK],
                        initialFocus: MessageBox.Action.OK,
                        onClose: function (sButton) {
                            if (sButton === MessageBox.Action.OK) {
                            }
                        }.bind(this),
                    });
                }
            },
            fnLiveChangeBomPartNo: function (oEvent) {
                var sEvtSrc = oEvent.getSource();
                var sValue = oEvent.getParameter("value");
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("routingheader.statusmsg");
                var aFilters = [];
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Material",
                        sap.ui.model.FilterOperator.Contains,
                        sValue
                    )
                );
                if (sValue != "") {
                    this.getOwnerComponent().getModel("oSrvModel")
                        .read("/ET_Component_ListSet", {
                            filters: aFilters,
                            success: function (oData) {
                                oModel.setProperty("/aAddReplacePartList", oData.results);
                                if (oData.results.length === 0) {
                                    sEvtSrc.setValueStateText(sMsg);
                                } else {
                                }
                            }.bind(this),
                            error: function (error) { }.bind(this),
                        });
                }
            },
            fnPartNoSuggestions: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                oModel.setProperty(sPath + "/ZzdsMatnrVS", "None");
                oModel.setProperty(sPath + "/Component", oEvent.getParameters().selectedItem.getText());
                oModel.setProperty(sPath + "/CompDesc", oEvent.getParameters().selectedItem.getAdditionalText());
                var ItemCat = oModel.getProperty(sPath + "/ItemCateg");
                if (ItemCat === "N") {
                    oModel.setProperty(sPath + "/ItemText1VS", "None");
                    oModel.setProperty(sPath + "/priceReq", false);
                    oModel.setProperty(sPath + "/priceVS", "None");
                    oModel.setProperty(sPath + "/Price", "0");
                    oModel.setProperty(sPath + "/purchaseGroupReq", false);
                    oModel.setProperty(sPath + "/purchaseGroupVS", "None");
                    oModel.setProperty(sPath + "/PurchGrp", "");
                    oModel.setProperty(sPath + "/materialGroupReq", false);
                    oModel.setProperty(sPath + "/materialGroupVS", "None");
                    oModel.setProperty(sPath + "/MatGroup", "");
                }
            },
            fnChangeBomPartNo: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel"),
                    sEvtSrc = oEvent.getSource();
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var sValue = oEvent.getSource().getValue(),
                    sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("routingheader.statusmsg");
                var aData = oModel.getProperty("/aAddReplacePartList");
                if (aData != undefined) {
                    if (aData[0].Msg === "") {
                        for (var x = 0; x < aData.length; x++) {
                            if (sValue == aData[x].Material) {
                                oModel.setProperty(sPath + "/ZzdsMatnrVS", "None");
                                oModel.setProperty(sPath + "/Component", sValue);
                                oModel.setProperty(sPath + "/CompDesc", aData[x].Text);
                                break;
                            } else {
                                oModel.setProperty(sPath + "/ZzdsMatnrVS", "Error");
                                oModel.setProperty(sPath + "/Component", "");
                                oModel.setProperty(sPath + "/CompUnit", "");
                                sEvtSrc.setValueStateText(sMsg);
                                oModel.setProperty(sPath + "/CompDesc", "");
                            }
                        }
                    } else {
                        oModel.setProperty(sPath + "/ZzdsMatnrVS", "Error");
                        oModel.setProperty(sPath + "/Component", "");
                        oModel.setProperty(sPath + "/CompUnit", "");
                        sEvtSrc.setValueStateText(sMsg);
                        oModel.setProperty(sPath + "/CompDesc", "");
                    }
                }
                var ItemCat = oModel.getProperty(sPath + "/ItemCateg");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sItem4Char = oBundle.getText("bom.Item4Char");
                if (ItemCat === "N" && sEvtSrc.getValue() === "") {
                    oModel.setProperty(sPath + "/PartNumberEnable", true);
                    oModel.setProperty(sPath + "/Component", "");
                    oModel.setProperty(sPath + "/CompDesc", "");
                    oModel.setProperty(sPath + "/ZzdsMatnrVS", "None");
                    oModel.setProperty(sPath + "/CompUnitVS", "None");
                    oModel.setProperty(sPath + "/Component_qty", "0");
                    oModel.setProperty(sPath + "/Component_qty_Vstate", "Error");
                    oModel.setProperty(sPath + "/ItemText1VS", "Error");
                    oModel.setProperty(sPath + "/priceReq", true);
                    oModel.setProperty(sPath + "/priceVS", "Error");
                    oModel.setProperty(sPath + "/purchaseGroupReq", true);
                    oModel.setProperty(sPath + "/purchaseGroupVS", "Error");
                    oModel.setProperty(sPath + "/materialGroupReq", true);
                    oModel.setProperty(sPath + "/materialGroupVS", "Error");
                    var sEnterItemNo = oModel.getProperty(sPath + "/ItemNo");
                    if (sEnterItemNo.length !== 4) {
                        oModel.setProperty(sPath + "/ItemNoVS", "Error");
                        oModel.setProperty(sPath + "/ItemNo", "");
                        oModel.setProperty(sPath + "/ItemNoVSText", sItem4Char);
                    } else {
                        oModel.setProperty(sPath + "/ItemNoVS", "None");
                        oModel.setProperty(sPath + "/ItemNoVSText", "");
                    }
                }
                this.fngetUnitData();
            },
            fngetUnitData: function (sComponent) {
                var sMaterial = sComponent,
                    sPlant = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj").Plant;
                var aFilters = [
                    new sap.ui.model.Filter(
                        "Material",
                        sap.ui.model.FilterOperator.EQ,
                        sMaterial
                    ),
                    new sap.ui.model.Filter(
                        "Plant",
                        sap.ui.model.FilterOperator.EQ,
                        sPlant
                    ),
                ];
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oParameters = {
                    filters: aFilters,
                    async: true,
                    success: function (oData, oResponse) {
                        this.oUnitHelpDialog.open();
                        this.getView()
                            .getModel("oOperationItemsModel")
                            .setProperty("/aUnitList", oData.results);
                    }.bind(this),
                    error: function (err) {
                        that.fnCheckError(err);
                    },
                };
                this.getOwnerComponent().getModel("oSrvModel")
                    .read("/ET_Reuse_unitSet", oParameters);
            },
            fnQuantityChange: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var sItemCat = oModel.getProperty(selectedRow + "/ItemCateg");
                var sFormat = this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM");
                var sFormatterQty = formatter.getParsedNumeric(
                    oEvent.getSource().getValue(),
                    sFormat
                );
                if (isNaN(sFormatterQty)) {
                    oModel.setProperty(selectedRow + "/Component_qty_Vstate", "Error");
                    oModel.setProperty(selectedRow + "/Component_qty", "");
                }
                if (
                    (sItemCat === "E" ||
                        sItemCat === "P" ||
                        sItemCat === "Q" ||
                        sItemCat === "S" ||
                        sItemCat === "T" ||
                        sItemCat === "X") &&
                    sFormatterQty < 1
                ) {
                    oModel.setProperty(selectedRow + "/Component_qty_Vstate", "Error");
                } else if (
                    oModel.getProperty(selectedRow + "/ItemCateg" == "R") &&
                    sFormatterQty === 0
                ) {
                    oModel.setProperty(selectedRow + "/Component_qty_Vstate", "Error");
                    this.oDialogAddBom.getModel("addBomModel").setProperty(selectedRow + "/VsiNo", sFormatterQty.toString());
                } else if (
                    oModel.getProperty(selectedRow + "/ItemCateg" == "N") &&
                    sFormatterQty === 0
                ) {
                    oModel.setProperty(selectedRow + "/Component_qty_Vstate", "Error");
                } else if (
                    oModel.getProperty(selectedRow + "/ItemCateg" == "L") &&
                    sFormatterQty === 0
                ) {
                    oModel.setProperty(selectedRow + "/Component_qty_Vstate", "Error");
                } else if (
                    oModel.getProperty(selectedRow + "/ItemCateg" == "Y") &&
                    sFormatterQty === 0
                ) {
                    oModel.setProperty(selectedRow + "/Component_qty_Vstate", "Error");
                } else {
                    oModel.setProperty(selectedRow + "/Component_qty_Vstate", "None");
                    oModel.setProperty(selectedRow + "/Component_qty", sFormatterQty.toString());
                }
                var sFormat = this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM");
                var sFormatterVarSize1 = formatter.getParsedNumeric(
                    oEvent.getSource().getValue(),
                    sFormat
                );
                if (
                    sFormatterVarSize1 == 0 ||
                    sFormatterVarSize1 === "" ||
                    isNaN(sFormatterVarSize1)
                ) {
                    oModel.setProperty(selectedRow + "/Component_qty_Vstate", "Error");
                    oModel.setProperty(selectedRow + "/Component_qty", "");
                } else {
                    oModel.setProperty(selectedRow + "/Component_qty_Vstate", "None");
                    oModel.setProperty(selectedRow + "/Component_qty", sFormatterVarSize1.toString());
                }
            },
            fnQtyUnitLiveChange: function (oEvent, sProp) {
                var sEvtSrc = oEvent.getSource();
                var sValue = oEvent.getParameter("value");
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("routingheader.statusmsg"),
                    selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath(),
                    sMaterial = this.oDialogAddBom.getModel("addBomModel").getProperty(selectedRow + "/Component"),
                    sPlant = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj").Plant;
                if (sValue == "") {
                    oModel.setProperty(sPath + "/CompUnitVS", "Error");
                }
                if (
                    this.oDialogAddBom.getModel("addBomModel").getProperty(sPath + "/Component") == ""
                ) {
                } else {
                    var aFilters = [
                        new sap.ui.model.Filter(
                            "Material",
                            sap.ui.model.FilterOperator.EQ,
                            sMaterial
                        ),
                        new sap.ui.model.Filter(
                            "Plant",
                            sap.ui.model.FilterOperator.EQ,
                            sPlant
                        ),
                        new sap.ui.model.Filter(
                            "Unit",
                            sap.ui.model.FilterOperator.Contains,
                            sValue
                        ),
                    ];
                    this.getOwnerComponent().getModel("oSrvModel")
                        .read("/ET_Reuse_unitSet", {
                            filters: aFilters,
                            success: function (oData) {
                                oModel.setProperty("/aAddReplaceUnitList", oData.results);
                                if (oData.results.length === 0) {
                                    oModel.setProperty(sPath + "/CompUnitVS", "Error");
                                    sEvtSrc.setValueStateText(sMsg);
                                } else {
                                    oModel.setProperty(sPath + "/CompUnitVS", "None");
                                }
                            }.bind(this),
                            error: function (error) { }.bind(this),
                        });
                }
            },
            fnQtyVarUnitLiveChange: function (oEvent, sProp) {
                var sValue = oEvent.getParameter("value");
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("routingheader.statusmsg");
                var aFilters = [
                    new sap.ui.model.Filter(
                        "MSEHI",
                        sap.ui.model.FilterOperator.Contains,
                        sValue
                    ),
                ];
                this.getOwnerComponent().getModel("oSrvModel")
                    .read("/ET_UnitSet", {
                        filters: aFilters,
                        success: function (oData) {
                            oModel.setProperty("/aAddReplaceVarUnitList", oData.results);
                            if (oData.results.length === 0) {
                            } else {
                            }
                        }.bind(this),
                        error: function (error) { }.bind(this),
                    });
            },
            fnQtyVarUnitChange: function (oEvent, sProp) {
                var sEvtSrc = oEvent.getSource();
                var sValue = sEvtSrc.getValue(),
                    oModel = this.oDialogAddBom.getModel("addBomModel"),
                    sPath = sEvtSrc.getBindingContext("addBomModel").getPath();
                if (this.unitField === "VsiSzunit") {
                    oModel.setProperty(oModel.getData().SelectedRow + "/VsiSzunit", sValue);
                    oModel.setProperty(oModel.getData().SelectedRow + "/VsiSzunitVS", "None");
                } else if (this.unitField === "VsiQtySzunit") {
                    oModel.setProperty(oModel.getData().SelectedRow + "/VsiSzunit", sValue);
                }
                if (sValue == "") {
                    oModel.setProperty(oModel.getData().SelectedRow + "/VsiSzunitVS", "Error");
                }
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("routingheader.statusmsg");
                var aData = oModel.getProperty("/aAddReplaceVarUnitList");
                for (var x = 0; x < aData.length; x++) {
                    if (sValue == aData[x].MSEHI) {
                        oModel.setProperty(sPath + "/VsiSzunitVS", "None");
                        oModel.setProperty(sPath + "/VsiSzunit", sValue);
                        break;
                    } else {
                        oModel.setProperty(sPath + "/VsiSzunitVS", "Error");
                        oModel.setProperty(sPath + "/VsiSzunit", "");
                        sEvtSrc.setValueStateText(sMsg);
                    }
                }
            },
            fnQtyUnitChange: function (oEvent, sProp) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var sEvtSrc = oEvent.getSource();
                var sValue = sEvtSrc.getValue(),
                    sPath = sEvtSrc.getBindingContext("addBomModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("routingheader.statusmsg");
                var aFilters = [];
                var sMaterial = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj").Material,
                    sPlant = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj").Plant;
                if (
                    this.oDialogAddBom.getModel("addBomModel").getProperty(sPath + "/Component") == ""
                ) {
                    var oBundle = this.getView().getModel("i18n").getResourceBundle();
                    var sMsg = oBundle.getText("SelectPartNumber");
                    oModel.setProperty(sPath + "/CompUnit", "");
                    MessageBox.warning(sMsg, {
                        icon: sap.m.MessageBox.Icon.WARNING,
                        actions: [MessageBox.Action.OK],
                        emphasizedAction: MessageBox.Action.OK,
                        onClose: function (sAction) { },
                    });
                } else {
                    var oBundle = this.geti18nModel().getResourceBundle();
                    var sMsg = oBundle.getText("routingheader.statusmsg");
                    var aData = oModel.getProperty("/aAddReplaceUnitList");
                    for (var x = 0; x < aData.length; x++) {
                        if (sValue == aData[x].Unit) {
                            oModel.setProperty(sPath + "/CompUnitVS", "None");
                            oModel.setProperty(sPath + "/CompUnit", sValue.toUpperCase());
                            break;
                        } else {
                            oModel.setProperty(sPath + "/CompUnitVS", "Error");
                            oModel.setProperty(sPath + "/CompUnit", "");
                            sEvtSrc.setValueStateText(sMsg);
                        }
                    }
                }
            },
            /*Description : Value Help for Unit*/
            fnVHUnit: function (oEvent, sField) {
                this.unitField = sField;
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath(),
                    sMaterial = this.oDialogAddBom.getModel("addBomModel").getProperty(selectedRow + "/Component"),
                    sPlant = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj").Plant;
                if (
                    this.oDialogAddBom.getModel("addBomModel").getProperty(selectedRow + "/Component") == ""
                ) {
                    var oBundle = this.getView().getModel("i18n").getResourceBundle();
                    var sMsg = oBundle.getText("SelectPartNumber");
                    MessageBox.warning(sMsg, {
                        icon: sap.m.MessageBox.Icon.WARNING,
                        actions: [MessageBox.Action.OK],
                        emphasizedAction: MessageBox.Action.OK,
                        onClose: function (sAction) { },
                    });
                } else {
                    var sComponent = this.oDialogAddBom.getModel("addBomModel").getProperty(selectedRow + "/Component");
                    this.fngetUnitData(sComponent);
                    this.oDialogAddBom.getModel("addBomModel").setProperty("/SelectedRow", selectedRow);
                    if (!this.oUnitHelpDialog) {
                        this.oUnitHelpDialog = sap.ui.xmlfragment(
                            "com.airbus.zcfe2meautorc.fragment.UnitValueHelp", this
                        );
                        this.getView().addDependent(this.oUnitHelpDialog);
                    }
                }
            },
            fnValidateItemText: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var sIC = oModel.getProperty(selectedRow + "/ItemCateg"),
                    sItemText = oModel.getProperty(selectedRow + "/ItemText1");
                if (
                    (sIC == "C" ||
                        sIC == "E" ||
                        sIC == "P" ||
                        sIC == "Q" ||
                        sIC == "S" ||
                        sIC == "T" ||
                        sIC == "X" ||
                        sIC == "N") &&
                    sItemText == ""
                ) {
                    oModel.setProperty(selectedRow + "/ItemText1VS", "Error");
                } else if (oModel.getProperty(selectedRow + "/ItemCateg") === "C") {
                    oModel.setProperty(selectedRow + "/CompDesc", oModel.getProperty(selectedRow + "/ItemText1")
                    );
                    this.fnCValidate(selectedRow);
                } else if (oModel.getProperty(selectedRow + "/ItemCateg") === "Q") {
                    oModel.setProperty(selectedRow + "/CompDesc", oModel.getProperty(selectedRow + "/ItemText1")
                    );
                    this.fnQValidate(selectedRow);
                } else {
                    oModel.setProperty(selectedRow + "/ItemText1VS", "None");
                }
            },
            /*Description : Method to validate C Item Category*/
            fnCValidate: function (selectedRow) {
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel"),
                    oModel = this.oDialogAddBom.getModel("addBomModel"),
                    selectedRow = selectedRow,
                    Text = oModel.getProperty(selectedRow + "/ItemText1"),
                    ItemNo = oModel.getProperty(selectedRow + "/ItemNo");
                var aFilters = [
                    new sap.ui.model.Filter("Text", sap.ui.model.FilterOperator.EQ, Text),
                    new sap.ui.model.Filter(
                        "ItemNo",
                        sap.ui.model.FilterOperator.EQ,
                        ItemNo
                    ),
                ];
                oDataModel.read("/ET_CTBI_CheckSet", {
                    filters: aFilters,
                    success: function (oData) {
                        var oModel = this.oDialogAddBom.getModel("addBomModel");
                        var itemNo = oModel.getProperty(selectedRow + "/ItemNo");
                        if (oData.results[0].Msg !== "") {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "Error");
                            MessageBox.warning(oData.results[0].Msg, {
                                icon: MessageBox.Icon.WARNING,
                                actions: [MessageBox.Action.OK],
                                initialFocus: MessageBox.Action.OK,
                                onClose: function (sButton) {
                                    if (sButton === MessageBox.Action.OK) {
                                    }
                                }.bind(this),
                            });
                        } else {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "None");
                            oModel.setProperty(selectedRow + "/CompDesc", oModel.getProperty(selectedRow + "/ItemText1"));
                        }
                    }.bind(this),
                    error: function (oError) {
                        oModel.setProperty(selectedRow + "/CompDesc", "");
                    },
                });
            },
            /*Description : Method to validate Q Item Category */
            fnQValidate: function (selectedRow) {
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel"),
                    oModel = this.oDialogAddBom.getModel("addBomModel"),
                    Text = oModel.getProperty(selectedRow + "/ItemText1"),
                    ItemNo = oModel.getProperty(selectedRow + "/ItemNo"),
                    selectedRow = selectedRow;
                var aFilters = [
                    new sap.ui.model.Filter("Text", sap.ui.model.FilterOperator.EQ, Text),
                    new sap.ui.model.Filter(
                        "ItemNo",
                        sap.ui.model.FilterOperator.EQ,
                        ItemNo
                    ),
                ];
                oDataModel.read("/ET_DQTBI_CHECKSet", {
                    filters: aFilters,
                    success: function (oData) {
                        var oModel = this.oDialogAddBom.getModel("addBomModel");
                        if (oData.results[0].Msg !== "") {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "Error");
                            MessageBox.warning(oData.results[0].Msg, {
                                icon: MessageBox.Icon.WARNING,
                                actions: [MessageBox.Action.OK],
                                initialFocus: MessageBox.Action.OK,
                                onClose: function (sButton) {
                                    if (sButton === MessageBox.Action.OK) {
                                    }
                                }.bind(this),
                            });
                        } else {
                            oModel.setProperty(selectedRow + "/ItemText1VS", "None");
                            oModel.setProperty(selectedRow + "/CompDesc", oModel.getProperty(selectedRow + "/ItemText1"));
                        }
                    }.bind(this),
                    error: function (oError) {
                        oModel.setProperty(selectedRow + "/CompDesc", "");
                    },
                });
            },
            fnAddReplaceBOMPriceChange: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var sItemCat = oModel.getProperty(selectedRow + "/ItemCateg");
                var sFormat = this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM");
                var sFormatterPrice = formatter.getParsedNumeric(oEvent.getSource().getValue(), sFormat);
                if (
                    sFormatterPrice == 0 ||
                    sFormatterPrice === "" ||
                    isNaN(sFormatterPrice)
                ) {
                    oModel.setProperty(selectedRow + "/priceVS", "Error");
                    oModel.setProperty(selectedRow + "/price", "");
                } else {
                    oModel.setProperty(selectedRow + "/priceVS", "None");
                    oModel.setProperty(selectedRow + "/Price", sFormatterPrice.toString());
                }
            },
            fnAddReplacepurchaseGroupLiveChange: function (oEvent) {
                var sEvtSrc = oEvent.getSource();
                var sValue = oEvent.getParameter("value");
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("routingheader.statusmsg");
                var aFilters = [];
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Purchase_grp",
                        sap.ui.model.FilterOperator.Contains,
                        sValue
                    )
                );
                this.getOwnerComponent().getModel("oSrvModel")
                    .read("/ET_Purchase_grpSet", {
                        filters: aFilters,
                        success: function (oData) {
                            oModel.setProperty("/aAddReplacePurchaseList", oData.results);
                            if (oData.results.length === 0) {
                            } else {
                            }
                        }.bind(this),
                        error: function (error) { }.bind(this),
                    });
            },
            fnVHPurchaseGroupSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var aFilters = [];
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Purchase_grp",
                        sap.ui.model.FilterOperator.Contains,
                        sValue
                    )
                );
                this.getOwnerComponent().getModel("oSrvModel")
                    .read("/ET_Purchase_grpSet", {
                        filters: aFilters,
                        success: function (oData) {
                            if (oData.results[0].MsgType === "E") {
                                MessageBox.show(oData.results[0].Msg, {
                                    icon: sap.m.MessageBox.Icon.ERROR,
                                    title: "Error",
                                    actions: [sap.m.MessageBox.Action.OK],
                                    styleClass: "sapUiSizeCompact",
                                });
                            }
                        }.bind(this),
                        error: function (error) { }.bind(this),
                    });
            },
            fnpurchaseGroupSuggestions: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                oModel.setProperty(sPath + "/PurchGrp", oEvent.getParameters().selectedItem.getText());
                oModel.setProperty(sPath + "/purchaseGroupVS", "None");
            },
            fnAddReplacepurchaseGroupChange: function (oEvent) {
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath(),
                    oModel = this.oDialogAddBom.getModel("addBomModel");
                if (oModel.getProperty(selectedRow + "/PurchGrp") === "") {
                    oModel.setProperty(selectedRow + "/purchaseGroupVS", "Error");
                }
                var aFilters = [],
                    sValue = oModel.getProperty(selectedRow + "/PurchGrp");
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Purchase_grp",
                        sap.ui.model.FilterOperator.Contains,
                        oModel.getProperty(selectedRow + "/PurchGrp")
                    )
                );
                this.getOwnerComponent().getModel("oSrvModel")
                    .read("/ET_Purchase_grpSet", {
                        filters: aFilters,
                        success: function (oData) {
                            if (oData.results[0].MsgType === "E") {
                                oModel.setProperty(selectedRow + "/purchaseGroupVS", "Error");
                                oModel.setProperty(selectedRow + "/PurchGrp", "");
                                MessageBox.show(oData.results[0].Msg, {
                                    icon: sap.m.MessageBox.Icon.ERROR,
                                    title: "Error",
                                    actions: [sap.m.MessageBox.Action.OK],
                                    styleClass: "sapUiSizeCompact",
                                });
                            }
                            var oBundle = this.getView().getModel("i18n").getResourceBundle();
                            var sMsg = oBundle.getText("routingheader.statusmsg");
                            for (var x = 0; x < oData.results.length; x++) {
                                if (sValue == oData.results[x].Purchase_grp) {
                                    oModel.setProperty(selectedRow + "/purchaseGroupVS", "None");
                                    oModel.setProperty(selectedRow + "/PurchGrp", sValue);
                                    break;
                                } else {
                                    oModel.setProperty(selectedRow + "/purchaseGroupVS", "Error");
                                    oModel.setProperty(selectedRow + "/PurchGrp", "");
                                    oEvent.getSource().setValueStateText(sMsg);
                                }
                            }
                        }.bind(this),
                        error: function (error) { }.bind(this),
                    });
            },
            /* Description : Value Help for Material Group */
            fnVHMaterialGroup: function (oEvent) {
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                this.oDialogAddBom.getModel("addBomModel").setProperty("/SelectedRow", selectedRow);
                if (!this.oMaterialGrpHelpDialog) {
                    this.oMaterialGrpHelpDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.MaterialGroupValueHelp", this
                    );
                    this.getView().addDependent(this.oMaterialGrpHelpDialog);
                }
                this.oMaterialGrpHelpDialog.open();
            },
            fnAddReplaceMatGroupLiveChange: function (oEvent) {
                var sEvtSrc = oEvent.getSource();
                var sValue = oEvent.getParameter("value");
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("routingheader.statusmsg");
                var aFilters = [];
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Material_grp",
                        sap.ui.model.FilterOperator.Contains,
                        sValue
                    )
                );
                this.getOwnerComponent().getModel("oSrvModel")
                    .read("/ET_Material_GrpSet", {
                        filters: aFilters,
                        success: function (oData) {
                            oModel.setProperty("/aAddReplaceMaterialGroupList", oData.results);
                            if (oData.results.length === 0) {
                            } else {
                            }
                        }.bind(this),
                        error: function (error) { }.bind(this),
                    });
            },
            fnMatGroupSuggestions: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                oModel.setProperty(sPath + "/MatGroup", oEvent.getParameters().selectedItem.getText());
                oModel.setProperty(sPath + "/materialGroupVS", "None");
            },
            fnAddReplaceMatGroupChange: function (oEvent) {
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath(),
                    oModel = this.oDialogAddBom.getModel("addBomModel");
                if (oModel.getProperty(selectedRow + "/MatGroup") === "") {
                    oModel.setProperty(selectedRow + "/materialGroupVS", "Error");
                }
                var aFilters = [];
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Material_grp",
                        sap.ui.model.FilterOperator.Contains,
                        oModel.getProperty(selectedRow + "/MatGroup")
                    )
                );
                this.getOwnerComponent().getModel("oSrvModel")
                    .read("/ET_Material_GrpSet", {
                        filters: aFilters,
                        success: function (oData) {
                            if (oData.results[0].MsgType === "E") {
                                oModel.setProperty(selectedRow + "/materialGroupVS", "Error");
                                oModel.setProperty(selectedRow + "/materialGroup", "");
                                MessageBox.show(oData.results[0].Msg, {
                                    icon: sap.m.MessageBox.Icon.ERROR,
                                    title: "Error",
                                    actions: [sap.m.MessageBox.Action.OK],
                                    styleClass: "sapUiSizeCompact",
                                });
                            }
                        }.bind(this),
                        error: function (error) { }.bind(this),
                    });
            },
            fnVarSize1Change: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var sFormat = this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM");
                var sFormatterVarSize1 = formatter.getParsedNumeric(oEvent.getSource().getValue(), sFormat);
                if (
                    sFormatterVarSize1 == 0 ||
                    sFormatterVarSize1 === "" ||
                    isNaN(sFormatterVarSize1)
                ) {
                    oModel.setProperty(selectedRow + "/VsiSize1VS", "Error");
                    oModel.setProperty(selectedRow + "/VsiSize1", "");
                } else {
                    oModel.setProperty(selectedRow + "/VsiSize1VS", "None");
                    oModel.setProperty(selectedRow + "/VsiSize1", sFormatterVarSize1.toString());
                }
            },
            fnVarSize2Change: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var sFormat = this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM");
                var sFormatterVarSize2 = formatter.getParsedNumeric(
                    oEvent.getSource().getValue(), sFormat
                );
                if (
                    sFormatterVarSize2 == 0 ||
                    sFormatterVarSize2 === "" ||
                    isNaN(sFormatterVarSize2)
                ) {
                    oModel.setProperty(selectedRow + "/VsiSize2VS", "Error");
                    oModel.setProperty(selectedRow + "/VsiSize2", "");
                } else {
                    oModel.setProperty(selectedRow + "/VsiSize2VS", "None");
                    oModel.setProperty(selectedRow + "/VsiSize2", sFormatterVarSize2.toString());
                }
            },
            fnVarSize3Change: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var sFormat = this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM");
                var sFormatterVarSize3 = formatter.getParsedNumeric(oEvent.getSource().getValue(), sFormat);
                if (
                    sFormatterVarSize3 == 0 ||
                    sFormatterVarSize3 === "" ||
                    isNaN(sFormatterVarSize3)
                ) {
                    oModel.setProperty(selectedRow + "/VsiSize3VS", "Error");
                    oModel.setProperty(selectedRow + "/VsiSize3", "");
                } else {
                    oModel.setProperty(selectedRow + "/VsiSize3VS", "None");
                    oModel.setProperty(selectedRow + "/VsiSize3", sFormatterVarSize3.toString());
                }
            },
            fnVHVarUnit: function (oEvent, sField) {
                this.unitField = sField;
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                this.oDialogAddBom.getModel("addBomModel").setProperty("/SelectedRow", selectedRow);
                if (!this.oUnitVarHelpDialog) {
                    this.oUnitVarHelpDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.VarUnitVH", this
                    );
                    this.getView().addDependent(this.oUnitVarHelpDialog);
                }
                this.oUnitVarHelpDialog.open();
            },
            /* Description : Method  triggered when variable size number is changed */
            fnChangeVsiNo: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var sFormat = this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM");
                var sFormatterVsiNo = formatter.getParsedNumeric(oEvent.getSource().getValue(), sFormat);
                if (
                    sFormatterVsiNo == 0 ||
                    sFormatterVsiNo === "" ||
                    isNaN(sFormatterVsiNo)
                ) {
                    oModel.setProperty(selectedRow + "/VsiSizeNoError", "Error");
                    oModel.setProperty(selectedRow + "/VsiNo", "");
                } else {
                    oModel.setProperty(selectedRow + "/VsiSizeNoError", "None");
                    oModel.setProperty(selectedRow + "/VsiNo", sFormatterVsiNo);
                    oModel.setProperty(selectedRow + "/Component_qty", sFormatterVsiNo.toString());
                }
            },
            fnFormulaKeyChange: function (oEvent) {
                var oLocalModel = this.oDialogAddBom.getModel("addBomModel");
                var sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var Varsize1 = oLocalModel.getProperty(sPath + "/VsiSize1");
                var VarNo = oLocalModel.getProperty(sPath + "/VsiNo");
                var varSizeUnit = oLocalModel.getProperty(sPath + "/VsiSzunit");
                if (
                    oLocalModel.getProperty("/sFKsuggestionTriggered") === undefined ||
                    oLocalModel.getProperty("/sFKsuggestionTriggered") !== "Y"
                ) {
                    var sEnteredValue = oEvent.getSource().getValue();
                    var aFormulaList = oLocalModel.getProperty("/aAddReplaceFormulaList");
                    var aAvailableData = aFormulaList.filter(function (oEle) {
                        return oEle["Formula_Key"] === sEnteredValue.toUpperCase();
                    });
                    if (aAvailableData.length > 0) {
                        if (Varsize1 > 0 && VarNo > 0 && varSizeUnit != "") {
                            oLocalModel.setProperty(sPath + "/VsiSize1VS", "None");
                            oLocalModel.setProperty(sPath + "/VsiSizeNoError", "None");
                            oLocalModel.setProperty(sPath + "/VsiSzunitVS", "None");
                            oLocalModel.setProperty(sPath + "/VsiFormul", oEvent.getParameters().selectedItem.getText());
                            this.fnFormulaCalculate();
                        } else {
                            oLocalModel.setProperty(sPath + "/VsiFormul", "");
                            var oBundle = this.geti18nModel().getResourceBundle(),
                                sBOMStatusMsg = oBundle.getText("bom.ComponentInvalidWarning");
                            if (!(Varsize1 > 0)) {
                                oLocalModel.setProperty(sPath + "/VsiSize1VS", "Error");
                            }
                            if (!(VarNo > 0)) {
                                oLocalModel.setProperty(sPath + "/VsiSizeNoError", "Error");
                            }
                            if (varSizeUnit === "") {
                                oLocalModel.setProperty(sPath + "/VsiSzunitVS", "Error");
                            }
                            MessageBox.warning(sBOMStatusMsg, {
                                icon: sap.m.MessageBox.Icon.WARNING,
                                actions: [MessageBox.Action.OK],
                                emphasizedAction: MessageBox.Action.OK,
                                onClose: function (sAction) { },
                            });
                        }
                    } else {
                        oEvent.getSource().setValue("");
                        if (!(Varsize1 > 0)) {
                            oLocalModel.setProperty(sPath + "/VsiSize1VS", "Error");
                        }
                        if (!(VarNo > 0)) {
                            oLocalModel.setProperty(sPath + "/VsiSizeNoError", "Error");
                        }
                        if (varSizeUnit === "") {
                            oLocalModel.setProperty(sPath + "/VsiSzunitVS", "Error");
                        }
                        var oBundle = this.getView().getModel("i18n").getResourceBundle(),
                            sBOMInvalFKMsg = oBundle.getText("FormulaKeyInvalid");
                        MessageBox.warning(sBOMInvalFKMsg, {
                            icon: sap.m.MessageBox.Icon.WARNING,
                            actions: [MessageBox.Action.OK],
                            emphasizedAction: MessageBox.Action.OK,
                            onClose: function (sAction) { },
                        });
                    }
                } else {
                    oLocalModel.setProperty("/sFKsuggestionTriggered", "N");
                }
                if (oEvent.getSource().getValue() === "") {
                    if (!(Varsize1 > 0)) {
                        oLocalModel.setProperty(sPath + "/VsiSize1VS", "Error");
                    }
                    if (!(VarNo > 0)) {
                        oLocalModel.setProperty(sPath + "/VsiSizeNoError", "Error");
                    }
                    if (varSizeUnit === "") {
                        oLocalModel.setProperty(sPath + "/VsiSzunitVS", "Error");
                    }
                }
            },
            fnFormulaCalculate: function (oEvent) {
                var oLocalModel = this.oDialogAddBom.getModel("addBomModel");
                var selectedRow = oLocalModel.getData().SelectedRow;
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel"),
                    VarSize1_Display = oLocalModel.getProperty(selectedRow + "/VsiSize1"),
                    VarSize_Unit_Display = oLocalModel.getProperty(selectedRow + "/VsiSzunit"),
                    VarSize2_Display = oLocalModel.getProperty(selectedRow + "/VsiSize2"),
                    VarSize3_Display = oLocalModel.getProperty(selectedRow + "/VsiSize3"),
                    VarSize_No_Display = oLocalModel.getProperty(selectedRow + "/VsiNo"),
                    VarSize_Qty_Display = 0,
                    VarSizeQty_Unit_Display = oLocalModel.getProperty(selectedRow + "/CompUnit"),
                    VarSize_Form_Display = oLocalModel.getProperty(selectedRow + "/VsiFormul"),
                    Item_Display = oLocalModel.getProperty(selectedRow + "/ItemNo"),
                    ItemCat_Display = oLocalModel.getProperty(selectedRow + "/ItemCateg"),
                    Part_display = oLocalModel.getProperty(selectedRow + "/Component"),
                    Unit_Display = oLocalModel.getProperty(selectedRow + "/CompUnit"),
                    Plant_Trg = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj").Plant;
                var aFilters = [];
                aFilters.push(
                    new sap.ui.model.Filter(
                        "VarSize1_Display",
                        sap.ui.model.FilterOperator.EQ,
                        VarSize1_Display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "VarSize_Unit_Display",
                        sap.ui.model.FilterOperator.EQ,
                        VarSize_Unit_Display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "VarSize2_Display",
                        sap.ui.model.FilterOperator.EQ,
                        VarSize2_Display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "VarSize3_Display",
                        sap.ui.model.FilterOperator.EQ,
                        VarSize3_Display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "VarSize_No_Display",
                        sap.ui.model.FilterOperator.EQ,
                        VarSize_No_Display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "VarSize_Qty_Display",
                        sap.ui.model.FilterOperator.EQ,
                        VarSize_Qty_Display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "VarSizeQty_Unit_Display",
                        sap.ui.model.FilterOperator.EQ,
                        VarSizeQty_Unit_Display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "VarSize1_Display",
                        sap.ui.model.FilterOperator.EQ,
                        VarSize1_Display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "VarSize_Form_Display",
                        sap.ui.model.FilterOperator.EQ,
                        VarSize_Form_Display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Item_Display",
                        sap.ui.model.FilterOperator.EQ,
                        Item_Display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "ItemCat_Display",
                        sap.ui.model.FilterOperator.EQ,
                        ItemCat_Display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Part_display",
                        sap.ui.model.FilterOperator.EQ,
                        Part_display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Unit_Display",
                        sap.ui.model.FilterOperator.EQ,
                        Unit_Display
                    )
                );
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Plant_Trg",
                        sap.ui.model.FilterOperator.EQ,
                        Plant_Trg
                    )
                );
                var oParameters = {
                    filters: aFilters,
                    async: true,
                    success: function (oData, oResponse) {
                        if (oData.results[0].Error != "") {
                            MessageBox.warning(oData.results[0].Error, {
                                icon: sap.m.MessageBox.Icon.WARNING,
                                actions: [MessageBox.Action.OK],
                                emphasizedAction: MessageBox.Action.OK,
                                onClose: function (sAction) { },
                            });
                        } else {
                            this.oDialogAddBom.getModel("addBomModel").setProperty(selectedRow + "/VsiQty", oData.results[0].VarSize_Qty_Display);
                        }
                    }.bind(this),
                    error: function (error) {
                        var msgText = JSON.parse(error.responseText).error.message.value;
                        var oBundle = this.getResourceBundle();
                        MessageBox.show(msgText, {
                            icon: sap.m.MessageBox.Icon.ERROR,
                            title: oBundle.getText("globalError"),
                            actions: [sap.m.MessageBox.Action.OK],
                            styleClass: "sapUiSizeCompact",
                        });
                    }.bind(this),
                };
                oDataModel.read("/ET_Formula_KeySet", oParameters);
                this.oDialogAddBom.getModel("addBomModel").updateBindings();
            },
            /* Description : Value Help for Formula Key */
            fnVHFormulaKey: function (oEvent) {
                var oLocalModel = this.oDialogAddBom.getModel("addBomModel");
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var Varsize1 = oLocalModel.getProperty(selectedRow + "/VsiSize1"),
                    VarNo = oLocalModel.getProperty(selectedRow + "/VsiNo"),
                    varSizeUnit = oLocalModel.getProperty(selectedRow + "/VsiSzunit");
                this.oDialogAddBom.getModel("addBomModel").setProperty("/SelectedRow", selectedRow);
                if (Varsize1 > 0 && VarNo > 0 && varSizeUnit != "") {
                    oLocalModel.setProperty(selectedRow + "/VsiSize1VS", "None");
                    oLocalModel.setProperty(selectedRow + "/VsiSizeNoError", "None");
                    oLocalModel.setProperty(selectedRow + "/VsiSzunitVS", "None");
                    if (!this.oFormulaHelpDialog) {
                        this.oFormulaHelpDialog = sap.ui.xmlfragment(
                            "com.airbus.zcfe2meautorc.fragment.FormulaKeyValueHelp", this
                        );
                        this.getView().addDependent(this.oFormulaHelpDialog);
                    }
                    this.oFormulaHelpDialog.open();
                } else {
                    var oBundle = this.getView().getModel("i18n").getResourceBundle(),
                        sBOMStatusMsg = oBundle.getText("bom.ComponentInvalidWarning");
                    if (!(Varsize1 > 0)) {
                        oLocalModel.setProperty(selectedRow + "/VsiSize1VS", "Error");
                    }
                    if (!(VarNo > 0)) {
                        oLocalModel.setProperty(selectedRow + "/VsiSizeNoError", "Error");
                    }
                    if (varSizeUnit === "") {
                        oLocalModel.setProperty(selectedRow + "/VsiSzunitVS", "Error");
                    }
                    MessageBox.warning(sBOMStatusMsg, {
                        icon: sap.m.MessageBox.Icon.WARNING,
                        actions: [MessageBox.Action.OK],
                        emphasizedAction: MessageBox.Action.OK,
                        onClose: function (sAction) { },
                    });
                }
            },
            fnLiveChangeFormulaKey: function (oEvent) {
                var sEvtSrc = oEvent.getSource();
                var sValue = oEvent.getParameter("value");
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("routingheader.statusmsg");
                var aFilters = [];
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Formula_Key",
                        sap.ui.model.FilterOperator.Contains,
                        sValue
                    )
                );
                this.getOwnerComponent().getModel("oSrvModel")
                    .read("/ET_Formula_KeySet", {
                        filters: aFilters,
                        success: function (oData) {
                            oModel.setProperty("/aAddReplaceFormulaList", oData.results);
                            if (oData.results.length === 0) {
                            } else {
                            }
                        }.bind(this),
                        error: function (error) { }.bind(this),
                    });
            },
            fnFormulaKeySuggestions: function (oEvent) {
                var oLocalModel = this.oDialogAddBom.getModel("addBomModel");
                var sPath = oEvent.getSource().getBindingContext("addBomModel").getPath();
                oLocalModel.setProperty("/sFKsuggestionTriggered", "Y");
                var Varsize1 = oLocalModel.getProperty(sPath + "/VsiSize1");
                var VarNo = oLocalModel.getProperty(sPath + "/VsiNo");
                var varSizeUnit = oLocalModel.getProperty(sPath + "/VsiSzunit");
                if (Varsize1 > 0 && VarNo > 0 && varSizeUnit != "") {
                    oLocalModel.setProperty(sPath + "/VsiSize1VS", "None");
                    oLocalModel.setProperty(sPath + "/VsiSizeNoError", "None");
                    oLocalModel.setProperty(sPath + "/VsiSzunitVS", "None");
                    oLocalModel.setProperty(sPath + "/VsiFormul", oEvent.getParameters().selectedItem.getText());
                    this.fnFormulaCalculate();
                } else {
                    oLocalModel.setProperty(sPath + "/VsiFormul", "");
                    var oBundle = this.getView().getModel("i18n").getResourceBundle(),
                        sBOMStatusMsg = oBundle.getText("bom.ComponentInvalidWarning");
                    if (!(Varsize1 > 0)) {
                        oLocalModel.setProperty(sPath + "/VsiSize1VS", "Error");
                    }
                    if (!(VarNo > 0)) {
                        oLocalModel.setProperty(sPath + "/VsiSizeNoError", "Error");
                    }
                    if (varSizeUnit === "") {
                        oLocalModel.setProperty(sPath + "/VsiSzunitVS", "Error");
                    }
                    MessageBox.warning(sBOMStatusMsg, {
                        icon: sap.m.MessageBox.Icon.WARNING,
                        actions: [MessageBox.Action.OK],
                        emphasizedAction: MessageBox.Action.OK,
                        onClose: function (sAction) { },
                    });
                }
            },
            fnVsiQtyChange: function (oEvent) {
                var oModel = this.oDialogAddBom.getModel("addBomModel");
                var selectedRow = oEvent.getSource().getBindingContext("addBomModel").getPath();
                var sFormat = this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM");
                var sFormatterVsiQty = formatter.getParsedNumeric(
                    oEvent.getSource().getValue(),
                    sFormat
                );
                if (
                    sFormatterVsiQty == 0 ||
                    sFormatterVsiQty === "" ||
                    isNaN(sFormatterVsiQty)
                ) {
                    oModel.setProperty(selectedRow + "/VsiQtyVS", "Error");
                    oModel.setProperty(selectedRow + "/VsiQty", "");
                } else {
                    oModel.setProperty(selectedRow + "/VsiQtyVS", "None");
                    oModel.setProperty(selectedRow + "/VsiQty", sFormatterVsiQty.toString());
                }
            },
            /*Description : Method triggered when Add Components or Replace Components button is clicked*/
            fnAcceptAddReplaceBOMComponent: function (oEvent) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle(),
                    sBOMStatusMsg = oBundle.getText("proposal.BOMStatusMsg");
                var oLocalModel = this.oDialogAddBom.getModel("addBomModel").getData();
                this.oDialogAddBom.getModel("addBomModel").getData().errorFlag = false;
                this.oDialogAddBom.getModel("addBomModel").getData().QerrorFlag = false;
                this.oDialogAddBom.getModel("addBomModel").getData().items.forEach(
                    function (x, i) {
                        if (
                            x.ItemCategVS === "Error" ||
                            x.Component_qty_Vstate === "Error" ||
                            x.VsiSize1VS === "Error" ||
                            x.materialGroupVS === "Error" ||
                            x.VsiSize2VS === "Error" ||
                            x.VsiSize3VS === "Error" ||
                            x.VsiQtyVS === "Error" ||
                            x.priceVS === "Error" ||
                            x.purchaseGroupVS === "Error" ||
                            x.ItemText1VS === "Error" ||
                            x.VsiSzunitVS == "Error" ||
                            x.ItemNoVS === "Error" ||
                            x.ZzdsMatnrVS === "Error" ||
                            x.VsiSizeNoError === "Error" ||
                            x.VsiSizeNoError === "Error" ||
                            x.CompUnitVS === "Error" ||
                            x.Component_qty == "0" ||
                            x.Component_qty == ""
                        ) {
                            oLocalModel.errorFlag = true;
                            if (x.Component_qty == "0") {
                                x.Component_qty_Vstate = "Error";
                            } else if (
                                x.ItemCateg == "Q" &&
                                x.ItemText1 != "" &&
                                x.ItemText1VS === "Error" &&
                                x.ItemNoVS !== "Error"
                            ) {
                                oLocalModel.QerrorFlag = true;
                            }
                        }
                        if (x.ItemCateg == "C" && x.ItemText1VS !== "Error") {
                            delete x.ItemText1VS;
                        }
                    }.bind(this)
                );
                var BomTitle = this.oDialogAddBom.getCustomHeader().getContent()[0].getText();
                var oBundle = this.getView().getModel("i18n").getResourceBundle(),
                    AddTitle = oBundle.getText("bom.AddTitle"),
                    ReplaceTitle = oBundle.getText("bom.ReplaceTitle");
                if (
                    this.oDialogAddBom.getModel("addBomModel").getData().errorFlag === false
                ) {
                    if (BomTitle === ReplaceTitle) {
                        var aIndices = this.byId("BOMItemsId").getSelectedIndices();
                        this.oDialogAddBom.getModel("addBomModel").getData().items.forEach(
                            function (oItem, i) {
                                var index = aIndices[i];
                                delete oItem.ItemTextLineReq;
                                delete oItem.ItemCategVS;
                                delete oItem.ItemCategVSText;
                                delete oItem.Component_qty_Vstate;
                                delete oItem.purchaseGroupReq;
                                delete oItem.purchaseGroupVS;
                                delete oItem.priceReq;
                                delete oItem.priceVS;
                                delete oItem.materialGroupReq;
                                delete oItem.materialGroupVS;
                                delete oItem.formulaEnabled;
                                delete oItem.Component_qty_Editable;
                                delete oItem.formulakeyVS;
                                delete oItem.VsiSizeNoUnitReq;
                                delete oItem.VsiSizeNoReq;
                                delete oItem.VsiSize3Req;
                                delete oItem.VsiSize2Req;
                                delete oItem.VsiSize1Req;
                                delete oItem.QtyVsizItemUnitReq;
                                delete oItem.BOMQuantityReq;
                                delete oItem.QtyVsizItem;
                                delete oItem.PartNumberEnable;
                                delete oItem.VsiSizeNoError;
                                delete oItem.VsiSize1VS;
                                delete oItem.VsiSize2VS;
                                delete oItem.VsiSize3VS;
                                delete oItem.VsiQtyVS;
                                delete oItem.VsiSzunitVS;
                                delete oItem.ItemText1VS;
                                delete oItem.ItemNoVS;
                                delete oItem.ItemNoVSText;
                                delete oItem.ZzdsMatnrVS;
                                delete oItem.CompUnitVS;
                                oItem.Modify = "X";
                                var oData = this.getView().getModel("oRoutingHeaderModel").getProperty("/BOM/Items/results");
                                var aMergeRecs = oData.filter(function (oEle) {
                                    return (
                                        oEle["ItemCateg"] === oItem.ItemCateg &&
                                        oEle["Component"] === oItem.Component &&
                                        oEle["Comp_level"] === "0" &&
                                        oEle["bShowMergeBtn"] === true
                                    );
                                });
                                if (aMergeRecs.length > 0) {
                                    oItem.bShowMergeBtn = true;
                                } else {
                                    oItem.bShowMergeBtn = undefined;
                                }
                                if (oItem.isNewComp !== "Y") {
                                    if (oItem.ItemCateg !== oItem.CapturedItemCat) {
                                        //update the flag only for exisiting reords
                                        oItem.ItemCat_change = "X";
                                        oItem.ItemCat_old = oItem.CapturedItemCat;
                                    } else {
                                        oItem.ItemCat_change = "";
                                        oItem.ItemCat_old = "";
                                    }
                                }
                                //to remove existing record
                                if (oItem.SNo !== undefined) {
                                    var aDataList = this.getView().getModel("oRoutingHeaderModel").getData().BOM.Items.results;
                                    for (var i = 0; i < aDataList.length; i++) {
                                        if (aDataList[i].SNo == oItem.SNo) {
                                            aDataList.splice(i, 1);
                                        }
                                    }
                                    this.getView().getModel("oRoutingHeaderModel").getData().BOM.Items.results.splice(index, 0, oItem);
                                } else {
                                    var aDataList = this.getView().getModel("oRoutingHeaderModel").getData().BOM.Items.results;
                                    for (var j = 0; j < aDataList.length; j++) {
                                        if (aDataList[j].isNewSNo == oItem.isNewSNo) {
                                            aDataList.splice(j, 1);
                                        }
                                    }
                                    this.getView().getModel("oRoutingHeaderModel").getData().BOM.Items.results.splice(index, 0, oItem);
                                }
                            }.bind(this)
                        );
                        this.getModel("oVisibilityModel").setProperty("/bSavedBomSplitData", false);
                        this.getModel("oVisibilityModel").setProperty("/bUnsavedSelectAltBom", false);
                        this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", false);
                        this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBOMStatusMsg);
                        this.getView().getModel("oRoutingHeaderModel").updateBindings(true);
                        this.fnMangeMergeBtnVisibility();
                    }
                    if (BomTitle === AddTitle) {
                        this.oDialogAddBom.getModel("addBomModel").getData().items.forEach(
                            function (oItem, i) {
                                delete oItem.addBomVisible;
                                delete oItem.ItemTextLineReq;
                                delete oItem.ItemCategVS;
                                delete oItem.ItemCategVSText;
                                delete oItem.Component_qty_Vstate;
                                delete oItem.purchaseGroupReq;
                                delete oItem.purchaseGroupVS;
                                delete oItem.priceReq;
                                delete oItem.priceVS;
                                delete oItem.materialGroupReq;
                                delete oItem.materialGroupVS;
                                delete oItem.formulaEnabled;
                                delete oItem.Component_qty_Editable;
                                delete oItem.formulakeyVS;
                                delete oItem.VsiSizeNoUnitReq;
                                delete oItem.VsiSizeNoReq;
                                delete oItem.VsiSize3Req;
                                delete oItem.VsiSize2Req;
                                delete oItem.VsiSize1Req;
                                delete oItem.QtyVsizItemUnitReq;
                                delete oItem.BOMQuantityReq;
                                delete oItem.QtyVsizItem;
                                delete oItem.PartNumberEnable;
                                delete oItem.VsiSizeNoError;
                                delete oItem.VsiSize1VS;
                                delete oItem.VsiSize2VS;
                                delete oItem.VsiSize3VS;
                                delete oItem.VsiQtyVS;
                                delete oItem.VsiSzunitVS;
                                delete oItem.ItemText1VS;
                                delete oItem.ItemNoVS;
                                delete oItem.ItemNoVSText;
                                delete oItem.ZzdsMatnrVS;
                                delete oItem.CompUnitVS;
                                oItem.Comp_level = "0";
                                oItem.Child_indicator = "";
                                this.getView().getModel("oRoutingHeaderModel").getData().BOM.Items.results.splice(0, 0, oItem);
                            }.bind(this)
                        );
                        this.getModel("oVisibilityModel").setProperty("/bSavedBomSplitData", false);
                        this.getModel("oVisibilityModel").setProperty("/bUnsavedSelectAltBom", false);
                        this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", false);
                        this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBOMStatusMsg);
                        this.getView().getModel("oRoutingHeaderModel").updateBindings(true);
                        this.fnMangeMergeBtnVisibility();
                    }
                    this.oDialogAddBom.getModel("addBomModel").updateBindings(true);
                    this.byId("BOMItemsId").clearSelection();
                    this.oDialogAddBom.close();
                } else {
                    this.oDialogAddBom.getModel("addBomModel").updateBindings();
                    if (
                        this.oDialogAddBom.getModel("addBomModel").getData().QerrorFlag == true
                    ) {
                        var sComponentInvalidWarning = this.getView().getModel("i18n").getResourceBundle().getText("bom.invalidvalue");
                    } else {
                        var sComponentInvalidWarning = this.getView().getModel("i18n").getResourceBundle().getText("bom.ComponentInvalidWarning");
                    }
                    MessageBox.warning(sComponentInvalidWarning, {
                        icon: MessageBox.Icon.WARNING,
                        actions: [MessageBox.Action.OK],
                        initialFocus: MessageBox.Action.OK,
                        onClose: function (sButton) {
                            if (sButton === MessageBox.Action.OK) {
                            }
                        }.bind(this),
                    });
                }
            },
            /*Description : Method to close Add BOM Component Pop up */
            fnCloseAddBOMComponent: function (oEvent) {
                this.oDialogAddBom.close();
            },
            /*************************AllocateByCategory Fragment*****************************/
            fnAccurateQuickAllocation: function () {
                var that = this;
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                var aBOMData = oRoutingModel.getProperty("/BOM/Items/results");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sAlreadyassignedmsg = oBundle.getText("assign.alreadyassigned");
                var aAlreadyAssignedAccurate = aBOMData.filter(function (oEle) {
                    return oEle["Colr_Status"] === 8 && oEle["Vornr"] !== "";
                });
                if (aAlreadyAssignedAccurate.length > 0) {
                    MessageBox.warning(sAlreadyassignedmsg, {
                        actions: [oBundle.getText("yes"), MessageBox.Action.CANCEL],
                        onClose: function (sAction) {
                            if (sAction === oBundle.getText("yes")) {
                                oVisibilityModel.setProperty("/ProposeByCategoryAccurate", false);
                                oVisibilityModel.setProperty("/ProposeByCategoryAccurateIcon", true);
                                that.fnProposeQuickAssignSelectedByCategory("Accurate");
                            }
                        }.bind(this),
                    });
                } else {
                    oVisibilityModel.setProperty("/ProposeByCategoryAccurate", false);
                    oVisibilityModel.setProperty("/ProposeByCategoryAccurateIcon", true);
                    that.fnProposeQuickAssignSelectedByCategory("Accurate");
                }
            },
            fnHighQuickAllocation: function () {
                var that = this;
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                var aBOMData = oRoutingModel.getProperty("/BOM/Items/results");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sAlreadyassignedmsg = oBundle.getText("assign.alreadyassigned");
                var aAlreadyAssignedHigh = aBOMData.filter(function (oEle) {
                    return oEle["Colr_Status"] === 5 && oEle["Vornr"] !== "";
                });
                if (aAlreadyAssignedHigh.length > 0) {
                    MessageBox.warning(sAlreadyassignedmsg, {
                        actions: [oBundle.getText("yes"), MessageBox.Action.CANCEL],
                        onClose: function (sAction) {
                            if (sAction === oBundle.getText("yes")) {
                                oVisibilityModel.setProperty("/ProposeByCategoryHigh", false);
                                oVisibilityModel.setProperty("/ProposeByCategoryHighIcon", true);
                                that.fnProposeQuickAssignSelectedByCategory("High");
                            }
                        }.bind(this),
                    });
                } else {
                    oVisibilityModel.setProperty("/ProposeByCategoryHigh", false);
                    oVisibilityModel.setProperty("/ProposeByCategoryHighIcon", true);
                    that.fnProposeQuickAssignSelectedByCategory("High");
                }
            },
            fnMediumQuickAllocation: function () {
                var that = this;
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                var aBOMData = oRoutingModel.getProperty("/BOM/Items/results");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sAlreadyassignedmsg = oBundle.getText("assign.alreadyassigned");
                var aAlreadyAssignedMedium = aBOMData.filter(function (oEle) {
                    return oEle["Colr_Status"] === 1 && oEle["Vornr"] !== "";
                });
                if (aAlreadyAssignedMedium.length > 0) {
                    MessageBox.warning(sAlreadyassignedmsg, {
                        actions: [oBundle.getText("yes"), MessageBox.Action.CANCEL],
                        onClose: function (sAction) {
                            if (sAction === oBundle.getText("yes")) {
                                oVisibilityModel.setProperty("/ProposeByCategoryMedium", false);
                                oVisibilityModel.setProperty(
                                    "/ProposeByCategoryMediumIcon",
                                    true
                                );
                                that.fnProposeQuickAssignSelectedByCategory("Medium");
                            }
                        }.bind(this),
                    });
                } else {
                    oVisibilityModel.setProperty("/ProposeByCategoryMedium", false);
                    oVisibilityModel.setProperty("/ProposeByCategoryMediumIcon", true);
                    that.fnProposeQuickAssignSelectedByCategory("Medium");
                }
            },
            fnLowQuickAllocation: function () {
                var that = this;
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                var aBOMData = oRoutingModel.getProperty("/BOM/Items/results");
                var oBundle = this.geti18nModel().getResourceBundle();
                var sAlreadyassignedmsg = oBundle.getText("assign.alreadyassigned");
                var aAlreadyAssignedLow = aBOMData.filter(function (oEle) {
                    return oEle["Colr_Status"] === 3 && oEle["Vornr"] !== "";
                });
                if (aAlreadyAssignedLow.length > 0) {
                    MessageBox.warning(sAlreadyassignedmsg, {
                        actions: [oBundle.getText("yes"), MessageBox.Action.CANCEL],
                        onClose: function (sAction) {
                            if (sAction === oBundle.getText("yes")) {
                                oVisibilityModel.setProperty("/ProposeByCategoryLow", false);
                                oVisibilityModel.setProperty("/ProposeByCategoryLowIcon", true);
                                that.fnProposeQuickAssignSelectedByCategory("Low");
                            }
                        }.bind(this),
                    });
                } else {
                    oVisibilityModel.setProperty("/ProposeByCategoryLow", false);
                    oVisibilityModel.setProperty("/ProposeByCategoryLowIcon", true);
                    that.fnProposeQuickAssignSelectedByCategory("Low");
                }
            },
            fnProposeQuickAssignSelectedByCategory: function (Prob) {
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var aBOMData = oRoutingModel.getProperty("/BOM/Items/results");
                for (var j = 0; j < aBOMData.length; j++) {
                    if (Prob === "Accurate" && aBOMData[j].Colr_Status === 8) {
                        aBOMData[j].Vornr = aBOMData[j].Vornr_c;
                        aBOMData[j].UnRead = "Success";
                        if (aBOMData[j].Vornr_Temp !== aBOMData[j].Vornr_c) {
                            aBOMData[j].Modify = "X";
                        } else {
                            aBOMData[j].Modify = "";
                        }
                    }
                    if (Prob === "High" && aBOMData[j].Colr_Status === 5) {
                        aBOMData[j].Vornr = aBOMData[j].Vornr_c;
                        aBOMData[j].UnRead = "Success";
                        if (aBOMData[j].Vornr_Temp !== aBOMData[j].Vornr_c) {
                            aBOMData[j].Modify = "X";
                        } else {
                            aBOMData[j].Modify = "";
                        }
                    }
                    if (Prob === "Medium" && aBOMData[j].Colr_Status === 1) {
                        aBOMData[j].Vornr = aBOMData[j].Vornr_c;
                        aBOMData[j].UnRead = "Success";
                        if (aBOMData[j].Vornr_Temp !== aBOMData[j].Vornr_c) {
                            aBOMData[j].Modify = "X";
                        } else {
                            aBOMData[j].Modify = "";
                        }
                    }
                    if (Prob === "Low" && aBOMData[j].Colr_Status === 3) {
                        aBOMData[j].Vornr = aBOMData[j].Vornr_c;
                        aBOMData[j].UnRead = "Success";
                        if (aBOMData[j].Vornr_Temp !== aBOMData[j].Vornr_c) {
                            aBOMData[j].Modify = "X";
                        } else {
                            aBOMData[j].Modify = "";
                        }
                    }
                }
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oVisibilityModel.setProperty("/bBOMSplitBtnEnabled", false);
                oVisibilityModel.setProperty("/bUnsavedSelectAltBom", false);
                oRoutingModel.updateBindings(true);
            },
            fnProposeAssignSrcSetting: function (oEvent) {
                if (!this._MLCompSrcSettingDialog) {
                    this._MLCompSrcSettingDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.MLComponentSetting", this
                    );
                    this.getView().addDependent(this._MLCompSrcSettingDialog);
                    this._MLCompSrcSettingDialog.setModel("i18n");
                    this._MLCompSrcSettingDialog.setModel(
                        this.getModel("oRoutingHeaderModel"), "oRoutingHeaderModel");
                }
                this._MLCompSrcSettingDialog.open();
            },
            fnOnMLCompSrcSave: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");

            },
            fnOnMLCompSrcCancel: function (oEvent) {
                this._MLCompSrcSettingDialog.close();
            },
            /*************************AOCIManagement Fragment*****************************/
            /*Method to close AOCI Management Fragment*/
            fnCloseAOCIFragment: function () {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var aAOCIDataDuplicate = oRoutingHeaderModel.getProperty("/aAOCIDataDuplicateData");
                oRoutingHeaderModel.setProperty("/aAOCIData", aAOCIDataDuplicate);
                this.oAOCIFrag.close();
                this.oAOCIFrag.destroy();
                delete this.oAOCIFrag;
            },
            /*Method to add new AOCI in AOCI Management Fragment*/
            fnOnAddAOCI: function () {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var aData = oRoutingHeaderModel.getProperty("/aAOCIData");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var sDelMsg = oBundle.getText("aoci.delete");
                aData.push({
                    Material: "",
                    Plant: "",
                    Loekz: "",
                    bExistingRecord: "N",
                    bValidationStatusAOCI: "None",
                    bValidationStatusPlant: "None",
                    bDelBtnEnabled: true,
                });
                for (var i = 0; i < aData.length; i++) {
                    aData[i].bDelBtnEnabled = true;
                }
                oVisibilityModel.setProperty("/sAOCIDelButton", sDelMsg);
                oRoutingHeaderModel.updateBindings();
            },
            fnChangeAOCI: function (oEvent) {
                var aFilter = [],
                    sMaterial = oEvent.getParameter("value");
                var oMaterial = oEvent.getSource();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getPath();
                oRoutingHeaderModel.setProperty("/AOCITablePath", sPath);
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var sKeyUser = oRoutingModel.getProperty("/keyUser");
                aFilter.push(new Filter("End_User", FilterOperator.EQ, "X"));
                aFilter.push(new Filter("Key_User", FilterOperator.EQ, ""));
                if (sMaterial) {
                    aFilter.push(new Filter("Text", FilterOperator.EQ, sMaterial));
                    aFilter.push(new Filter("CI", FilterOperator.EQ, "X"));
                    oDataModel.read("/ET_MaterialSet", {
                        filters: aFilter,
                        success: function (oData) {
                            if (oData.results[0].MsgType === "E") {
                                oRoutingHeaderModel.setProperty(sPath + "/Plant", "");
                                oRoutingHeaderModel.setProperty(sPath + "/Material", "");
                                oRoutingHeaderModel.setProperty(sPath + "/bValidationStatusAOCI", "Error");
                                MessageBox.show(oData.results[0].Msg, {
                                    icon: sap.m.MessageBox.Icon.ERROR,
                                    title: "Error",
                                    actions: [sap.m.MessageBox.Action.OK],
                                    styleClass: "sapUiSizeCompact",
                                });
                            } else {
                                oRoutingHeaderModel.setProperty(sPath + "/Plant", "");
                                oRoutingHeaderModel.setProperty(sPath + "/bValidationStatusAOCI", "None");
                                this.fnGetPlant("M");
                            }
                        }.bind(this),
                        error: function (error) {
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                } else {
                    oRoutingHeaderModel.setProperty(sPath + "/bValidationStatusAOCI", "Error");
                }
            },
            fnGetPlant: function (sFilter) {
                var that = this;
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.setSizeLimit(5000);
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                oRoutingModel.setSizeLimit(5000);
                var sKeyUser = oRoutingModel.getProperty("/keyUser");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPath = oRoutingHeaderModel.getProperty("/AOCITablePath");
                var sMaterial,
                    aFilter,
                    aFilters = [];
                sMaterial = oRoutingHeaderModel.getProperty(sPath + "/Material") || "";
                aFilters.push(new Filter("End_User", FilterOperator.EQ, "X"));
                aFilters.push(new Filter("Key_User", FilterOperator.EQ, ""));
                aFilters.push(new Filter("Material", FilterOperator.EQ, sMaterial));
                if (sMaterial) {
                    var oParameters = {
                        async: true,
                        urlParameters: {
                            $expand: ["Plant/Group/Available_GC", "Plant/CI"],
                        },
                        filters: aFilters,
                        success: function (oData, oResponse) {
                            if (oData.results.length > 0) {
                                oRoutingHeaderModel.setProperty("/aAOCIPlantSuggestionData", oData.results[0].Plant.results);
                                oRoutingHeaderModel.setProperty("/aAOCIPlantValHelp", oData.results[0].Plant.results);
                                if (sFilter === "M") {
                                    if (oData.results[0].Plant.results.length === 1) {
                                        oRoutingHeaderModel.setProperty(sPath + "/Plant", oData.results[0].Plant.results[0].Plant);
                                    } else {
                                        oRoutingHeaderModel.setProperty(sPath + "/Plant", "");
                                    }
                                }
                            } else {
                                if (sFilter === "M") {
                                    oRoutingHeaderModel.setProperty(sPath + "/Plant", "");
                                }
                                oRoutingHeaderModel.setProperty("/aAOCIPlantValHelp", []);
                                oRoutingHeaderModel.setProperty("/aAOCIPlantSuggestionData", []);
                            }
                        }.bind(this),
                        error: function (oError) {
                            this.fnCheckError(oError);
                        }.bind(this),
                    };
                    //Fetches dropdown values via expand
                    oDataModel.read("/ET_MaterialSet", oParameters);
                } else {
                    oRoutingHeaderModel.setProperty("/aAOCIPlantValHelp", []);
                    oRoutingHeaderModel.setProperty("/aAOCIPlantSuggestionData", []);
                    sap.m.MessageToast.show(oBundle.getText("aoci.matSel"));
                }
            },
            fnAOCIValueHelp: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getPath();
                oRoutingHeaderModel.setProperty("/AOCITablePath", sPath);
                if (!this._oAOCIValueHelp) {
                    this._oAOCIValueHelp = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.AOCIValueHelp", this
                    );
                    this.getView().addDependent(this._oAOCIValueHelp);
                }
                var oBinding = this._oAOCIValueHelp.getBinding("items");
                var oFilter = [new Filter("CI", FilterOperator.EQ, "X")];
                oBinding.filter(oFilter);
                this._oAOCIValueHelp.open();
            },
            fnAOCILivechange: function (oEvent) {
                var aFilter = [];
                var oRoutingModel = this.getOwnerComponent().getModel("oRoutingModel"),
                    oSrc = oEvent.getSource();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sKeyUser = oRoutingModel.getProperty("/keyUser");
                aFilter.push(new Filter("End_User", FilterOperator.EQ, ""));
                aFilter.push(new Filter("Key_User", FilterOperator.EQ, "X"));
                oRoutingHeaderModel.setProperty("/aSuggestAOCIs", []);
                aFilter.push(
                    new Filter(
                        "Text",
                        FilterOperator.Contains,
                        oEvent.getSource().getValue()
                    )
                );
                aFilter.push(new Filter("CI", FilterOperator.EQ, "X"));
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.read("/ET_MaterialSet", {
                    filters: aFilter,
                    success: function (oData) {
                        oRoutingHeaderModel.setProperty("/aSuggestAOCIs", oData.results);
                        oRoutingHeaderModel.refresh();
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            fnChangeAOCIPlant: function (oEvent) {
                var aFilter = [],
                    sPlant = oEvent.getParameter("value");
                var oMaterial = oEvent.getSource();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getPath();
                oRoutingHeaderModel.setProperty("/AOCITablePath", sPath);
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var aPlatnsData = oRoutingHeaderModel.getProperty("/aAOCIPlantValHelp");
                if (sPlant) {
                    var aPlantRecord = aPlatnsData.filter(function (oEle) {
                        return oEle["Plant"] === sPlant;
                    });
                    if (aPlantRecord.length === 0) {
                        oRoutingHeaderModel.setProperty(sPath + "/Plant", "");
                        oRoutingHeaderModel.setProperty(sPath + "/bValidationStatusPlant", "Error");
                        MessageBox.show(oBundle.getText("aociplantvalhelp.plantmsg"), {
                            icon: sap.m.MessageBox.Icon.ERROR,
                            title: "Error",
                            actions: [sap.m.MessageBox.Action.OK],
                            styleClass: "sapUiSizeCompact",
                        });
                    } else {
                        oRoutingHeaderModel.setProperty(sPath + "/bValidationStatusPlant", "None");
                    }
                } else {
                    oRoutingHeaderModel.setProperty(sPath + "/bValidationStatusPlant", "Error");
                    oRoutingHeaderModel.setProperty(sPath + "/Plant", "");
                }
            },
            fnAOCIPlantValueHelp: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                if (oRoutingHeaderModel.getProperty(sPath + "/Material")) {
                    oRoutingHeaderModel.setProperty("/AOCITablePath", sPath);
                    this.fnGetPlant("P");
                    if (!this._oAOCIPlantValueHelp) {
                        this._oAOCIPlantValueHelp = sap.ui.xmlfragment(
                            "com.airbus.zcfe2meautorc.fragment.AOCIPlantValueHelp", this
                        );
                        this.getView().addDependent(this._oAOCIPlantValueHelp);
                    }
                    this._oAOCIPlantValueHelp.open();
                } else {
                    sap.m.MessageToast.show(oBundle.getText("aoci.matSel"));
                }
            },
            fnAOCIPlantLivechange: function (oEvent) {
                var oSrc = oEvent.getSource();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getPath();
                oRoutingHeaderModel.setProperty("/AOCITablePath", sPath);
                this.fnGetPlant("P");
            },
            /*Method to delete AOCI record in AOCI Management Fragment */
            fnOnDeleteAOCI: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sCurrentPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getPath();
                var aAOCIData = oRoutingHeaderModel.getProperty("/aAOCIData");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var sDeleteMsg = oBundle.getText("aoci.oneAOCIMsg");
                var aAvailableRecs = aAOCIData.filter(function (oEle) {
                    return oEle["Loekz"] !== "X";
                });
                if (aAvailableRecs.length === 1) {
                    oRoutingHeaderModel.setProperty(sCurrentPath + "/Loekz", "");
                    oRoutingHeaderModel.setProperty(sCurrentPath + "/bDelBtnEnabled", false);
                    sap.m.MessageToast.show(oBundle.getText("aoci.oneAOCIMsg"));
                    oVisibilityModel.setProperty("/sAOCIDelButton", sDeleteMsg);
                } else {
                    oRoutingHeaderModel.setProperty(sCurrentPath + "/Loekz", "X");
                }
                oRoutingHeaderModel.updateBindings(true);
            },
            /*Method to close AOCI Management Fragment*/
            fnOKAOCIFragment: function () {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var aAOCIData = oRoutingHeaderModel.getProperty("/aAOCIData");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var aValidatedRecs = aAOCIData.filter(function (oEle) {
                    return (
                        (oEle["Material"] === "" && oEle["Loekz"] !== "X") ||
                        (oEle["Plant"] === "" && oEle["Loekz"] !== "X")
                    );
                });
                if (aValidatedRecs.length > 0) {
                    sap.m.MessageToast.show(oBundle.getText("aoci.msg"));
                } else {
                    var aProperData = [];
                    for (var j = 0; j < aAOCIData.length; j++) {
                        if (aAOCIData[j].Loekz !== "X") {
                            aProperData.push({
                                Material: aAOCIData[j].Material,
                                Plant: aAOCIData[j].Plant,
                            });
                        }
                    }
                    var checkDuplicates = function (aProperData) {
                        var seen = {};
                        for (var i = 0; i < aProperData.length; i++) {
                            var item = JSON.stringify(aProperData[i]);
                            if (seen[item]) {
                                return true;
                            }
                            seen[item] = true;
                        }
                        return false;
                    };
                    var hasDuplicate = checkDuplicates(aProperData);
                    if (hasDuplicate) {
                        sap.m.MessageToast.show(oBundle.getText("aoci.dupli"));
                    } else {
                        this.oAOCIFrag.close();
                        this.oAOCIFrag.destroy();
                        delete this.oAOCIFrag;
                    }
                }
            },
            /****************************AOCIPlantValueHelp Fragment*****************************/
            fnAOCIPlantSelect: function (oEvent) {
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPath = oRoutingHeaderModel.getProperty("/AOCITablePath");
                oRoutingHeaderModel.setProperty(sPath + "/Plant", oSelectedItem.getCells()[0].getTitle());
                oRoutingHeaderModel.setProperty(sPath + "/bValidationStatusPlant", "None");
            },
            fnAOCIPlantSearch: function (oEvent) {
                var oFilter = [];
                var sValue = oEvent.getParameter("value");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                oFilter.push(new Filter("Plant", FilterOperator.Contains, sValue));
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            /****************************AOCIValueHelp Fragment**********************************/
            fnAOCISelect: function (oEvent) {
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPath = oRoutingHeaderModel.getProperty("/AOCITablePath");
                oRoutingHeaderModel.setProperty(sPath + "/Material", oSelectedItem.getCells()[0].getTitle());
                oRoutingHeaderModel.setProperty(sPath + "/bValidationStatusAOCI", "None");
                this.fnGetPlant("M");
            },
            fnAOCISearch: function (oEvent) {
                var oFilter = [];
                var sValue = oEvent.getParameter("value");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var sKeyUser = oRoutingModel.getProperty("/keyUser");
                oFilter.push(new Filter("End_User", FilterOperator.EQ, ""));
                oFilter.push(new Filter("Key_User", FilterOperator.EQ, "X"));
                oFilter.push(new Filter("Text", FilterOperator.Contains, sValue));
                oFilter.push(new Filter("CI", FilterOperator.EQ, "X"));
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            /****************************CalTypeF4 Fragment**************************************/
            /*This method used to set the selected Calculation type.*/
            fnCaltypeSelect: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sTiconOprPath = oOperationItemsModel.getProperty("/sOprPathWorkCenter");
                var nCaltype = oOperationItemsModel.getProperty(sTiconOprPath + "/Calc_type");
                oOperationItemsModel.setProperty(sTiconOprPath + "/Calc_type", nCaltype);
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var sPathCalType = oOperationItemsModel.getProperty("/SelectedCalTypePath");
                oOperationItemsModel.setProperty(sPathCalType, oSelectedItem.getCells()[0].getTitle());
                var oBinding = this._oCalTypeValueHelpDialog.getBinding("items");
                oBinding.filter([]);
                oOperationItemsModel.setProperty(sTiconOprPath + "/Calc_type", oSelectedItem.getCells()[0].getTitle());
                oOperationItemsModel.refresh();
                oEvent.getSource()._removeSelection(true);
                this._oCalTypeValueHelpDialog.close();
            },
            /****************************CreateRefOpSet Fragment*********************************/
            /*This method used to fetch S-Routings */
            fnFetchSRoutOpr: function () {
                function changePosition(a, b) {
                    if (parseInt(a.Vornr, 0) < parseInt(b.Vornr, 0)) {
                        return -1;
                    }
                    if (parseInt(a.Vornr, 0) > parseInt(b.Vornr, 0)) {
                        return 1;
                    }
                    return 0;
                }
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oRefOprSetModel = this.getView().getModel("oRefOprSetModel");
                var sGroup = oRefOprSetModel.getProperty("/Vplnr"),
                    sGroupCntr = oRefOprSetModel.getProperty("/Vplal"),
                    sInterval = oRefOprSetModel.getProperty("/Vintv") || "",
                    sOprNum = oRefOprSetModel.getProperty("/Vornr") || "";
                // New array for comparing the backend sent operations with Existing operations to give confirmation pop up.
                var aCalOprByInterval = [];
                // End
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                // Checking for duplicate Operation number
                var aOperations = [],
                    oprIndex = -1;
                // padding zeros to make 4 digit
                sOprNum = sOprNum.toString().padStart(4, "0");
                var sMsgAlreadyexists = oBundle.getText("update.msgalreadyexists", sOprNum);
                aOperations = oOperationItemsModel.getProperty("/aOperationItems") || [];
                if (aOperations.length > 0) {
                    oprIndex = aOperations.findIndex(function (oprItem) {
                        return oprItem.Vornr === sOprNum;
                    });
                }
                if (oprIndex >= 0) {
                    sap.m.MessageToast.show(sMsgAlreadyexists);
                    return;
                }
                var oVornrMax = aOperations.find(function (oprItem) {
                    return oprItem.Vornr > sOprNum && oprItem.Loekz !== true;
                });
                if (oVornrMax) {
                    var VornrMax = oVornrMax.Vornr;
                } else {
                    VornrMax = "";
                }
                if (
                    sGroup === undefined ||
                    sGroupCntr === undefined ||
                    sInterval === "" ||
                    sOprNum === ""
                ) {
                    MessageBox.error(oBundle.getText("createmandatorynewmsg"));
                } else if (
                    Number(sOprNum) > 9999 ||
                    Number(sOprNum) <= 0 ||
                    isNaN(sOprNum) === true
                ) {
                    MessageBox.error(oBundle.getText("update.entervalidoprnumber"));
                } else if (
                    Number(sInterval) > 999 ||
                    Number(sInterval) <= 0 ||
                    isNaN(sOprNum) === true
                ) {
                    MessageBox.error(oBundle.getText("update.intervalmsg"));
                } else if (sGroup && sGroupCntr && sInterval && sOprNum) {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilters = [
                        new sap.ui.model.Filter(
                            "Plnnr",
                            FilterOperator.EQ,
                            oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No")
                        ),
                        new sap.ui.model.Filter(
                            "Plnal",
                            FilterOperator.EQ,
                            oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr")
                        ),
                        new sap.ui.model.Filter("Plnty", FilterOperator.EQ, "N"), //only N routing has RefOperation -so pass N
                        new sap.ui.model.Filter(
                            "Vintv",
                            FilterOperator.EQ,
                            Number(sInterval)
                        ),
                        new sap.ui.model.Filter(
                            "Matnr",
                            FilterOperator.EQ,
                            oRoutingHeaderModel.getProperty("/aHeaderDetails/Material")
                        ),
                        new sap.ui.model.Filter(
                            "Plant",
                            FilterOperator.EQ,
                            oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant")
                        ),
                        new sap.ui.model.Filter(
                            "Vornr",
                            FilterOperator.EQ,
                            Number(sOprNum)
                        ),
                        new sap.ui.model.Filter("Vplnr", FilterOperator.EQ, sGroup),
                        new sap.ui.model.Filter("Vplal", FilterOperator.EQ, sGroupCntr),
                        new sap.ui.model.Filter(
                            "Vornr_max",
                            FilterOperator.EQ,
                            VornrMax.toString().padStart(4, "0")
                        ),
                    ];
                    var oBusyIndicator = new BusyDialog();
                    oBusyIndicator.open();
                    oDataModel.read("/ET_REF_OPRSet", {
                        filters: aFilters,
                        async: true,
                        urlParameters: {
                            $expand: [
                                "Operation/Long_Text",
                                "Operation/PRT",
                                "Operation/OprUserFields",
                            ],
                        },
                        success: function (oData) {
                            oBusyIndicator.close();
                            if (oData.results.length > 0) {
                                var aOperationItems = oData.results[0].Operation.results;
                                aOperationItems.map(function (oOpr) {
                                    oOpr.bOPenPRTBtnEnable = false;
                                    oOpr.Long_Text.results = formatter.fnFormatRteValue(oOpr.Long_Text.results, oOpr.Ltxa1, oOpr.SyncOprText);
                                    oOpr.bLongText_isFormatted = true;
                                });
                                // New array getting backend sent operations length, increamenting by Interval and adding to temp array .
                                var aOperationItemsLength =
                                    oData.results[0].Operation.results.length;
                                for (var x = 0; x < aOperationItemsLength; x++) {
                                    aCalOprByInterval.push({
                                        Vornr: Number(sOprNum),
                                        Vintv: Number(sInterval),
                                    });
                                    sOprNum = Number(sOprNum) + Number(sInterval);
                                }
                                // End
                                aOperations = oOperationItemsModel.getProperty("/aOperationItems") || [];
                                var bDuplicate = false;
                                var sDuplicateOprNo;
                                aOperations.map(function (OPR) {
                                    aCalOprByInterval.map(function (R_OPR) {
                                        if (Number(OPR.Vornr) === Number(R_OPR.Vornr)) {
                                            bDuplicate = true;
                                            sDuplicateOprNo = OPR.Vornr;
                                        }
                                    });
                                });
                                var sInt = this.getView().getModel("oRefOprSetModel").getProperty("/Vintv") || "";
                                if (bDuplicate === true && Number(sInt) === 1) {
                                    MessageBox.error(oBundle.getText("update.blockaddrefop"));
                                    return;
                                }
                                var oRefOprDialog = this._createRefOpSetDialog;
                                var sConfirmationPopupMsg = oBundle.getText("update.confirmationPopup", sDuplicateOprNo);
                                var sConfirmationMsg = oBundle.getText("update.confirmmsg");
                                if (bDuplicate === true) {
                                    MessageBox.confirm(sConfirmationPopupMsg, {
                                        title: sConfirmationMsg,
                                        icon: MessageBox.Icon.WARNING,
                                        actions: [MessageBox.Action.YES, MessageBox.Action.NO],
                                        initialFocus: MessageBox.Action.NO,
                                        onClose: function (sButton) {
                                            if (sButton === MessageBox.Action.YES) {
                                                jQuery.each(aOperationItems, function (index, oOpearationItem) {
                                                    oOpearationItem.isNew = "X";
                                                    // Deleting additional properties to avoid Data loss for Quality routing
                                                    delete oOpearationItem.Plnkn;
                                                    delete oOpearationItem.Zaehl;
                                                    aOperations.push(oOpearationItem);
                                                }
                                                );
                                                aOperations.sort(changePosition);
                                                oOperationItemsModel.setProperty("/aOperationItems", aOperations);
                                                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                                                oVisibilityModel.setProperty("/bUnsavedChange", true);
                                                sap.m.MessageToast.show(oBundle.getText("successmsgcrtrefopset"));
                                                oRefOprDialog.close();
                                            }
                                        },
                                    });
                                } else {
                                    jQuery.each(aOperationItems, function (index, oOpearationItem) {
                                        oOpearationItem.isNew = "X";
                                        oOpearationItem.isUiNew = "X";
                                        // Deleting additional properties to avoid Data loss for Quality routing
                                        delete oOpearationItem.Plnkn;
                                        delete oOpearationItem.Zaehl;
                                        aOperations.push(oOpearationItem);
                                    }
                                    );
                                    aOperations.sort(changePosition);
                                    oOperationItemsModel.setProperty("/aOperationItems", aOperations);
                                    var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                                    oVisibilityModel.setProperty("/bUnsavedChange", true);
                                    sap.m.MessageToast.show(oBundle.getText("successmsgcrtrefopset"));
                                    oRefOprDialog.close();
                                }
                            } else {
                                MessageBox.error(oBundle.getText("errormsgcrtrefopset"));
                            }
                        }.bind(this),
                        error: function (error) {
                            oBusyIndicator.close();
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                }
            },
            /*This method used to to close operation set dialog*/
            fnOpSetDialogClose: function () {
                this._createRefOpSetDialog.close();
            },
            /****************************CurKeyValueHelp Fragment*********************************/
            /*This method used to set the selected UOM*/
            fnSelectCurKey: function (oEvent) {
                var oSelectedItem = oEvent.getParameter("selectedItem");
                this.oUsrFieldSource.setValue(oSelectedItem.getCells()[0].getTitle());
            },
            fnSearchCurKey: function (oEvent) {
                var oFilter = [];
                var sValue = oEvent.getParameter("value");
                oFilter = [new Filter("WAERS", FilterOperator.Contains, sValue)];
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            /****************************DebitorValueHelp Fragment*********************************/
            /*This method used to set the selected workcenter.*/
            fnDebitorSelect: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oRoutingHeaderModel.setProperty("/DEBITOR", oSelectedItem.getCells()[4].getText());
            },
            /*This method used to search work center */
            fnDebitorSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var oFilter = new Filter("MCOD1", FilterOperator.Contains, sValue);
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            /****************************DocValueHelp Fragment*********************************/
            /*This method used to set check and uncheck the selection in the Document table and form an array with all the final selections */
            fnDocumentSelectionChange: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oSelectedItems = oEvent.getSource().getSelectedItems();
                var aSelectedDocs = [];
                for (var i = 0; i < oSelectedItems.length; i++) {
                    var sDocNumber = oSelectedItems[i].getCells()[0].getTitle();
                    var sDocType = oSelectedItems[i].getCells()[1].getText();
                    var sDocPart = oSelectedItems[i].getCells()[2].getText();
                    var sDocVersion = oSelectedItems[i].getCells()[3].getText();
                    var sDocText = oSelectedItems[i].getCells()[4].getText();
                    aSelectedDocs.push({
                        DocNumber: sDocNumber,
                        DocType: sDocType,
                        DocPart: sDocPart,
                        DocVersion: sDocVersion,
                        DocText: sDocText,
                    });
                }
                oRoutingHeaderModel.setProperty("/aSelectedDocs", aSelectedDocs);
            },
            /*This method used for Multi selection of the documents from Select Documents Value help*/
            fnSelectMultipleDocuments: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var aFinalSelected = oRoutingHeaderModel.getProperty("/aSelectedDocs");
                var sPath = sap.ui.getCore().AppContext.sPRTPath;
                var sPRTpath = sPath + "/PRT/results";
                var aPRT = oOperationItemsModel.getProperty(sPRTpath) || [];
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                //trigger Type section to pre fill corresponding control key
                if (aFinalSelected.length > 1) {
                    // pre filling control key
                    var sSelType = aFinalSelected[0].DocType;
                    var aTypesData = this.getOwnerComponent().getModel("oRoutingModel").getProperty("/aPRTTypeData");
                    aSelectedItemCtrlKey = aTypesData.filter(function (oEle) {
                        return oEle["DOKAR"] === sSelType;
                    });
                }
                // Added extra if condition below while multiple selection for avoiding empty row
                if (aPRT.length > 0 && aFinalSelected.length > 1) {
                    // pre filling control key
                    var sSelType = aFinalSelected[0].DocType;
                    var aTypesData = this.getOwnerComponent().getModel("oRoutingModel").getProperty("/aPRTTypeData");
                    var aSelectedItemCtrlKey = aTypesData.filter(function (oEle) {
                        return oEle["DOKAR"] === sSelType;
                    });
                    aPRT[0].Doknr = aFinalSelected[0].DocNumber;
                    aPRT[0].Doktl = aFinalSelected[0].DocPart;
                    aPRT[0].Fhktx = aFinalSelected[0].DocText;
                    aPRT[0].Dokvr = aFinalSelected[0].DocVersion;
                    aPRT[0].Dokar = aFinalSelected[0].DocType;
                    aPRT[0].Steuf = aSelectedItemCtrlKey[0].STEUF;
                }
                oOperationItemsModel.setProperty(sPRTpath, aPRT);
                oOperationItemsModel.refresh();
                // Added below if condition for single selection of document.
                if (aFinalSelected.length === 1) {
                    var sPRTItemPath = oRoutingModel.getProperty("/selectedPRTItemPath");
                    if (sPRTItemPath) {
                        //pre filling control key
                        var sSelTypeRes = aFinalSelected[0].DocType;
                        var aTypesDataRes = this.getOwnerComponent().getModel("oRoutingModel").getProperty("/aPRTTypeData");
                        aSelectedItemCtrlKey = aTypesDataRes.filter(function (oEle) {
                            return oEle["DOKAR"] === sSelTypeRes;
                        });
                        var sDocNumber = aFinalSelected[0].DocNumber;
                        var sDocPart = aFinalSelected[0].DocPart;
                        var sDocVersion = aFinalSelected[0].DocVersion;
                        var sDocText = aFinalSelected[0].DocText;
                        var sDocType = aFinalSelected[0].DocType;
                        var sContKey = aSelectedItemCtrlKey[0].STEUF;
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr", sDocNumber);
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl", sDocPart);
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr", sDocVersion);
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Fhktx", sDocText);
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokar", sDocType);
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Steuf", sContKey);
                        //Reset error state (if any) when user selects doc(s)
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doknr_Vstate", "None");
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Doktl_Vstate", "None");
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Dokvr_Vstate", "None");
                        oOperationItemsModel.setProperty(sPRTItemPath + "/Prt_mass", "X");
                    }
                    oOperationItemsModel.refresh();
                    this._DOCValueHelpDialog.close();
                } else {
                    for (var x = 1; x < aFinalSelected.length; x++) {
                        if (aFinalSelected.length > 1) {
                            var iDocNumber = Number(aPRT[0].Psnfh) > Number(aPRT[aPRT.length - 1].Psnfh)
                                ? Number(aPRT[0].Psnfh)
                                : Number(aPRT[aPRT.length - 1].Psnfh) || 10;
                            iDocNumber = iDocNumber + 10;
                            iDocNumber = iDocNumber + "";
                            var sDocNumber = aFinalSelected[x].DocNumber;
                            var sDocPart = aFinalSelected[x].DocPart;
                            var sDocText = aFinalSelected[x].DocText;
                            var sDocVersion = aFinalSelected[x].DocVersion;
                            var sDocType = aFinalSelected[x].DocType;
                            //Pre filling control key
                            var sSelTypeloop = aFinalSelected[x].DocType;
                            var aTypesDataloop = this.getOwnerComponent().getModel("oRoutingModel").getProperty("/aPRTTypeData");
                            aSelectedItemCtrlKey = aTypesDataloop.filter(function (oEle) {
                                return oEle["DOKAR"] === sSelTypeloop;
                            });
                            var sConKey = aSelectedItemCtrlKey[0].STEUF;
                        } else if (aFinalSelected.length === 0) {
                            iDocNumber = "10";
                            sConKey = "";
                        }
                        if (
                            this.getView().getModel("oOperationItemsModel").getProperty(sPath + "/aTempAddedDelButton") === true
                        ) {
                            var oObj = {
                                Psnfh: iDocNumber,
                                Fhmar: "D",
                                Dokar: sDocType,
                                Doknr: sDocNumber,
                                Doktl: sDocPart,
                                Dokvr: sDocVersion,
                                Txtz1: "",
                                Fhktx: sDocText,
                                Steuf: sConKey,
                                Matnr: "",
                                Fhwrk: "",
                                Mgvgw: "1",
                                isNew: "X",
                                Vornr: "",
                                Loekz: false,
                                Prt_mass: "X",
                                sRefOpr: "",
                                Doktl_Vstate: "None", //Reset error state (if any) when user selects doc(s)
                                Dokvr_Vstate: "None",
                                Doknr_Vstate: "None",
                                bEnable: true,
                                Prt_color: "3",
                            };
                            aPRT.unshift(oObj);
                        } else {
                            var oObj = {
                                Psnfh: iDocNumber,
                                Fhmar: "D",
                                Dokar: sDocType,
                                Doknr: sDocNumber,
                                Doktl: sDocPart,
                                Dokvr: sDocVersion,
                                Txtz1: "",
                                Fhktx: sDocText,
                                Steuf: sConKey,
                                Matnr: "",
                                Fhwrk: "",
                                Mgvgw: "1",
                                isNew: "X",
                                Vornr: "",
                                Loekz: false,
                                Prt_mass: "X",
                                sRefOpr: "",
                                Doktl_Vstate: "None", //Reset error state (if any) when user selects doc(s) - 28/09/2022
                                Dokvr_Vstate: "None",
                                Doknr_Vstate: "None",
                                bEnable: true,
                                Prt_color: "",
                            };
                            aPRT.unshift(oObj);
                            //increment iDocNumberHighestVal by 10
                        }
                    }
                    oOperationItemsModel.setProperty(sPRTpath, aPRT);
                    oOperationItemsModel.refresh();
                    this._DOCValueHelpDialog.close();
                }
            },
            fndocvalueClose: function () {
                this._DOCValueHelpDialog.close();
                var oBinding = sap.ui.getCore().byId("tabledocTexts").getBinding("items");
                oBinding.filter([]);
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.setUseBatch(true);
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                oRoutingHeaderModel.setProperty("/docSearchText", '');
            },
            /****************************ErrorMessages Fragment*********************************/
            // Logic to close Message box.
            onErrorMessageBoxClose: function () {
                this.oMessage.close();
            },
            /****************************FormulaKeyValueHelp Fragment*********************************/
            fnVHFormulaConfirm: function (oEvent) {
                var t = oEvent.getParameter("selectedItem"),
                    value = t.getCells()[0].getTitle(),
                    oModel = this.oDialogAddBom.getModel("addBomModel");
                oModel.setProperty(oModel.getData().SelectedRow + "/VsiFormul", value);
                this.fnFormulaCalculate();
            },
            fnVHFormulaSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var aFilters = [];
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Material_grp",
                        sap.ui.model.FilterOperator.Contains,
                        sValue
                    )
                );
                this.oFormulaHelpDialog.getBinding("items").filter(aFilters);
            },
            /****************************GenericValueHelp Fragment***********************************/
            /*Copy Multi Operations event handler for Value help confirm*/
            fnHandleGenValueHelpConfirm: function (oEvent) {
                var sValue;
                this._oSource.setValueState("None");
                //if material then get the group list
                if (this._GenValueHelpSearchFields[0] === "Text") {
                    //Material
                    sValue = oEvent.getParameter("selectedItem").getBindingContext("oSrvModel").getObject()["Material"];
                    this.fnGetCopyOprGroup(sValue);
                    this._oImportOprDialog.getModel().setProperty("/bMaterial", true);
                    this._oImportOprDialog.getModel().setProperty("/Group", "");
                    this._oImportOprDialog.getModel().setProperty("/ValState/Group", "None");
                } else if (this._GenValueHelpSearchFields[0] === "Group_No") {
                    sValue = oEvent.getParameter("selectedItem").getBindingContext("oSrvModel").getObject()[this._GenValueHelpSearchFields];
                    this._oImportOprDialog.getModel().setProperty("/GroupCounter",
                        oEvent.getParameter("selectedItem").getBindingContext("oSrvModel").getObject()["Grp_Cntr"]
                    );
                    this._oImportOprDialog.getModel().setProperty("/ValState/GroupCounter", "None");
                } else if (this._GenValueHelpSearchFields[0] === "Name") {
                    //plant
                    sValue = oEvent.getParameter("selectedItem").getBindingContext("oSrvModel").getObject()["Plant"];
                } else if (this._GenValueHelpSearchFields[0] === "TXT") {
                    //std Value help
                    sValue = oEvent.getParameter("selectedItem").getBindingContext("oSrvModel").getObject()["KTSCH"];
                } else {
                    sValue = oEvent.getParameter("selectedItem").getBindingContext("oSrvModel").getObject()[this._GenValueHelpSearchFields];
                }
                this._oSource.setValue(sValue);
            },
            /*Copy Multi Operations Event handler for the search in generic value help fragment*/
            fnGetCopyOprGroup: function (sMaterial) {
                var aFilters = [],
                    oBundle = this.getView().getModel("i18n").getResourceBundle(),
                    oDataModel = this.getOwnerComponent().getModel("oSrvModel"),
                    oRoutingModel = this.getView().getModel("oRoutingModel"),
                    aGroupList = [],
                    sKeyUser = oRoutingModel.getProperty("/keyUser");
                aFilters.push(new Filter("Material", FilterOperator.EQ, sMaterial));
                var oBusyIndicator = new BusyDialog();
                oBusyIndicator.open();
                var oParameters = {
                    async: true,
                    filters: aFilters,
                    success: function (oData, oResponse) {
                        oBusyIndicator.close();
                        if (oData.results.length > 0) {
                            aGroupList = oData.results;
                        }
                        this._oImportOprDialog.getModel().setProperty("/GroupCounter", "");
                        this._oImportOprDialog.getModel().setProperty("/GropComboBox", "");
                        this._oImportOprDialog.getModel().setProperty("/GroupList", aGroupList);
                    }.bind(this),
                    error: function (oError) {
                        oBusyIndicator.close();
                        this._oImportOprDialog.getModel().setProperty("/ValState/Material", "Error");
                    }.bind(this),
                };
                //Fetches dropdown values via expand
                oDataModel.read("/ET_MAT_GRPSet", oParameters);
            },
            /* Copy Multi Operations Event handler for the search in generic value help fragment*/
            fnHandleGenValHelpSearch: function (oEvent) {
                var aFilters = [];
                var sQuery = oEvent.getParameters().value;
                if (sQuery && sQuery.length > 0) {
                    if (sQuery.match(/[a-zA-Z0-9]/i)) {
                        var sQueryLower = sQuery.toLowerCase();
                        var sQueryUpper = sQuery.toUpperCase();
                        for (var i = 0; i < this._GenValueHelpSearchFields.length; i++) {
                            aFilters.push(
                                new sap.ui.model.Filter(
                                    this._GenValueHelpSearchFields[i],
                                    sap.ui.model.FilterOperator.Contains,
                                    sQueryLower
                                )
                            );
                            aFilters.push(
                                new sap.ui.model.Filter(
                                    this._GenValueHelpSearchFields[i],
                                    sap.ui.model.FilterOperator.Contains,
                                    sQueryUpper
                                )
                            );
                        }
                    }
                }
                var oBinding = oEvent.getSource().getBinding("items");
                var oFilter = new Filter(aFilters, false); // applied or condition
                if (aFilters.length > 0) {
                    oBinding.filter(oFilter);
                } else {
                    oBinding.filter([]);
                }
            },
            /****************************ImportOpr Fragment***********************************/
            /*Copy Multi Operations function to open the Material help Pop up */
            fnCloseImportOprDialog: function (oEvent) {
                var oDialog = oEvent.getSource().getParent().getParent(),
                    sMsg = this.getView().getModel("i18n").getResourceBundle().getText("update.confirmclosure");
                // if the initial value is not null
                if (oDialog.getModel().getProperty("/bWarnOnClosePopUp")) {
                    MessageBox.warning(sMsg, {
                        icon: MessageBox.Icon.CONFIRM,
                        actions: [MessageBox.Action.YES, MessageBox.Action.NO],
                        initialFocus: MessageBox.Action.NO,
                        onClose: function (sButton) {
                            if (sButton === MessageBox.Action.YES) {
                                oDialog.close();
                            }
                        }.bind(this),
                    });
                } else {
                    oDialog.close();
                }
            },
            /*Copy Multi Operations Event handler for the search opr*/
            fnOnCopyOprSearch: function (oEvent) {
                //set the warn flag
                var oCopyOprDlgModel = this._oImportOprDialog.getModel(),
                    oLocalData = oCopyOprDlgModel.getData(),
                    oResBundle = this.getView().getModel("i18n").getResourceBundle(),
                    bValdDate = true,
                    sGroup = oLocalData.bMaterial
                        ? oLocalData.GropComboBox
                        : oLocalData.Group,
                    oBusyIndicator = new BusyDialog(),
                    aFilters = [];
                for (var key in oLocalData.ValState) {
                    //check if any field VS is error
                    if (oLocalData["ValState"][key] === "Error") {
                        bValdDate = false;
                    }
                }
                //check if group is empty else push the data to filters
                if (!sGroup) {
                    //highlight the fields based on material
                    bValdDate = false;
                    if (oLocalData.bMaterial) {
                        oCopyOprDlgModel.setProperty("/ValState/GropComboBox", "Error");
                    } else {
                        oCopyOprDlgModel.setProperty("/ValState/Group", "Error");
                    }
                } else {
                    aFilters.push(new Filter("Plnnr", FilterOperator.EQ, sGroup));
                }
                //check if group counter is empty else push the data to filters
                if (!oLocalData.GroupCounter) {
                    bValdDate = false;
                    oCopyOprDlgModel.setProperty("/ValState/GroupCounter", "Error");
                } else {
                    aFilters.push(
                        new Filter("Plnal", FilterOperator.EQ, oLocalData.GroupCounter)
                    );
                }
                if (oLocalData.Plant) {
                    aFilters.push(
                        new Filter("Werks", FilterOperator.EQ, oLocalData.Plant)
                    );
                }
                //routing type
                if (oLocalData.sRouteType === "S") {
                    aFilters.push(
                        new Filter("Vplty", FilterOperator.EQ, oLocalData.sRouteType)
                    );
                    aFilters.push(new Filter("SLWID", FilterOperator.EQ, "ZMEAUTO"));
                } else {
                    aFilters.push(new Filter("SLWID", FilterOperator.NE, "ZMEAUTO"));
                }
                if (bValdDate) {
                    oBusyIndicator.open();
                    oCopyOprDlgModel.setProperty("/bWarnOnClosePopUp", true);
                    oCopyOprDlgModel.setProperty("/bTabVisible", true);
                    this.getOwnerComponent()
                        .getModel("oSrvModel")
                        .read("/ET_OperationSet", {
                            urlParameters: {
                                $expand: ["Long_Text", "OprUserFields", "PRT", "Ticon_Status"],
                            },
                            filters: aFilters,
                            success: function (oData) {
                                oBusyIndicator.close();
                                if (oData.results.length > 0) {
                                    oData.results.forEach(function (oItem) {
                                        oItem.NewOprNo = oItem.Vornr;
                                        oItem.ValState = "None";
                                        oItem.RowHighLight = "None";
                                    });
                                }
                                oCopyOprDlgModel.setProperty("/operations", oData.results);
                            },
                            error: function (oRes) {
                                oBusyIndicator.close();
                            },
                        });
                } else {
                    MessageBox.error(oResBundle.getText("createmandatorynewmsg"));
                }
            },
            /*Copy Multi Operations function to open the Material help Pop up*/
            fnCopyOprValuehelpMaterial: function (oEvent) {
                var oDialog = this.fnGetGenericValueHelpDialog(),
                    oResBundle = this.getView().getModel("i18n").getResourceBundle(),
                    oFilter = new Filter({
                        filters: [
                            new Filter("End_User", FilterOperator.EQ, "X"),
                            new Filter("Key_User", FilterOperator.EQ, "X"),
                        ],
                        and: false,
                    });
                oDialog.setTitle(oResBundle.getText("dsvaluehelp.title"));
                oDialog.removeAllColumns();
                var oItemTemplate = new sap.m.ColumnListItem({
                    type: "Active",
                    vAlign: "Middle",
                    cells: [
                        new sap.m.ObjectIdentifier({
                            text: "{oSrvModel>Material}",
                        }),
                        new sap.m.Label({
                            text: "{oSrvModel>Text}",
                        }),
                    ],
                });
                oDialog.insertColumn(
                    new sap.m.Column({
                        hAlign: "Begin",
                        header: new sap.m.Label({
                            text: oResBundle.getText("dsvaluehelp.material"),
                        }),
                    })
                );
                oDialog.insertColumn(
                    new sap.m.Column({
                        hAlign: "Begin",
                        header: new sap.m.Label({
                            text: oResBundle.getText("dsvaluehelp.materialdescription"),
                        }),
                    })
                );
                oDialog.bindAggregation("items", {
                    path: "oSrvModel>/ET_ALL_MaterialSet",
                    template: oItemTemplate,
                });
                oDialog.open();
                this._GenValueHelpSearchFields = ["Text"];
                this._oSource = oEvent.getSource();
            },
            /*Copy Multi Operations Event handler for the search in generic value help fragment*/
            fnHandleCopyOprMatChange: function (oEvent) {
                if (oEvent.getSource().getValue()) {
                    var aFilter = [],
                        oMaterial = oEvent.getSource(),
                        oRoutingModel = this.getView().getModel("oRoutingModel"),
                        oBundle = this.getView().getModel("i18n").getResourceBundle(),
                        oDataModel = this.getOwnerComponent().getModel("oSrvModel"),
                        oBusyIndicator = new BusyDialog(),
                        sUri = oDataModel.createKey("/ET_ALL_MaterialSet", {
                            Material: oMaterial.getValue(),
                        });
                    oBusyIndicator.open();
                    //show dropdown
                    this._oImportOprDialog.getModel().setProperty("/bMaterial", true);
                    oDataModel.read(sUri, {
                        success: function (oData) {
                            oMaterial.setValueState("None");
                            oMaterial.setValueStateText("");
                            //Get Group List
                            this.fnGetCopyOprGroup(oMaterial.getValue());
                            oBusyIndicator.close();
                        }.bind(this),
                        error: function (error) {
                            oMaterial.setValueState("Error");
                            var sMsg = oBundle.getText("materialvaluestatemsg", oMaterial.getValue());
                            oMaterial.setValueStateText(sMsg);
                            this.fnCheckError(error);
                            oBusyIndicator.close();
                        }.bind(this),
                    });
                } else {
                    oEvent.getSource().setValueState("None");
                    oEvent.getSource().setValueStateText("");
                    this._oImportOprDialog.getModel().setProperty("/bMaterial", false);
                    this._oImportOprDialog.getModel().setProperty("/Group", "");
                    this._oImportOprDialog.getModel().setProperty("/GroupCounter", "");
                    this._oImportOprDialog.getModel().setProperty("/ValState/Group", "None");
                }
            },
            /*This method triggered when user is typing in material input*/
            fnMaterialLivechange: function (oEvent, sDSType) {
                var aFilter = [];
                var oRoutingModel = this.getOwnerComponent().getModel("oRoutingModel"),
                    oSrc = oEvent.getSource();
                if (oSrc.getValue().trim() === "") {
                    this.fnGetLoclStorageData(oEvent, "oRoutingModel");
                } else {
                    // Added extra filters (Key user & End user) in ET_MaterialSet - New requirement from backend to 
                    // differentiate between Key user & End user.
                    var sKeyUser = oRoutingModel.getProperty("/keyUser");
                    if (sKeyUser === "X") {
                        aFilter.push(new Filter("End_User", FilterOperator.EQ, ""));
                        aFilter.push(new Filter("Key_User", FilterOperator.EQ, "X"));
                    } else {
                        aFilter.push(new Filter("End_User", FilterOperator.EQ, "X"));
                        aFilter.push(new Filter("Key_User", FilterOperator.EQ, ""));
                    }
                    //End
                    if (sDSType === "CI" || sDSType === "MAOCI") {
                        oRoutingModel.setProperty("/aSuggestCIs", []);
                        aFilter.push(new Filter("Text", FilterOperator.Contains, oEvent.getSource().getValue()));
                        aFilter.push(new Filter("CI", FilterOperator.EQ, "X"));
                    } else if (sDSType === "targetCI") {
                        oRoutingModel.setProperty("/aSuggesttargetCIs", []);
                        aFilter.push(new Filter("Text", FilterOperator.Contains, oEvent.getSource().getValue()));
                        aFilter.push(new Filter("CI", FilterOperator.EQ, "X"));
                    } else {
                        oRoutingModel.setProperty("/aSuggestMaterials", []);
                        aFilter.push(new Filter("Text", FilterOperator.Contains, oEvent.getSource().getValue()));
                    }
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    oDataModel.read("/ET_MaterialSet", {
                        filters: aFilter,
                        success: function (oData) {
                            oRoutingModel.setProperty("/aSuggestMaterials", oData.results);
                            if (sDSType === "CI" || sDSType === "MAOCI") {
                                oRoutingModel.setProperty("/aSuggestCIs", oData.results);
                            } else if (sDSType === "targetCI") {
                                oRoutingModel.setProperty("/aSuggesttargetCIs", oData.results);
                            } else {
                                oRoutingModel.setProperty("/aSuggestMaterials", oData.results);
                            }
                            oRoutingModel.refresh();
                        }.bind(this),
                        error: function (error) {
                            this.fnCheckError(error);
                        }.bind(this)
                    });
                }
            },
            /*Copy Multi Operations Event handler for the value help plant fragment*/
            fnCopyOprValuehelpPlant: function (oEvent) {
                var oDialog = this.fnGetGenericValueHelpDialog(),
                    oResBundle = this.getView().getModel("i18n").getResourceBundle();
                oDialog.setTitle(oResBundle.getText("plantvaluehelp.title"));
                oDialog.removeAllColumns();
                var oItemTemplate = new sap.m.ColumnListItem({
                    type: "Active",
                    vAlign: "Middle",
                    cells: [
                        new sap.m.ObjectIdentifier({
                            text: "{oSrvModel>Plant}",
                        }),
                        new sap.m.Label({
                            text: "{oSrvModel>Name}",
                        }),
                    ],
                });
                oDialog.insertColumn(
                    new sap.m.Column({
                        hAlign: "Begin",
                        header: new sap.m.Label({
                            text: oResBundle.getText("plantvaluehelp.plant"),
                        }),
                    })
                );
                oDialog.insertColumn(
                    new sap.m.Column({
                        hAlign: "Begin",
                        header: new sap.m.Label({
                            text: oResBundle.getText("plantvaluehelp.name"),
                        }),
                    })
                );
                oDialog.bindAggregation("items", {
                    path: "oSrvModel>/ET_PlantSet",
                    template: oItemTemplate,
                });
                oDialog.open();
                this._GenValueHelpSearchFields = ["Name"];
                this._oSource = oEvent.getSource();
            },
            /*Copy Multi Operations Group value help*/
            fnCopyOprValuehelpGroup: function (oEvent) {
                var oDialog = this.fnGetGenericValueHelpDialog(),
                    oResBundle = this.getView().getModel("i18n").getResourceBundle(),
                    oCopyOprDialogMdl = this._oImportOprDialog.getModel(),
                    aGroupList = oCopyOprDialogMdl.getProperty("/GroupList");
                oDialog.setTitle(oResBundle.getText("groupvaluehelp.title"));
                oDialog.removeAllColumns();
                var oItemTemplate = new sap.m.ColumnListItem({
                    type: "Active",
                    vAlign: "Middle",
                    cells: [
                        new sap.m.Label({
                            text: "{oSrvModel>Group_No}",
                        }),
                        new sap.m.Label({
                            text: "{oSrvModel>Grp_Cntr}",
                        }),
                    ],
                });
                oDialog.insertColumn(
                    new sap.m.Column({
                        hAlign: "Begin",
                        header: new sap.m.Label({
                            text: oResBundle.getText("groupcounter"),
                        }),
                    })
                );
                oDialog.insertColumn(
                    new sap.m.Column({
                        hAlign: "Begin",
                        header: new sap.m.Label({
                            text: oResBundle.getText("groupvaluehelp.group"),
                        }),
                    })
                );
                oDialog.bindAggregation("items", {
                    path: "oSrvModel>/ET_MAT_GRPSet",
                    template: oItemTemplate,
                });
                oDialog.open();
                this._GenValueHelpSearchFields = ["Group_No"];
                this._oSource = oEvent.getSource();
            },
            /*Copy Multi Operations Event handler Group change*/
            fnHandleGroupChange: function (oEvent) {
                this._oImportOprDialog.getModel().setProperty("/GroupCounter", oEvent.getSource().getSelectedKey());
                oEvent.getSource().setValueState("None");
                this._oImportOprDialog.getModel().setProperty("/ValState/GroupCounter", "None");
            },
            /*Copy Multi Operations Event handler for the search opr*/
            onCopyOprSwitchChange: function (oEvent) {
                if (oEvent.getParameters().state) {
                    this._oImportOprDialog.getModel().setProperty("/sRouteType", "S");
                } else {
                    this._oImportOprDialog.getModel().setProperty("/sRouteType", "N");
                }
                this.fnOnCopyOprSearch();
            },
            /*Copy Multi Operations Event handler for the save button on dialog*/
            fnOnCopyOprSave: function (oEvent) {
                var oCopyOprDlgModel = this._oImportOprDialog.getModel(),
                    aOprData = oCopyOprDlgModel.getProperty("/operations"),
                    oTable = this._oImportOprDialog.getContent()[1],
                    aSelInd = oTable.getSelectedIndices(),
                    oBundle = this.getView().getModel("i18n").getResourceBundle(),
                    aOprItems = this.getView().getModel("oOperationItemsModel").getProperty("/aOperationItems"),
                    sHdrGroup = this.getView().getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails/Group_No"),
                    sTaskType = this.getView().getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails/Task_type"),
                    sHdrGroupCnt = this.getView().getModel("oRoutingHeaderModel").getProperty("/aHeaderDetails/Grp_Cntr"),
                    bExisitingOprNo = false,
                    oOpr,
                    sRefOpr,
                    sMsg = "",
                    aSelRowsToCopy = [];

                if (aSelInd.length > 0) {
                    aSelInd.forEach(function (iIndex) {
                        oOpr = aOprData[iIndex];
                        oOpr.ValState = "None";
                        aOprItems.forEach(function (oOprItem) {
                            if (parseInt(oOpr.NewOprNo, 0) === parseInt(oOprItem.Vornr, 0)) {
                                bExisitingOprNo = true;
                                oOpr.ValState = "Error";
                                sMsg = sMsg + oBundle.getText("update.msgalreadyexists", oOpr.NewOprNo) + "\n";
                            }
                        });
                        //if the operation number is not duplicate then only execute remaining logic
                        if (!bExisitingOprNo) {
                            aSelRowsToCopy.push(oOpr);
                        }
                    });
                    oCopyOprDlgModel.updateBindings(true);
                    if (bExisitingOprNo) {
                        MessageBox.error(sMsg);
                    } else {
                        aSelRowsToCopy.forEach(function (oItem) {
                            oItem.Vornr = oItem.NewOprNo;
                            //copy source details for ticon
                            oItem.S_Plnal = oItem.Plnal;
                            oItem.S_Plnnr = oItem.Plnnr;
                            oItem.S_Plnkn = oItem.Plnkn;
                            oItem.S_Zaehl = oItem.Zaehl;
                            // copy header details
                            oItem.Plnnr = sHdrGroup;
                            oItem.Plnal = sHdrGroupCnt;
                            oItem.Plnty = sTaskType;
                            //PRT table related changes
                            sRefOpr = oItem.Vplnr;
                            //format the long text
                            oItem.Long_Text.results = formatter.fnFormatRteValue(
                                oItem.Long_Text.results,
                                oItem.Ltxa1,
                                oItem.SyncOprText
                            );
                            oItem.bLongText_isFormatted = true;
                            if (oItem.PRT.results.length > 0) {
                                oItem.PRT.results.forEach(function (oPRT) {
                                    oPRT.sRefOpr = sRefOpr;
                                });
                            }
                            delete oItem.NewOprNo;
                            delete oItem.RowHighLight;
                            delete oItem.ValState;
                            aOprItems.push(oItem);
                        });
                        function changePosition(a, b) {
                            if (parseInt(a.Vornr, 0) < parseInt(b.Vornr, 0)) {
                                return -1;
                            }
                            if (parseInt(a.Vornr, 0) > parseInt(b.Vornr, 0)) {
                                return 1;
                            }
                            return 0;
                        }
                        //sort the operations
                        aOprItems.sort(function (a, b) {
                            if (parseInt(a.Vornr, 0) < parseInt(b.Vornr, 0)) {
                                return -1;
                            }
                            if (parseInt(a.Vornr, 0) > parseInt(b.Vornr, 0)) {
                                return 1;
                            }
                            return 0;
                        });
                        this.getView().getModel("oOperationItemsModel").setProperty("/aOperationItems", aOprItems);
                        this.getView().getModel("oOperationItemsModel").updateBindings(true);
                        this._oImportOprDialog.close();
                    }
                } else {
                    MessageBox.error(oBundle.getText("copyOpr.SelectItem"));
                }
            },
            /****************************InspectionCharTable Fragment***********************************/
            // Method to close characteristics dialog.
            fnInspectionCharDialogClose: function (oEvent) {
                this._InspectionCharDialog.close();
            },
            /****************************MaterialGroupValueHelp Fragment*********************************/
            fnVHMaterialGroupConfirm: function (oEvent) {
                var t = oEvent.getParameter("selectedItem"),
                    value = t.getCells()[0].getTitle(),
                    oModel = this.oDialogAddBom.getModel("addBomModel");
                oModel.setProperty(oModel.getData().SelectedRow + "/MatGroup", value);
                oModel.setProperty(oModel.getData().SelectedRow + "/materialGroupVS", "None");
            },
            fnVHMaterialGroupSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var aFilters = [];
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Material_grp",
                        sap.ui.model.FilterOperator.Contains,
                        sValue
                    )
                );
                this.oMaterialGrpHelpDialog.getBinding("items").filter(aFilters);
                this.getOwnerComponent().getModel("oSrvModel").read("/ET_Material_GrpSet", {
                    filters: aFilters,
                    success: function (oData) {
                        if (oData.results[0].MsgType === "E") {
                            MessageBox.show(oData.results[0].Msg, {
                                icon: sap.m.MessageBox.Icon.ERROR,
                                title: "Error",
                                actions: [sap.m.MessageBox.Action.OK],
                                styleClass: "sapUiSizeCompact",
                            });
                        }
                    }.bind(this),
                    error: function (error) { }.bind(this),
                });
            },
            /****************************MergeBom Fragment*********************************/
            /*combine bom function to validate the input*/
            fnHandleMergeItmQtyLiveChange: function (oEvent) {
                var sSeparator = this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM"),
                    iValue = formatter.getParsedNumeric(oEvent.getSource().getValue(), sSeparator),
                    oBindingContext = oEvent.getSource().getBindingContext(),
                    bErrFlag = true,
                    sRegExp = /^\d+[\.\,]\d{0,3}$/,
                    sNumRegExp = /^\d+$/;
                if (
                    (sRegExp.test(iValue) || sNumRegExp.test(iValue)) &&
                    parseFloat(iValue) > 0 &&
                    iValue.toString().split(sSeparator).length < 13
                ) {
                    //if valid number then qty should not be more than orginal qty
                } else {
                    oEvent.getSource().setValueState("Error");
                    oBindingContext.getModel().setProperty(oBindingContext.getPath() + "/bDelBtnEnable", false);
                    oBindingContext.getModel().setProperty("/bConfirmBtnEnable", false);
                    bErrFlag = false;
                }
                if (bErrFlag) {
                    oEvent.getSource().setValueState("None");
                    oBindingContext.getModel().setProperty(oBindingContext.getPath() + "/bDelBtnEnable", true);
                    oBindingContext.getModel().setProperty("/bConfirmBtnEnable", true);
                    //if Qty then calculate
                    this.fnCalculateMergeQty(oEvent);
                }
            },
            /*combine bom function to calculate the Merge*/
            fnCalculateMergeQty: function (oEvent) {
                var iValue = formatter.getParsedNumeric(
                    oEvent.getSource().getValue(),
                    this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM")),
                    oBindingContext = oEvent.getSource().getBindingContext(),
                    oModel = oBindingContext.getModel(),
                    iRefQty = oModel.getProperty("/refQty"),
                    iAssgnedQty = oModel.getProperty("/iAssgnedQty"),
                    iMergedValue = oModel.getProperty("/items/0/CompQty"),
                    oRow = oBindingContext.getObject(),
                    iDiffQty = parseFloat(iMergedValue) + (oRow.orgCompQty - iValue) - iAssgnedQty;
                if (iDiffQty > 0) {
                    oModel.setProperty("/items/0/CompQty", parseFloat(iDiffQty).toFixed(3));
                    oModel.setProperty("/iAssgnedQty", parseFloat(oRow.orgCompQty) - parseFloat(iValue));
                    //enable delete button
                    oModel.setProperty(oBindingContext.getPath() + "/bDelBtnEnable", true);
                    oEvent.getSource().setValueState("None");
                } else {
                    //disable the buttons
                    //disable delete buttons
                    oModel.setProperty(
                        oBindingContext.getPath() + "/bDelBtnEnable", false
                    );
                    oEvent.getSource().setValueState("Error");
                    oEvent.getSource().setValueStateText(this.getView().getModel("i18n").getResourceBundle().getText("refValueCanNotBeLessThanOne"));
                }
            },
            /*combine bom event handler for merge qty input change*/
            fnHandleMergeItmQtyChange: function (oEvent) {
                var iValue = formatter.getParsedNumeric(
                    oEvent.getSource().getValue(),
                    this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM")),
                    oBindingContext = oEvent.getSource().getBindingContext();
                //decimal split v2.3
                this._oMergeBomDialog.getModel().setProperty(oBindingContext.getPath() + "/CompQty", iValue);
            },
            /*combine bom event handler for delete function*/
            fnOnDelMergeItem: function (oEvent) {
                var oBindingContext = oEvent.getSource().getBindingContext(),
                    oModelData = oBindingContext.getModel().getData(),
                    oRow = oBindingContext.getObject(),
                    iActualIndex = oModelData.items.findIndex((oItem) => oItem.SNo === oRow.SNo);
                oModelData.items[0]["CompQty"] = parseFloat(oModelData.items[0]["CompQty"]) + parseFloat(oRow.CompQty);
                oModelData.aDelItems.push(oModelData.items[iActualIndex]);
                oModelData.items.splice(iActualIndex, 1);
                oModelData.bConfirmBtnEnable = true;
                oBindingContext.getModel().updateBindings(true);
            },
            /*combine bom event handler for delete function*/
            fnOnMergeItemConfirm: function (oEvent) {
                var oMergeItmMdl = this._oMergeBomDialog.getModel(),
                    oMergeItmMdlData = oMergeItmMdl.getData(),
                    oLoclMdl = this.getView().getModel("oRoutingHeaderModel"),
                    oLoclData = oLoclMdl.getProperty("/BOM/Items/results"),
                    oParentItem = oMergeItmMdlData.items[0], //merge item
                    iActualIndex,
                    oBundle = this.getView().getModel("i18n").getResourceBundle(),
                    sBOMStatusMsg = oBundle.getText("proposal.BOMStatusMsg");
                oMergeItmMdlData.items.forEach(function (oItem) {
                    iActualIndex = oLoclData.findIndex((oBom) => oBom.SNo === oItem.SNo);
                    if (
                        oItem.CompUnit === oParentItem.CompUnit &&
                        oItem.ItemCateg === oParentItem.ItemCateg
                    ) {
                        oLoclData[iActualIndex]["Component_qty"] = oItem.CompQty;
                        //send the flag if qty is changed
                        oLoclData[iActualIndex]["Modify"] = "X";
                        oLoclData[iActualIndex]["bBomCombineChange"] = true;
                    }
                });
                oMergeItmMdlData.aDelItems.forEach(function (oItem) {
                    iActualIndex = oLoclData.findIndex((oBom) => oBom.SNo === oItem.SNo);
                    oLoclData.splice(iActualIndex, 1);
                });
                oMergeItmMdlData.aDelItems.forEach(function (oItem) {
                    for (var i = 0; i < oLoclData.length; i++) {
                        if (
                            oLoclData[i].Comp_parent === oItem.SNo ||
                            oLoclData[i].Grand_parent === oItem.SNo
                        ) {
                            oLoclData.splice(i, 1);
                            i--;
                        }
                    }
                });
                oLoclMdl.updateBindings(true);
                //disable the save button
                this.getModel("oVisibilityModel").setProperty("/bSavedBomSplitData", false);
                this.getModel("oVisibilityModel").setProperty("/bUnsavedSelectAltBom", false);
                this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabled", false);
                this.getModel("oVisibilityModel").setProperty("/bProposedBtnEnabledTooltip", sBOMStatusMsg);
                oEvent.getSource().getParent().close();
            },
            /*function to close the fragment*/
            fnOnDialogClose: function (oEvent) {
                oEvent.getSource().getParent().close();
            },
            /****************************OperationHeader Fragment*********************************/
            /*This method is used to close user details dialog box*/
            fnCloseOperationHeaderPopup: function (oEvent) {
                this._oOperationHeader.close();
            },
            /*event handler for user field selction*/
            onUserFieldChange: function (oEvent) {
                var sMsg = this.getView().getModel("i18n").getResourceBundle().getText("usrFields.confirmclosure"),
                    oItem = oEvent.getParameter("selectedItem").getBindingContext("oSrvModel").getObject();
                // if the initial value is not null
                if (this._oOperationHeader.getModel().getProperty("/IntialFieldKey")) {
                    MessageBox.warning(sMsg, {
                        icon: MessageBox.Icon.CONFIRM,
                        actions: [MessageBox.Action.YES, MessageBox.Action.NO],
                        initialFocus: MessageBox.Action.NO,
                        onClose: function (sButton) {
                            if (sButton === MessageBox.Action.YES) {
                                this.fnInitUserFieldData(oItem);
                            } else {
                                // if user clicked on set initial data
                                this._oOperationHeader.getModel().setProperty("/userFieldData/FieldKey", this._oOperationHeader.getModel().getProperty("/IntialFieldKey"));
                            }
                        }.bind(this),
                    });
                } else {
                    this.fnInitUserFieldData(oItem);
                }
            },
            /*function to init the user field data*/
            fnInitUserFieldData: function (oItem) {
                var oInitVs = {
                    Keyword1: "None",
                    Keyword2: "None",
                    Keyword3: "None",
                    Keyword4: "None",
                    Keyword5: "None",
                    Keyword5Uom: "None",
                    Keyword6: "None",
                    Keyword6Uom: "None",
                    Keyword7: "None",
                    Keyword7Uom: "None",
                    Keyword8: "None",
                    Keyword8Uom: "None",
                    Keyword9Date: "None",
                    Keyword10Date: "None",
                };
                oItem.UserField1 = "";
                oItem.UserField2 = "";
                oItem.UserField3 = "";
                oItem.UserField4 = "";
                oItem.UserField5 = "";
                oItem.UserField6 = "";
                oItem.UserField7 = "";
                oItem.UserField8 = "";
                oItem.UserField9 = "";
                oItem.UserField10 = "";
                oItem.UserField11 = "";
                oItem.UserField12 = "";
                oItem.Unit5 = "";
                oItem.Unit6 = "";
                oItem.Unit7 = "";
                oItem.Unit8 = "";
                this._oOperationHeader.getModel().setProperty("/userFieldData", oItem);
                this._oOperationHeader.getModel().setProperty("/userFieldVs", oInitVs);
            },
            /*function to validate quantity*/
            fnValidateQty: function (oEvent) {
                var oSource = oEvent.getSource(),
                    oValue;
                if (oSource.getValue()) {
                    oValue = formatter.getParsedNumeric(
                        oSource.getValue(),
                        this.getView().getModel("oOperationItemsModel").getProperty("/DCPFM")
                    );
                    if (oValue === "" || isNaN(oValue)) {
                        oSource.setValueState("Error");
                        oSource.setValue("");
                    } else {
                        oSource.setValueState("None");
                        this._oOperationHeader.getModel().setProperty(oEvent.getSource().getBinding("value").sPath, oValue.toString());
                    }
                } else {
                    oSource.setValueState("None");
                }
            },
            fnHandleUomChange: async function (oEvent) {
                var oSource = oEvent.getSource(),
                    bValidValue;
                if (oSource.getValue()) {
                    bValidValue = await this.fnValidDatainBackend("/ET_UnitSet", "MSEHI", "oSrvModel", oSource.getValue());
                    if (bValidValue) {
                        oSource.setValueState("None");
                    } else {
                        oSource.setValueState("Error");
                    }
                } else {
                    oSource.setValueState("None");
                }
            },
            /*function to open UOM Value help pop request from user fields*/
            fnShowUnitValueHelp: function (oEvent) {
                this.oUsrFieldSource = oEvent.getSource();
                if (!this.oUOMDialog) {
                    this.oUOMDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.UOMValuehelp", this
                    );
                    this.getView().addDependent(this.oUOMDialog);
                    this.oUOMDialog.setModel("i18n");
                }
                var oBinding = this.oUOMDialog.getBinding("items");
                oBinding.filter([]);
                this.oUOMDialog.open();
            },
            /*function to open currency Value help pop request from user fields*/
            fnShowCurValueHelp: function (oEvent) {
                this.oUsrFieldSource = oEvent.getSource();
                if (!this.CurKeyDialog) {
                    this.CurKeyDialog = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.CurKeyValuehelp", this
                    );
                    this.getView().addDependent(this.CurKeyDialog);
                    this.CurKeyDialog.setModel("i18n");
                }
                var oBinding = this.CurKeyDialog.getBinding("items");
                oBinding.filter([]);
                this.CurKeyDialog.open();
            },
            /*function to handle Cur Key Change*/
            fnValidateCurKey: async function (oEvent) {
                var oSource = oEvent.getSource(),
                    bValidValue;
                if (oSource.getValue()) {
                    bValidValue = await this.fnValidDatainBackend("/ET_Curr_KeySet", "WAERS", "oSrvModel", oSource.getValue());
                    if (bValidValue) {
                        oSource.setValueState("None");
                    } else {
                        oSource.setValueState("Error");
                    }
                } else {
                    oSource.setValueState("None");
                }
            },
            /*method to check whther entered date is valid or not*/
            handleDateChange: function (oEvent) {
                var sPath = oEvent.getSource().getBinding("value").sPath;
                this._oOperationHeader.getModel().setProperty(sPath, oEvent.getSource().getValue());
                oEvent.getSource().setValueState(oEvent.getParameters().valid ? "None" : "Error");
            },
            handleCheckBoxSel: function (oEvent) {
                var sPath = oEvent.getSource().getBinding("selected").sPath,
                    sValue = oEvent.getParameters().selected ? "X" : "";
                this._oOperationHeader.getModel().setProperty(sPath, sValue);
            },
            /*function to validate and save the user field data*/
            fnSaveOperationHeaderPopup: function () {
                var oModelData = this._oOperationHeader.getModel().getData(),
                    bValid = true,
                    sMsg = this.getView().getModel("i18n").getResourceBundle().getText("usrFields.confirmclosure"),
                    oOprItem = this.getView().getModel("oOperationItemsModel").getProperty(oModelData.oprItemPath),
                    oItem,
                    sOprItemPath;
                for (var key in oModelData.userFieldVs) {
                    if (oModelData.userFieldVs[key] === "Error") {
                        bValid = false;
                    }
                }
                if (!bValid) {
                    sap.m.MessageToast.show(
                        this.getView().getModel("i18n").getResourceBundle().getText("usrFields.validatioErr")
                    );
                } else {
                    sOprItemPath = oModelData.oprItemPath + "/OprUserFields/results/0";
                    /*if it is empty it means it's either new operation or empty operation 
                  so copy the key fields to send it to backend*/
                    if (
                        !this.getView().getModel("oOperationItemsModel").getProperty(sOprItemPath)
                    ) {
                        this.getView().getModel("oOperationItemsModel").setProperty(oModelData.oprItemPath + "/OprUserFields", {
                            results: [
                                {
                                    Plnal: oOprItem.Plnal,
                                    Plnfl: oOprItem.Plnfl,
                                    Plnnr: oOprItem.Plnnr,
                                    Plnty: oOprItem.Plnty,
                                },
                            ],
                        });
                        //if it is undefined assign empty object
                        if (!oModelData.userFieldData) {
                            oModelData.userFieldData = {};
                        }
                    }
                    oItem = this.getView().getModel("oOperationItemsModel").getProperty(sOprItemPath);
                    //copy user selcted keyword from if undefined copy null
                    oItem.FieldKey = oModelData.userFieldData.FieldKey;
                    oItem.Keyword1 = oModelData.userFieldData.Keyword1;
                    oItem.Keyword2 = oModelData.userFieldData.Keyword2;
                    oItem.Keyword3 = oModelData.userFieldData.Keyword3;
                    oItem.Keyword4 = oModelData.userFieldData.Keyword4;
                    oItem.Keyword5 = oModelData.userFieldData.Keyword5;
                    oItem.Keyword6 = oModelData.userFieldData.Keyword6;
                    oItem.Keyword7 = oModelData.userFieldData.Keyword7;
                    oItem.Keyword8 = oModelData.userFieldData.Keyword8;
                    oItem.Keyword9 = oModelData.userFieldData.Keyword9;
                    oItem.Keyword10 = oModelData.userFieldData.Keyword10;
                    oItem.Keyword11 = oModelData.userFieldData.Keyword11;
                    oItem.Keyword12 = oModelData.userFieldData.Keyword12;
                    oItem.Unit5 = oModelData.userFieldData.Unit5;
                    oItem.Unit6 = oModelData.userFieldData.Unit6;
                    oItem.Unit7 = oModelData.userFieldData.Unit7;
                    oItem.Unit8 = oModelData.userFieldData.Unit8;
                    oItem.Parameter5 = oItem.Parameter5;
                    oItem.Parameter6 = oItem.Parameter6;
                    oItem.UserField1 = oModelData.userFieldData.UserField1;
                    oItem.UserField2 = oModelData.userFieldData.UserField2;
                    oItem.UserField3 = oModelData.userFieldData.UserField3;
                    oItem.UserField4 = oModelData.userFieldData.UserField4;
                    oItem.UserField5 = oModelData.userFieldData.UserField5 === "" ? "0.000" : oModelData.userFieldData.UserField5;
                    oItem.UserField6 = oModelData.userFieldData.UserField6 === "" ? "0.000" : oModelData.userFieldData.UserField6;
                    oItem.UserField7 = oModelData.userFieldData.UserField7 === "" ? "0.000" : oModelData.userFieldData.UserField7;
                    oItem.UserField8 = oModelData.userFieldData.UserField8 === "" ? "0.000" : oModelData.userFieldData.UserField8;
                    oItem.UserField9 = oModelData.userFieldData.UserField9 === "" ? null : oModelData.userFieldData.UserField9;
                    oItem.UserField10 = oModelData.userFieldData.UserField10 === "" ? null : oModelData.userFieldData.UserField10;
                    oItem.UserField11 = oModelData.userFieldData.UserField11;
                    oItem.UserField12 = oModelData.userFieldData.UserField12;
                    this._oOperationHeader.close();
                }
            },
            /****************************OperationHeaderText Fragment*********************************/
            /*This method used to close Long text fragment*/
            fnOperationHeaderTextClosing: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("update.confirmclosure");
                var sPath = oRoutingModel.getProperty("/sOprPath");
                var sOprLongTextPath = sPath + "/Long_Text";
                var sPreviousLongText = oOperationItemsModel.getProperty("/sPreviousLongText");
                MessageBox.confirm(sMsg, {
                    icon: MessageBox.Icon.CONFIRM,
                    actions: [MessageBox.Action.YES, MessageBox.Action.NO],
                    initialFocus: MessageBox.Action.NO,
                    onClose: function (sButton) {
                        if (sButton === MessageBox.Action.YES) {
                            that._oOperationHeaderTextDialog.close();
                            oOperationItemsModel.setProperty(sOprLongTextPath + "/results", sPreviousLongText);
                        }
                    },
                });
            },
            /*This method used to close the dialog operation header text*/
            fnOperationHeaderTextClose: function () {
                if (this._oOperationHeaderTextDialog) {
                    var sHTMLLongText = this._oOperationHeaderTextDialog.getContent()[0].getValue();
                    var oRoutingModel = this.getView().getModel("oRoutingModel");
                    var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                    var sPath = oRoutingModel.getProperty("/sOprPath");
                    var sOprLongTextPath = sPath + "/Long_Text";
                    var sOprShortTextPath = sPath + "/Ltxa1";
                    sHTMLLongText = sHTMLLongText.replaceAll("\n", "<br />");
                    oOperationItemsModel.setProperty(sOprLongTextPath + "/results", sHTMLLongText);
                    //Setting First line of long text to Short Text
                    if (sHTMLLongText) {
                        var aPlainText = formatter.fnPlainText(sHTMLLongText);
                        var sFirstLine = aPlainText[0].Line;
                        var sFormattedText = sFirstLine.replace(/(\r\n|\n|\r)/gm, ""); //remove newline and carriage return
                        sFormattedText = sFormattedText.replace(/&nbsp;/g, "");
                        sFormattedText = formatter.fnDecodeEntities(sFormattedText); //Reconvert Unicode characters
                        var sOprShortText = sFormattedText.substring(0, 40);
                        oOperationItemsModel.setProperty(sOprShortTextPath, sOprShortText);
                        oOperationItemsModel.setProperty(sPath + "/SyncOprText", sOprShortText);
                    } else {
                        oOperationItemsModel.setProperty(sOprShortTextPath, "");
                        oOperationItemsModel.setProperty(sPath + "/SyncOprText", "");
                    }
                    this._oOperationHeaderTextDialog.close();
                }
            },
            /****************************PartNumberValueHelp Fragment*********************************/
            fnVHPartNumConfirm: function (oEvent) {
                var sItem = oEvent.getParameter("selectedItem"),
                    value = sItem.getCells()[0].getTitle(),
                    text = sItem.getCells()[1].getText(),
                    oModel = this.oDialogAddBom.getModel("addBomModel");
                oModel.setProperty(oModel.getData().SelectedRow + "/Component", value);
                oModel.setProperty(oModel.getData().SelectedRow + "/CompDesc", text);
                oModel.setProperty(oModel.getData().SelectedRow + "/ZzdsMatnrVS", "None");
                var ItemCat = oModel.getProperty(oModel.getData().SelectedRow + "/ItemCateg");
                if (ItemCat === "N") {
                    oModel.setProperty(oModel.getData().SelectedRow + "/ItemText1VS", "None");
                    oModel.setProperty(oModel.getData().SelectedRow + "/priceReq", false);
                    oModel.setProperty(oModel.getData().SelectedRow + "/priceVS", "None");
                    oModel.setProperty(oModel.getData().SelectedRow + "/Price", "0");
                    oModel.setProperty(oModel.getData().SelectedRow + "/purchaseGroupReq", false);
                    oModel.setProperty(oModel.getData().SelectedRow + "/purchaseGroupVS", "None");
                    oModel.setProperty(oModel.getData().SelectedRow + "/PurchGrp", "");
                    oModel.setProperty(oModel.getData().SelectedRow + "/materialGroupReq", false);
                    oModel.setProperty(oModel.getData().SelectedRow + "/materialGroupVS", "None");
                    oModel.setProperty(oModel.getData().SelectedRow + "/MatGroup", "");
                }
            },
            fnPartNumSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var aFilters = [];
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Material",
                        sap.ui.model.FilterOperator.Contains,
                        sValue
                    )
                );
                this.oPartNumHelpDialog.getBinding("items").filter(aFilters);
                this.getOwnerComponent()
                    .getModel("oSrvModel")
                    .read("/ET_Component_ListSet", {
                        filters: aFilters,
                        success: function (oData) {
                            if (oData.results[0].MsgType === "E") {
                                MessageBox.show(oData.results[0].Msg, {
                                    icon: sap.m.MessageBox.Icon.ERROR,
                                    title: "Error",
                                    actions: [sap.m.MessageBox.Action.OK],
                                    styleClass: "sapUiSizeCompact",
                                });
                            }
                        }.bind(this),
                        error: function (error) { }.bind(this),
                    });
            },
            /****************************PersonalizationDialog Fragment*********************************/
            // Added new method to close dialog and apply changes to table.
            fnHandleOk: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var aSelectedColumnNames = oRoutingHeaderModel.getProperty("/aSelectedColumnNames");
                var oTableColumns = this.getView().byId("BOMItemsId").getColumns();
                oTableColumns.forEach(function (n) {
                    n.setVisible(false);
                    aSelectedColumnNames.forEach(function (k) {
                        if (k.getColumnKey() === n.getLabel().getText()) {
                            n.setVisible(true);
                        }
                    });
                });
                //Close the dialog
                this.oPersonalizationDialog.close();
            },
            // Added new method to close dialog only with out any changes to table.
            fnHandleClose: function () {
                this.oPersonalizationDialog.close();
            },
            // Added new method for changing columns in BOM table
            onChangeColumnsItem: function (oEvent) {
                var aColumnsFromPanel = oEvent.getParameter("newItems");
                var aSelectedColumnNames = [];
                aColumnsFromPanel.forEach(function (n) {
                    if (n.getVisible() === true) {
                        aSelectedColumnNames.push(n);
                    }
                });
                //Set to model
                this.getView().getModel("oRoutingHeaderModel").setProperty("/aSelectedColumnNames", aSelectedColumnNames);
            },
            /****************************PlannerGroupValueHelp Fragment*********************************/
            /*This method used to set the selected Planner Group .*/
            fnPlannerGroupSelect: function (oEvent) {
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oRoutingHeaderModel.setProperty("/aHeaderDetails/Plnr_Grp", oSelectedItem.getCells()[0].getTitle());
                oRoutingHeaderModel.setProperty("/aHeaderDetails/Plnr_Grp_Txt", oSelectedItem.getCells()[1].getText());
                var oBinding = this._oPlannerValueHelpDialog.getBinding("items");
                oBinding.filter([]);
            },
            /*This method used to search froma vailable planner group.*/
            fnPlannerGroupSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant") || "";
                var oFilter = new Filter([new Filter("Plant", FilterOperator.EQ, sPlant),
                new Filter("Plnr_Grp", FilterOperator.Contains, sValue)
                ], true);
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            /****************************PlantValueHelp Fragment*********************************/
            /* This method used to set the selected workcenter*/
            fnPlantSelect: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var sPathPlant = oOperationItemsModel.getProperty("/sPathPlant");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var sPlantSource = oOperationItemsModel.getProperty("/sPlantSoruce");
                var sStdKeyPath = sPlantSource.getBindingContext("oOperationItemsModel").getPath() + "/bStdKeyReq";
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (
                    oOperationItemsModel.getProperty(sPathPlant) !==
                    oSelectedItem.getCells()[0].getTitle()
                ) {
                    oOperationItemsModel.setProperty(
                        sPathPlant,
                        oSelectedItem.getCells()[0].getTitle()
                    );
                    sPlantSource.fireChange();
                }
                if (this.fnSearchStdKeyList(oSelectedItem.getCells()[0].getTitle())) {
                    oOperationItemsModel.setProperty(sStdKeyPath, true);
                } else {
                    oOperationItemsModel.setProperty(sStdKeyPath, false);
                }
            },
            /* function to search the stdkeys list StdKey US */
            fnSearchStdKeyList: function (sPlant) {
                var aStdKeys = this.getView().getModel("oRoutingModel").getProperty("/stdKeyList");
                if (aStdKeys.indexOf(sPlant) > -1) {
                    return true;
                } else {
                    return false;
                }
            },
            /*This method used to search work center */
            fnPlantSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var oFilter = new Filter("Name", FilterOperator.Contains, sValue);
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            /****************************ProposedListOfBOMItemsPopup Fragment*********************************/
            /*Description : This method is used to append data based on tab selection except Quick allocation */
            fnOperationSelectForProposedData: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var sOpNum = oEvent.getSource().getSelectedKey();
                if (sOpNum !== "Quick Alloc") {
                    oOperationItemsModel.setProperty("/aOprTabsContentVisible", true);
                    oOperationItemsModel.setProperty("/aQuickTabContentVisible", false);
                    var oQuickScroll = sap.ui.getCore().byId("idQuickScroll");
                    oQuickScroll.destroyContent();
                    this.fnGetDataForProposedComponents(sOpNum);
                } else {
                    oOperationItemsModel.setProperty("/aOprTabsContentVisible", false);
                    oOperationItemsModel.setProperty("/aQuickTabContentVisible", true);
                    this.fnProposedBOMQuickAllocationTAB();
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to append data based on tab selection*/
            fnGetDataForProposedComponents: function (sSelOpNo) {
                var that = this;
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                var sKindlyWait = oBundle.getText("proposal.kindlyWait");
                var oDialogTab = new sap.m.BusyDialog({
                    text: sKindlyWait,
                });
                oDialogTab.open();
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                oOperationItemsModel.setProperty("/sSelectedOperationNumber", sSelOpNo);
                var aOpData = oOperationItemsModel.getProperty("/aProposedTableResults");
                var aSelOpItemsData = aOpData.filter(function (oEle) {
                    return oEle["Vornr"] === sSelOpNo;
                });
                if (aSelOpItemsData.length > 0) {
                    var aTotalTableData = [];
                    for (var i1 = 0; i1 < 5; i1++) {
                        var sval = i1 + 1;
                        var aProbData = aSelOpItemsData[0].Prob_Prio.results.filter(
                            function (oEle) {
                                return oEle["Prob_Prio"] === sval.toString();
                            }
                        );
                        if (aProbData[0]) {
                            aTotalTableData.push(aProbData[0]);
                        } else {
                            aTotalTableData.push({
                                Items: {
                                    results: [],
                                },
                                Prob_Prio: sval.toString(),
                                Vornr: sSelOpNo,
                            });
                        }
                    }
                    aSelOpItemsData[0].Prob_Prio.results = aTotalTableData;
                }
                oOperationItemsModel.setProperty("/aTableResultHeader", aSelOpItemsData[0]);
                //adding probebiltiy 1 data to table 1
                if (aSelOpItemsData[0] !== undefined) {
                    if (
                        aSelOpItemsData[0].Prob_Prio.results[0] !== undefined &&
                        aSelOpItemsData[0].Prob_Prio.results[0].Prob_Prio === "1"
                    ) {
                        var aPriority1Data =
                            aSelOpItemsData[0].Prob_Prio.results[0].Items.results;
                        aPriority1Data.RecSelected = "";
                        oOperationItemsModel.setProperty("/aTableResultPriority1", aPriority1Data);
                        oOperationItemsModel.setProperty("/sTableResultPriority1Length", aPriority1Data.length);
                    } else {
                        oOperationItemsModel.setProperty("/aTableResultPriority1", []);
                        oOperationItemsModel.setProperty("/aTableResultPriority1/RecSelected", "");
                        oOperationItemsModel.setProperty("/sTableResultPriority1Length", 1);
                    }
                }
                //adding probebiltiy 2 data to table 2
                if (aSelOpItemsData[0] !== undefined) {
                    if (
                        aSelOpItemsData[0].Prob_Prio.results[1] !== undefined &&
                        aSelOpItemsData[0].Prob_Prio.results[1].Prob_Prio === "2"
                    ) {
                        var aPriority2Data = aSelOpItemsData[0].Prob_Prio.results[1].Items.results;
                        aPriority2Data.RecSelected = "";
                        oOperationItemsModel.setProperty("/aTableResultPriority2", aPriority2Data);
                        oOperationItemsModel.setProperty("/sTableResultPriority2Length", aPriority2Data.length);
                    } else {
                        oOperationItemsModel.setProperty("/aTableResultPriority2", []);
                        oOperationItemsModel.setProperty("/aTableResultPriority2/RecSelected", "");
                        oOperationItemsModel.setProperty("/sTableResultPriority2Length", 1);
                    }
                }
                //adding probebiltiy 3 data to table 3
                if (aSelOpItemsData[0] !== undefined) {
                    if (
                        aSelOpItemsData[0].Prob_Prio.results[2] !== undefined &&
                        aSelOpItemsData[0].Prob_Prio.results[2].Prob_Prio === "3"
                    ) {
                        var aPriority3Data =
                            aSelOpItemsData[0].Prob_Prio.results[2].Items.results;
                        aPriority3Data.RecSelected = "";
                        oOperationItemsModel.setProperty("/aTableResultPriority3", aPriority3Data);
                        oOperationItemsModel.setProperty("/sTableResultPriority3Length", aPriority3Data.length);
                    } else {
                        oOperationItemsModel.setProperty("/aTableResultPriority3", []);
                        oOperationItemsModel.setProperty("/aTableResultPriority3/RecSelected", "");
                        oOperationItemsModel.setProperty("/sTableResultPriority3Length", 1);
                    }
                }
                //adding probebiltiy 3 data to table 4
                if (aSelOpItemsData[0] !== undefined) {
                    if (
                        aSelOpItemsData[0].Prob_Prio.results[3] !== undefined &&
                        aSelOpItemsData[0].Prob_Prio.results[3].Prob_Prio === "4"
                    ) {
                        var aPriority4Data =
                            aSelOpItemsData[0].Prob_Prio.results[3].Items.results;
                        aPriority4Data.RecSelected = "";
                        oOperationItemsModel.setProperty("/aTableResultPriority4", aPriority4Data);
                        oOperationItemsModel.setProperty("/sTableResultPriority4Length", aPriority4Data.length);
                    } else {
                        oOperationItemsModel.setProperty("/aTableResultPriority4", []);
                        oOperationItemsModel.setProperty("/aTableResultPriority4/RecSelected", "");
                        oOperationItemsModel.setProperty("/sTableResultPriority4Length", 1);
                    }
                }
                //adding probebiltiy 3 data to table 5
                if (aSelOpItemsData[0] !== undefined) {
                    if (
                        aSelOpItemsData[0].Prob_Prio.results[4] !== undefined &&
                        aSelOpItemsData[0].Prob_Prio.results[4].Prob_Prio === "5"
                    ) {
                        var aPriority5Data = aSelOpItemsData[0].Prob_Prio.results[4].Items.results;
                        aPriority5Data.RecSelected = "";
                        oOperationItemsModel.setProperty("/aTableResultPriority5", aPriority5Data);
                        oOperationItemsModel.setProperty("/sTableResultPriority5Length", aPriority5Data.length);
                    } else {
                        oOperationItemsModel.setProperty("/aTableResultPriority5", []);
                        oOperationItemsModel.setProperty("/aTableResultPriority5/RecSelected", "");
                        oOperationItemsModel.setProperty("/sTableResultPriority5Length", 1);
                    }
                }
                oDialogTab.close();
            },
            /*Description : This method is used to open Quick allocation tab*/
            fnProposedBOMQuickAllocationTAB: function () {
                var that = this;
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                var sKindlyWaitQuick = oBundle.getText("proposal.kindlyWait");
                var sItemNo = oBundle.getText("prop.ItemNo");
                var sPartNo = oBundle.getText("prop.PartNo");
                var sComponentDesc = oBundle.getText("prop.PartDesc");
                var sQuantity = oBundle.getText("prop.Quantity");
                var sCompUnit = oBundle.getText("prop.compUnit");
                var sItemCategory = oBundle.getText("prop.ItemCategory");
                var sOperationNo = oBundle.getText("proposal.operationNo");
                var sOperationShortText = oBundle.getText("proposal.operationShortText");
                var sTotalPropItems = oBundle.getText("proposal.totalPropItems");
                var sAcceptAlloc = oBundle.getText("proposal.acceptAlloc");
                var sBtnSelectAll = oBundle.getText("proposal.btnSelectAll");
                var oDialogQuick = new sap.m.BusyDialog({
                    text: sKindlyWaitQuick,
                });
                oDialogQuick.open();
                var iconTabBar = sap.ui.getCore().byId("idIconTabBarProposed");
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                oOperationItemsModel.setProperty("/aOprTabsContentVisible", false);
                oOperationItemsModel.setProperty("/aQuickTabContentVisible", true);
                var aTabsData = oOperationItemsModel.getProperty("/aTabsResult");
                aTabsData[0].sVisible = true;
                iconTabBar.setSelectedKey(aTabsData[0].sText);
                oOperationItemsModel.updateBindings(true);
                var oScrContainer = sap.ui.getCore().byId("idQuickScroll");
                for (var i = 0; i < aTabsData.length; i++) {
                    if (aTabsData[i].sText !== "Quick Alloc") {
                        var sCount = i + 1,
                            sTblName = "oTable",
                            sDetailsVBox = "oDetailsVBox",
                            sTableVBox = "oTableVBox",
                            sMainBox = "oMainBox",
                            sBtn1 = "oBtn1",
                            sBtn2 = "oBtn2",
                            sMainBox = "oMainBox",
                            sLeftHBox = "oLeftHBox",
                            sRightHBox = "oRightHBox",
                            sOVerFlow = "oOVerFlow",
                            sOVerFlowHBox = "oOVerFlowHBox",
                            oTbl1 = sTblName + sCount,
                            oTbl2 = sTblName + sCount,
                            oTbl3 = sTblName + sCount,
                            oTbl4 = sTblName + sCount,
                            oBtn1 = sBtn1 + sCount,
                            oBtn2 = sBtn2 + sCount,
                            oOVerFlow = sOVerFlow + sCount,
                            oOVerFlowHBox = sOVerFlowHBox + sCount,
                            oDetailsVBox = sDetailsVBox + sCount,
                            oTableVBox = sTableVBox + sCount,
                            oMainBox = sMainBox + sCount,
                            oLeftHBox = sLeftHBox + sCount,
                            oRightHBox = sRightHBox + sCount,
                            aPropData = oOperationItemsModel.getProperty("/aProposedTableResults"),
                            aEachTabData = aPropData.filter(function (oEle) {
                                return oEle["Vornr"] === aTabsData[i].sText;
                            });
                        if (aEachTabData.length > 0) {
                            var aTotalTableData = [];
                            for (var i1 = 0; i1 < 4; i1++) {
                                var sval = i1 + 1;
                                var aProbData = aEachTabData[0].Prob_Prio.results.filter(
                                    function (oEle) {
                                        return oEle["Prob_Prio"] === sval.toString();
                                    }
                                );
                                if (aProbData[0]) {
                                    aTotalTableData.push(aProbData[0]);
                                } else {
                                    aTotalTableData.push({
                                        Items: {
                                            results: [],
                                        },
                                        Prob_Prio: sval.toString(),
                                        Vornr: aTabsData[i].sText,
                                    });
                                }
                            }
                            aEachTabData[0].Prob_Prio.results = aTotalTableData;
                            //keep height based on allocation
                            if (aEachTabData[0].AccptAlloc === "X") {
                                aEachTabData[0].QuickTabSectionHeight =
                                    (aEachTabData[0].Prob_Prio.results[0].Items.results.length +
                                        aEachTabData[0].Prob_Prio.results[1].Items.results.length +
                                        aEachTabData[0].Prob_Prio.results[2].Items.results.length +
                                        aEachTabData[0].Prob_Prio.results[3].Items.results.length) *
                                    2 +
                                    22 +
                                    "rem";
                            } else {
                                aEachTabData[0].QuickTabSectionHeight =
                                    aEachTabData[0].Prob_Prio.results[0].Items.results.length *
                                    2 +
                                    10 +
                                    "rem";
                            }
                            oMainBox = new sap.m.HBox({
                                height: aEachTabData[0].QuickTabSectionHeight,
                                width: "auto",
                            }).addStyleClass("clsPropTblSection");
                            oLeftHBox = new sap.m.HBox({
                                height: aEachTabData[0].QuickTabSectionHeight,
                                width: "33%",
                            });
                            oRightHBox = new sap.m.HBox({
                                height: aEachTabData[0].QuickTabSectionHeight,
                                width: "67%",
                            });
                            oTableVBox = new sap.m.VBox({
                                height: aEachTabData[0].QuickTabSectionHeight,
                                width: "100%",
                            });
                            oDetailsVBox = new sap.m.VBox({
                                height: aEachTabData[0].QuickTabSectionHeight,
                                width: "100%",
                            }).addStyleClass("clsProposedBOMHeader");
                            oMainBox.addItem(oLeftHBox);
                            oMainBox.addItem(oRightHBox);
                            oRightHBox.addItem(oTableVBox);
                            oLeftHBox.addItem(oDetailsVBox);
                        }

                        if (aEachTabData[0] !== undefined) {
                            if (
                                aEachTabData[0].Prob_Prio.results[0] !== undefined &&
                                aEachTabData[0].Prob_Prio.results[0].Prob_Prio === "1"
                            ) {
                                aEachTabData[0].Prob_Prio.results[0].Items.results.Table1Visible = true;
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority1" + sCount, aEachTabData[0].Prob_Prio.results[0].Items.results);
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority1" + sCount + "/Table1Length", aEachTabData[0].Prob_Prio.results[0].Items.results.length);
                            } else {
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority1" + sCount, []);
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority1" + sCount + "/Table1Visible", false);
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority1Length" + sCount + "/Table1Length", 0);
                            }
                        } else {
                            oOperationItemsModel.setProperty("/aQuickTableResultPriority1" + sCount, []);
                            oOperationItemsModel.setProperty("/aQuickTableResultPriority1" + sCount + "/Table1Visible", false);
                            oOperationItemsModel.setProperty("/aQuickTableResultPriority1Length" + sCount + "/Table1Length", 0);
                        }
                        //adding probebiltiy 2 data to table 2
                        if (aEachTabData[0] !== undefined) {
                            if (
                                aEachTabData[0].Prob_Prio.results[1] !== undefined &&
                                aEachTabData[0].Prob_Prio.results[1].Prob_Prio === "2"
                            ) {
                                if (aEachTabData[0].AccptAlloc === "X") {
                                    aEachTabData[0].Prob_Prio.results[1].Items.results.Table2Visible = true;
                                } else {
                                    aEachTabData[0].Prob_Prio.results[1].Items.results.Table2Visible = false;
                                }
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority2" + sCount,
                                    aEachTabData[0].Prob_Prio.results[1].Items.results);
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority2" + sCount + "/Table2Length",
                                    aEachTabData[0].Prob_Prio.results[1].Items.results.length);
                            } else {
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority2" + sCount, []);
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority2" + sCount + "/Table2Length", 1);
                                if (aEachTabData[0].AccptAlloc === "X") {
                                    oOperationItemsModel.setProperty("/aQuickTableResultPriority2" + sCount + "/Table2Visible", true);
                                } else {
                                    oOperationItemsModel.setProperty("/aQuickTableResultPriority2" + sCount + "/Table2Visible", false);
                                }
                            }
                        } else {
                            oOperationItemsModel.setProperty("/aQuickTableResultPriority2" + sCount, []);
                            oOperationItemsModel.setProperty("/aQuickTableResultPriority2" + sCount + "/Table2Visible", false);
                            oOperationItemsModel.setProperty("/aQuickTableResultPriority2" + sCount + "/Table2Length", 1);
                        }
                        //adding probebiltiy 3 data to table 3
                        if (aEachTabData[0] !== undefined) {
                            if (
                                aEachTabData[0].Prob_Prio.results[2] !== undefined &&
                                aEachTabData[0].Prob_Prio.results[2].Prob_Prio === "3"
                            ) {
                                if (aEachTabData[0].AccptAlloc === "X") {
                                    aEachTabData[0].Prob_Prio.results[2].Items.results.Table3Visible = true;
                                } else {
                                    aEachTabData[0].Prob_Prio.results[2].Items.results.Table3Visible = false;
                                }
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority3" + sCount,
                                    aEachTabData[0].Prob_Prio.results[2].Items.results);
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority3" + sCount + "/Table3Length",
                                    aEachTabData[0].Prob_Prio.results[2].Items.results.length);
                            } else {
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority3" + sCount, []);
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority3" + sCount + "/Table3Length", 1);
                                if (aEachTabData[0].AccptAlloc === "X") {
                                    oOperationItemsModel.setProperty("/aQuickTableResultPriority3" + sCount + "/Table3Visible", true);
                                } else {
                                    oOperationItemsModel.setProperty("/aQuickTableResultPriority3" + sCount + "/Table3Visible", false);
                                }
                            }
                        } else {
                            oOperationItemsModel.setProperty("/aQuickTableResultPriority3" + sCount, []);
                            oOperationItemsModel.setProperty("/aQuickTableResultPriority3" + sCount + "/Table3Visible", false);
                            oOperationItemsModel.setProperty("/aQuickTableResultPriority3" + sCount + "/Table3Length", 1);
                        }
                        //adding probebiltiy 3 data to table 4
                        if (aEachTabData[0] !== undefined) {
                            if (
                                aEachTabData[0].Prob_Prio.results[3] !== undefined &&
                                aEachTabData[0].Prob_Prio.results[3].Prob_Prio === "4"
                            ) {
                                if (aEachTabData[0].AccptAlloc === "X") {
                                    aEachTabData[0].Prob_Prio.results[3].Items.results.Table4Visible = true;
                                } else {
                                    aEachTabData[0].Prob_Prio.results[3].Items.results.Table4Visible = false;
                                }
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority4" + sCount,
                                    aEachTabData[0].Prob_Prio.results[3].Items.results);
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority4" + sCount + "/Table4Length",
                                    aEachTabData[0].Prob_Prio.results[3].Items.results.length);
                            } else {
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority4" + sCount, []);
                                oOperationItemsModel.setProperty("/aQuickTableResultPriority4" + sCount + "/Table4Length", 1);
                                if (aEachTabData[0].AccptAlloc === "X") {
                                    oOperationItemsModel.setProperty("/aQuickTableResultPriority4" + sCount + "/Table4Visible", true);
                                } else {
                                    oOperationItemsModel.setProperty("/aQuickTableResultPriority4" + sCount + "/Table4Visible", false);
                                }
                            }
                        } else {
                            oOperationItemsModel.setProperty("/aQuickTableResultPriority4" + sCount, []);
                            oOperationItemsModel.setProperty("/aQuickTableResultPriority4" + sCount + "/Table4Length", 1);
                            oOperationItemsModel.setProperty("/aQuickTableResultPriority4" + sCount + "/Table4Visible", false);
                        }
                        //Table1 for very high probability reocrds
                        oTbl1 = new sap.ui.table.Table({
                            selectionMode: sap.ui.table.SelectionMode.None,
                            width: "100%",
                        }).addStyleClass("clsPropTblspace");
                        oTbl1.addColumn(
                            new sap.ui.table.Column({
                                width: "5%",
                                label: new sap.m.Label({
                                    text: "",
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.HBox({
                                    justifyContent: "Center",
                                    alignContent: "Center",
                                    alignItems: "Center",
                                    items: [
                                        new sap.m.CheckBox({
                                            enabled:
                                                aEachTabData[0].AccptAlloc === "X" ? false : true,
                                            selected: {
                                                path: "oOperationItemsModel>comp_sel",
                                                formatter: function (bStatus) {
                                                    if (bStatus === "X") {
                                                        return true;
                                                    } else {
                                                        return false;
                                                    }
                                                },
                                            },
                                            select: function (oEvent) {
                                                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").sPath;
                                                if (oEvent.getSource().getSelected()) {
                                                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "X");
                                                } else {
                                                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "");
                                                }
                                                oOperationItemsModel.updateBindings(true);
                                            },
                                        }),
                                    ],
                                }),
                            })
                        );
                        oTbl1.addColumn(
                            new sap.ui.table.Column({
                                width: "10%",
                                label: new sap.m.Label({
                                    text: sItemNo,
                                    tooltip: sItemNo,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>ItemNo}",
                                }),
                            })
                        );
                        oTbl1.addColumn(
                            new sap.ui.table.Column({
                                width: "23%",
                                label: new sap.m.Label({
                                    text: sPartNo,
                                    tooltip: sPartNo,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>Component}",
                                    tooltip: "{oOperationItemsModel>Component}",
                                }),
                            })
                        );
                        oTbl1.addColumn(
                            new sap.ui.table.Column({
                                width: "28%",
                                label: new sap.m.Label({
                                    text: sComponentDesc,
                                    tooltip: sComponentDesc,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>CompDesc}",
                                }),
                            })
                        );
                        oTbl1.addColumn(
                            new sap.ui.table.Column({
                                width: "10%",
                                label: new sap.m.Label({
                                    text: sQuantity,
                                    tooltip: sQuantity,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>CompQty}",
                                }),
                            })
                        );
                        oTbl1.addColumn(
                            new sap.ui.table.Column({
                                width: "12%",
                                label: new sap.m.Label({
                                    text: sItemCategory,
                                    tooltip: sItemCategory,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>ItemCateg}",
                                }),
                            })
                        );
                        oTbl1.addColumn(
                            new sap.ui.table.Column({
                                width: "12%",
                                label: new sap.m.Label({
                                    text: sCompUnit,
                                    tooltip: sCompUnit,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>CompUnit}",
                                }),
                            })
                        );
                        oTbl1.bindRows("oOperationItemsModel>/aQuickTableResultPriority1" + sCount);
                        oTbl1.setVisible(
                            oOperationItemsModel.getProperty("/aQuickTableResultPriority1" + sCount + "/Table1Visible")
                        );
                        oTbl1.setVisibleRowCountMode("Auto");
                        oTbl1.setMinAutoRowCount(
                            oOperationItemsModel.getProperty("/aQuickTableResultPriority1" + sCount + "/Table1Length"));
                        oTableVBox.addItem(oTbl1);
                        //Table2 for very high probability reocrds
                        oTbl2 = new sap.ui.table.Table({
                            selectionMode: sap.ui.table.SelectionMode.None,
                            width: "100%",
                        }).addStyleClass("clsPropTblspace");
                        oTbl2.addColumn(
                            new sap.ui.table.Column({
                                width: "5%",
                                label: new sap.m.Label({
                                    text: "",
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.HBox({
                                    justifyContent: "Center",
                                    alignContent: "Center",
                                    alignItems: "Center",
                                    items: [
                                        new sap.m.CheckBox({
                                            enabled:
                                                aEachTabData[0].AccptAlloc === "X" ? false : true,
                                            selected: {
                                                path: "oOperationItemsModel>comp_sel",
                                                formatter: function (bStatus) {
                                                    if (bStatus === "X") {
                                                        return true;
                                                    } else {
                                                        return false;
                                                    }
                                                },
                                            },
                                            select: function (oEvent) {
                                                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").sPath;
                                                if (oEvent.getSource().getSelected()) {
                                                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "X");
                                                } else {
                                                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "");
                                                }
                                                oOperationItemsModel.updateBindings(true);
                                            },
                                        }),
                                    ],
                                }),
                            })
                        );
                        oTbl2.addColumn(
                            new sap.ui.table.Column({
                                width: "10%",
                                label: new sap.m.Label({
                                    text: sItemNo,
                                    tooltip: sItemNo,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>ItemNo}",
                                }),
                            })
                        );
                        oTbl2.addColumn(
                            new sap.ui.table.Column({
                                width: "23%",
                                label: new sap.m.Label({
                                    text: sPartNo,
                                    tooltip: sPartNo,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>Component}",
                                    tooltip: "{oOperationItemsModel>Component}",
                                }),
                            })
                        );
                        oTbl2.addColumn(
                            new sap.ui.table.Column({
                                width: "28%",
                                label: new sap.m.Label({
                                    text: sComponentDesc,
                                    tooltip: sComponentDesc,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>CompDesc}",
                                }),
                            })
                        );
                        oTbl2.addColumn(
                            new sap.ui.table.Column({
                                width: "10%",
                                label: new sap.m.Label({
                                    text: sQuantity,
                                    tooltip: sQuantity,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>CompQty}",
                                }),
                            })
                        );
                        oTbl2.addColumn(
                            new sap.ui.table.Column({
                                width: "12%",
                                label: new sap.m.Label({
                                    text: sItemCategory,
                                    tooltip: sItemCategory,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>ItemCateg}",
                                }),
                            })
                        );
                        oTbl2.addColumn(
                            new sap.ui.table.Column({
                                width: "12%",
                                label: new sap.m.Label({
                                    text: sCompUnit,
                                    tooltip: sCompUnit,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>CompUnit}",
                                }),
                            })
                        );
                        oTbl2.bindRows("oOperationItemsModel>/aQuickTableResultPriority2" + sCount);
                        oTbl2.setVisible(oOperationItemsModel.getProperty("/aQuickTableResultPriority2" + sCount + "/Table2Visible"));
                        oTbl2.setVisibleRowCountMode("Auto");
                        oTbl2.setMinAutoRowCount(oOperationItemsModel.getProperty("/aQuickTableResultPriority2" + sCount + "/Table2Length"));
                        oTableVBox.addItem(oTbl2);
                        //Table3 for very high probability reocrds
                        oTbl3 = new sap.ui.table.Table({
                            selectionMode: sap.ui.table.SelectionMode.None,
                            width: "100%",
                        }).addStyleClass("clsPropTblspace");
                        oTbl3.addColumn(
                            new sap.ui.table.Column({
                                width: "5%",
                                label: new sap.m.Label({
                                    text: "",
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.HBox({
                                    justifyContent: "Center",
                                    alignContent: "Center",
                                    alignItems: "Center",
                                    items: [
                                        new sap.m.CheckBox({
                                            enabled:
                                                aEachTabData[0].AccptAlloc === "X" ? false : true,
                                            selected: {
                                                path: "oOperationItemsModel>comp_sel",
                                                formatter: function (bStatus) {
                                                    if (bStatus === "X") {
                                                        return true;
                                                    } else {
                                                        return false;
                                                    }
                                                },
                                            },
                                            select: function (oEvent) {
                                                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").sPath;
                                                if (oEvent.getSource().getSelected()) {
                                                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "X");
                                                } else {
                                                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "");
                                                }
                                                oOperationItemsModel.updateBindings(true);
                                            },
                                        }),
                                    ],
                                }),
                            })
                        );
                        oTbl3.addColumn(
                            new sap.ui.table.Column({
                                width: "10%",
                                label: new sap.m.Label({
                                    text: sItemNo,
                                    tooltip: sItemNo,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>ItemNo}",
                                }),
                            })
                        );
                        oTbl3.addColumn(
                            new sap.ui.table.Column({
                                width: "23%",
                                label: new sap.m.Label({
                                    text: sPartNo,
                                    tooltip: sPartNo,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>Component}",
                                    tooltip: "{oOperationItemsModel>Component}",
                                }),
                            })
                        );
                        oTbl3.addColumn(
                            new sap.ui.table.Column({
                                width: "28%",
                                label: new sap.m.Label({
                                    text: sComponentDesc,
                                    tooltip: sComponentDesc,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>CompDesc}",
                                }),
                            })
                        );
                        oTbl3.addColumn(
                            new sap.ui.table.Column({
                                width: "10%",
                                label: new sap.m.Label({
                                    text: sQuantity,
                                    tooltip: sQuantity,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>CompQty}",
                                }),
                            })
                        );
                        oTbl3.addColumn(
                            new sap.ui.table.Column({
                                width: "12%",
                                label: new sap.m.Label({
                                    text: sItemCategory,
                                    tooltip: sItemCategory,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>ItemCateg}",
                                }),
                            })
                        );
                        oTbl3.addColumn(
                            new sap.ui.table.Column({
                                width: "12%",
                                label: new sap.m.Label({
                                    text: sCompUnit,
                                    tooltip: sCompUnit,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>CompUnit}",
                                }),
                            })
                        );
                        oTbl3.bindRows("oOperationItemsModel>/aQuickTableResultPriority3" + sCount);
                        oTbl3.setVisible(oOperationItemsModel.getProperty("/aQuickTableResultPriority3" + sCount + "/Table3Visible"));
                        oTbl3.setVisibleRowCountMode("Auto");
                        oTbl3.setMinAutoRowCount(oOperationItemsModel.getProperty("/aQuickTableResultPriority3" + sCount + "/Table3Length"));
                        oTableVBox.addItem(oTbl3);
                        //Table4 for very high probability reocrds
                        oTbl4 = new sap.ui.table.Table({
                            selectionMode: sap.ui.table.SelectionMode.None,
                            width: "100%",
                        }).addStyleClass("clsPropTblspace");
                        oTbl4.addColumn(
                            new sap.ui.table.Column({
                                width: "5%",
                                label: new sap.m.Label({
                                    text: "",
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.HBox({
                                    justifyContent: "Center",
                                    alignContent: "Center",
                                    alignItems: "Center",
                                    items: [
                                        new sap.m.CheckBox({
                                            enabled:
                                                aEachTabData[0].AccptAlloc === "X" ? false : true,
                                            selected: {
                                                path: "oOperationItemsModel>comp_sel",
                                                formatter: function (bStatus) {
                                                    if (bStatus === "X") {
                                                        return true;
                                                    } else {
                                                        return false;
                                                    }
                                                },
                                            },
                                            select: function (oEvent) {
                                                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").sPath;
                                                if (oEvent.getSource().getSelected()) {
                                                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "X");
                                                } else {
                                                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "");
                                                }
                                                oOperationItemsModel.updateBindings(true);
                                            },
                                        }),
                                    ],
                                }),
                            })
                        );
                        oTbl4.addColumn(
                            new sap.ui.table.Column({
                                width: "10%",
                                label: new sap.m.Label({
                                    text: sItemNo,
                                    tooltip: sItemNo,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>ItemNo}",
                                }),
                            })
                        );
                        oTbl4.addColumn(
                            new sap.ui.table.Column({
                                width: "23%",
                                label: new sap.m.Label({
                                    text: sPartNo,
                                    tooltip: sPartNo,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>Component}",
                                    tooltip: "{oOperationItemsModel>Component}",
                                }),
                            })
                        );
                        oTbl4.addColumn(
                            new sap.ui.table.Column({
                                width: "28%",
                                label: new sap.m.Label({
                                    text: sComponentDesc,
                                    tooltip: sComponentDesc,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>CompDesc}",
                                }),
                            })
                        );
                        oTbl4.addColumn(
                            new sap.ui.table.Column({
                                width: "10%",
                                label: new sap.m.Label({
                                    text: sQuantity,
                                    tooltip: sQuantity,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>CompQty}",
                                }),
                            })
                        );
                        oTbl4.addColumn(
                            new sap.ui.table.Column({
                                width: "12%",
                                label: new sap.m.Label({
                                    text: sItemCategory,
                                    tooltip: sItemCategory,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>ItemCateg}",
                                }),
                            })
                        );
                        oTbl4.addColumn(
                            new sap.ui.table.Column({
                                width: "12%",
                                label: new sap.m.Label({
                                    text: sCompUnit,
                                    tooltip: sCompUnit,
                                    wrapping: true,
                                    design: "Standard",
                                }),
                                template: new sap.m.Text({
                                    text: "{oOperationItemsModel>CompUnit}",
                                }),
                            })
                        );
                        oTbl4.bindRows("oOperationItemsModel>/aQuickTableResultPriority4" + sCount);
                        oTbl4.setVisible(oOperationItemsModel.getProperty("/aQuickTableResultPriority4" + sCount + "/Table4Visible"));
                        oTbl4.setVisibleRowCountMode("Auto");
                        oTbl4.setMinAutoRowCount(oOperationItemsModel.getProperty("/aQuickTableResultPriority4" + sCount + "/Table4Length"));
                        oTableVBox.addItem(oTbl4);
                        oDetailsVBox.addItem(
                            new sap.m.Label({
                                design: "Bold",
                                text: sOperationNo,
                            })
                        );
                        oDetailsVBox.addItem(
                            new sap.m.Text({
                                text: aEachTabData[0].Vornr,
                            })
                        );
                        oDetailsVBox.addItem(
                            new sap.m.Label({
                                design: "Bold",
                                text: sOperationShortText,
                            })
                        );
                        oDetailsVBox.addItem(
                            new sap.m.Input({
                                value: aEachTabData[0].Ltxa1,
                                tooltip: aEachTabData[0].Ltxa1,
                                enabled: false,
                                width: "90%",
                            })
                        );
                        oDetailsVBox.addItem(
                            new sap.m.Text({
                                text: sTotalPropItems + aEachTabData[0].NoComp + "",
                            })
                        );
                        oDetailsVBox.addItem(
                            new sap.m.CheckBox({
                                text: sAcceptAlloc,
                                selected: aEachTabData[0].AccptAlloc === "X" ? true : false,
                                enabled: aEachTabData[0].AccptAlloc === "X" ? false : true,
                                customData: [
                                    {
                                        Type: "sap.ui.core.CustomData",
                                        key: "QuickTabCheckBoxSelection",
                                        value: aEachTabData[0].Vornr,
                                    },
                                ],
                                select: function (oEvent) {
                                    var oEvt = oEvent.getSource();
                                    var sOpNum = oEvt.data("QuickTabCheckBoxSelection");
                                    var aSelTabData = aTabsData.filter(function (oEle) {
                                        return oEle["sText"] === sOpNum;
                                    });
                                    var aOpData = oOperationItemsModel.getProperty("/aProposedTableResults");
                                    var aSelOpItemsData = aOpData.filter(function (oEle) {
                                        return oEle["Vornr"] === sOpNum;
                                    });
                                    if (oEvent.getSource().getSelected()) {
                                        aSelTabData[0].sColor = "Positive";
                                        aSelTabData[0].sIcon = "sap-icon://activity-2";
                                        aSelOpItemsData[0].AccptAlloc = "X";
                                    } else {
                                        aSelTabData[0].sColor = "Neutral";
                                        aSelTabData[0].sIcon = "sap-icon://activity-individual";
                                        aSelOpItemsData[0].AccptAlloc = "";
                                    }
                                    oOperationItemsModel.updateBindings(true);
                                },
                            })
                        );
                        oTbl1.setRowSettingsTemplate(
                            new sap.ui.table.RowSettings({
                                highlight: {
                                    path: "oOperationItemsModel>Prob_Prio",
                                    formatter: function (bStatus) {
                                        if (bStatus !== null || bStatus !== undefined) {
                                            if (bStatus === "1") {
                                                return "Success";
                                            } else if (bStatus === "2") {
                                                return "Indication05";
                                            } else if (bStatus === "3") {
                                                return "Indication02";
                                            } else if (bStatus === "4") {
                                                return "Information";
                                            }
                                        }
                                    },
                                },
                            })
                        );
                        oTbl2.setRowSettingsTemplate(
                            new sap.ui.table.RowSettings({
                                highlight: {
                                    path: "oOperationItemsModel>Prob_Prio",
                                    formatter: function (bStatus) {
                                        if (bStatus !== null && bStatus !== undefined) {
                                            if (bStatus === "1") {
                                                return "Success";
                                            } else if (bStatus === "2") {
                                                return "Indication05";
                                            } else if (bStatus === "3") {
                                                return "Indication02";
                                            } else if (bStatus === "4") {
                                                return "Information";
                                            }
                                        }
                                    },
                                },
                            })
                        );
                        oTbl3.setRowSettingsTemplate(
                            new sap.ui.table.RowSettings({
                                highlight: {
                                    path: "oOperationItemsModel>Prob_Prio",
                                    formatter: function (bStatus) {
                                        if (bStatus !== null || bStatus !== undefined) {
                                            if (bStatus === "1") {
                                                return "Success";
                                            } else if (bStatus === "2") {
                                                return "Indication05";
                                            } else if (bStatus === "3") {
                                                return "Indication02";
                                            } else if (bStatus === "4") {
                                                return "Information";
                                            }
                                        }
                                    },
                                },
                            })
                        );
                        oTbl4.setRowSettingsTemplate(
                            new sap.ui.table.RowSettings({
                                highlight: {
                                    path: "oOperationItemsModel>Prob_Prio",
                                    formatter: function (bStatus) {
                                        if (bStatus !== null || bStatus !== undefined) {
                                            if (bStatus === "1") {
                                                return "Success";
                                            } else if (bStatus === "2") {
                                                return "Indication05";
                                            } else if (bStatus === "3") {
                                                return "Indication02";
                                            } else if (bStatus === "4") {
                                                return "Information";
                                            }
                                        }
                                    },
                                },
                            })
                        );
                        oOVerFlow = new sap.m.OverflowToolbar({
                            style: "Clear",
                        });
                        oBtn1 = new sap.m.Button({
                            text: sBtnSelectAll,
                            type: "Emphasized",
                            visible: aEachTabData[0].AccptAlloc === "X" ? false : true,
                            customData: [
                                {
                                    Type: "sap.ui.core.CustomData",
                                    key: "QuickTabCheckBoxSelectionBtn",
                                    value: aEachTabData[0].Vornr,
                                },
                            ],
                            press: function (oEvent) {
                                var sOpNum = oEvent.getSource().data("QuickTabCheckBoxSelectionBtn");
                                var aPropDataRes = oOperationItemsModel.getProperty("/aProposedTableResults"),
                                    aItems = aPropDataRes.filter(function (oEle) {
                                        return oEle["Vornr"] === sOpNum;
                                    });
                                var aSelOpItemsData =
                                    aItems[0].Prob_Prio.results[0].Items.results.filter(function (
                                        oEle
                                    ) {
                                        return oEle["comp_sel"] !== "X";
                                    });
                                if (aSelOpItemsData.length > 0) {
                                    for (var k = 0; k < aItems[0].Prob_Prio.results[0].Items.results.length; k++) {
                                        aItems[0].Prob_Prio.results[0].Items.results[k].comp_sel = "X";
                                    }
                                } else {
                                    for (var j = 0; j < aItems[0].Prob_Prio.results[0].Items.results.length; j++) {
                                        aItems[0].Prob_Prio.results[0].Items.results[j].comp_sel = "";
                                    }
                                }
                                oOperationItemsModel.updateBindings(true);
                            },
                        });
                        oOVerFlowHBox = new sap.m.HBox({});
                        oOVerFlowHBox.addItem(oBtn1);
                        oOVerFlow.addContent(oOVerFlowHBox);
                        if (aEachTabData[0].AccptAlloc !== "X") {
                            oTbl1.addExtension(oOVerFlow);
                        }
                        oScrContainer.addContent(oMainBox);
                        oOperationItemsModel.updateBindings(true);
                    }
                }
                oDialogQuick.close();
            },
            /*Description : This method is used to make select of all the records in the 1st table of BOM proposed*/
            fnSelectVHTableData: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var aOperMainData = oOperationItemsModel.getProperty("/aProposedTableResults");
                var sOpNum = oOperationItemsModel.getProperty("/sSelectedOperationNumber");
                var aSelOpItemsData = aOperMainData.filter(function (oEle) {
                    return oEle["Vornr"] === sOpNum;
                });
                var aItems = aSelOpItemsData[0].Prob_Prio.results[0].Items.results.filter(
                    function (oEle) {
                        return oEle["comp_sel"] !== "X";
                    }
                );
                if (aItems.length > 0) {
                    for (var i = 0; i < aSelOpItemsData[0].Prob_Prio.results[0].Items.results.length; i++) {
                        aSelOpItemsData[0].Prob_Prio.results[0].Items.results[i].comp_sel = "X";
                    }
                } else {
                    for (var j = 0; j < aSelOpItemsData[0].Prob_Prio.results[0].Items.results.length; j++) {
                        aSelOpItemsData[0].Prob_Prio.results[0].Items.results[j].comp_sel = "";
                    }
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to make select of all the records in the 2nd table of BOM proposed*/
            fnSelectHTableData: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var aOperMainData = oOperationItemsModel.getProperty("/aProposedTableResults");
                var sOpNum = oOperationItemsModel.getProperty("/sSelectedOperationNumber");
                var aSelOpItemsData = aOperMainData.filter(function (oEle) {
                    return oEle["Vornr"] === sOpNum;
                });
                var aItems =
                    aSelOpItemsData[0].Prob_Prio.results[1].Items.results.filter(
                        function (oEle) {
                            return oEle["comp_sel"] !== "X";
                        }
                    );
                if (aItems.length > 0) {
                    for (var i = 0; i < aSelOpItemsData[0].Prob_Prio.results[1].Items.results.length; i++) {
                        aSelOpItemsData[0].Prob_Prio.results[1].Items.results[i].comp_sel = "X";
                    }
                } else {
                    for (var j = 0; j < aSelOpItemsData[0].Prob_Prio.results[1].Items.results.length; j++) {
                        aSelOpItemsData[0].Prob_Prio.results[1].Items.results[j].comp_sel = "";
                    }
                }
                oOperationItemsModel.updateBindings(true);
            },
            fnSelectProposedCompCheckBox1: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").sPath;
                if (oEvent.getSource().getSelected()) {
                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "X");
                } else {
                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            fnSelectProposedCompCheckBox2: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").sPath;
                if (oEvent.getSource().getSelected()) {
                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "X");
                } else {
                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to make select of all the records in the 3rd table of BOM proposed*/
            fnSelectMTableData: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var aOperMainData = oOperationItemsModel.getProperty("/aProposedTableResults");
                var sOpNum = oOperationItemsModel.getProperty("/sSelectedOperationNumber");
                var aSelOpItemsData = aOperMainData.filter(function (oEle) {
                    return oEle["Vornr"] === sOpNum;
                });
                var aItems = aSelOpItemsData[0].Prob_Prio.results[2].Items.results.filter(
                    function (oEle) {
                        return oEle["comp_sel"] !== "X";
                    }
                );
                if (aItems.length > 0) {
                    for (var i = 0; i < aSelOpItemsData[0].Prob_Prio.results[2].Items.results.length; i++) {
                        aSelOpItemsData[0].Prob_Prio.results[2].Items.results[i].comp_sel = "X";
                    }
                } else {
                    for (var j = 0; j < aSelOpItemsData[0].Prob_Prio.results[2].Items.results.length; j++) {
                        aSelOpItemsData[0].Prob_Prio.results[2].Items.results[j].comp_sel = "";
                    }
                }
                oOperationItemsModel.updateBindings(true);
            },
            fnSelectProposedCompCheckBox3: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").sPath;
                if (oEvent.getSource().getSelected()) {
                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "X");
                } else {
                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to make select of all the records in the 4th table of BOM proposed*/
            fnSelectBMTableData: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var aOperMainData = oOperationItemsModel.getProperty("/aProposedTableResults");
                var sOpNum = oOperationItemsModel.getProperty("/sSelectedOperationNumber");
                var aSelOpItemsData = aOperMainData.filter(function (oEle) {
                    return oEle["Vornr"] === sOpNum;
                });
                var aItems =
                    aSelOpItemsData[0].Prob_Prio.results[3].Items.results.filter(
                        function (oEle) {
                            return oEle["comp_sel"] !== "X";
                        }
                    );
                if (aItems.length > 0) {
                    for (var i = 0; i < aSelOpItemsData[0].Prob_Prio.results[3].Items.results.length; i++) {
                        aSelOpItemsData[0].Prob_Prio.results[3].Items.results[i].comp_sel = "X";
                    }
                } else {
                    for (var j = 0; j < aSelOpItemsData[0].Prob_Prio.results[3].Items.results.length; j++) {
                        aSelOpItemsData[0].Prob_Prio.results[3].Items.results[j].comp_sel = "";
                    }
                }
                oOperationItemsModel.updateBindings(true);
            },
            fnSelectProposedCompCheckBox4: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").sPath;
                if (oEvent.getSource().getSelected()) {
                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "X");
                } else {
                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to make select of all the records in the 5th table of BOM proposed*/
            fnSelectBTableData: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var aOperMainData = oOperationItemsModel.getProperty("/aProposedTableResults");
                var sOpNum = oOperationItemsModel.getProperty("/sSelectedOperationNumber");
                var aSelOpItemsData = aOperMainData.filter(function (oEle) {
                    return oEle["Vornr"] === sOpNum;
                });
                var aItems = aSelOpItemsData[0].Prob_Prio.results[4].Items.results.filter(
                    function (oEle) {
                        return oEle["comp_sel"] !== "X";
                    }
                );
                if (aItems.length > 0) {
                    for (var i = 0; i < aSelOpItemsData[0].Prob_Prio.results[4].Items.results.length; i++) {
                        aSelOpItemsData[0].Prob_Prio.results[4].Items.results[i].comp_sel = "X";
                    }
                } else {
                    for (var j = 0; j < aSelOpItemsData[0].Prob_Prio.results[4].Items.results.length; j++) {
                        aSelOpItemsData[0].Prob_Prio.results[4].Items.results[j].comp_sel = "";
                    }
                }
                oOperationItemsModel.updateBindings(true);
            },
            fnSelectProposedCompCheckBox5: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").sPath;
                if (oEvent.getSource().getSelected()) {
                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "X");
                } else {
                    oOperationItemsModel.setProperty(sPath + "/comp_sel", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to make icon tab bar highlighted when select check box with UI validations*/
            fnCheckBoxForAcceptAllocation: function (oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var sSelOpNo = oOperationItemsModel.getProperty("/sSelectedOperationNumber");
                var aTabsData = oOperationItemsModel.getProperty("/aTabsResult");
                var aHeaderData = oOperationItemsModel.getProperty("/aTableResultHeader");
                var aSelTabData = aTabsData.filter(function (oEle) {
                    return oEle["sText"] === sSelOpNo;
                });
                if (oEvent.getSource().getSelected()) {
                    aSelTabData[0].sColor = "Positive";
                    aSelTabData[0].sIcon = "sap-icon://activity-2";
                    aHeaderData.AccptAlloc = "X";
                } else {
                    aSelTabData[0].sColor = "Neutral";
                    aSelTabData[0].sIcon = "sap-icon://activity-individual";
                    aHeaderData.AccptAlloc = "";
                }
                oOperationItemsModel.updateBindings(true);
            },
            fnAcceptAllPropComForOperationsConfirmation: function () {
                var that = this;
                that.fnAcceptAllPropComForOperations();
            },
            fnAcceptAllPropComForOperations: function () {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                var aProposedTableData = oOperationItemsModel.getProperty("/aProposedTableResults");
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                var sErrorTitle = oBundle.getText("proposal.error");
                var sUniqueDuplicate = oBundle.getText("proposal.uniqueDuplicate");
                var aSelectedOperationsData = [];
                var sOK = oBundle.getText("proposal.ok");
                //get selected operations data
                for (var i = 0; i < aProposedTableData.length; i++) {
                    if (aProposedTableData[i].AccptAlloc === "X") {
                        var aOpLevelData = aProposedTableData[i].Prob_Prio.results;
                        if (aOpLevelData) {
                            for (var j = 0; j < aOpLevelData.length; j++) {
                                var aProbLevelData = aOpLevelData[j].Items.results;
                                if (aProbLevelData) {
                                    for (var k = 0; k < aProbLevelData.length; k++) {
                                        aSelectedOperationsData.push(aProbLevelData[k]);
                                    }
                                }
                            }
                        }
                    }
                }
                //filter the selected records
                var aSelectedRecs = aSelectedOperationsData.filter(function (oEle) {
                    return oEle["comp_sel"] === "X";
                });
                //check duplicate selections
                var aAllDuplicateData = aSelectedRecs.filter(function (oEle) {
                    for (var l = 0; l < aSelectedRecs.length; l++) {
                        return (
                            aSelectedRecs[l].CompQty === oEle["CompQty"] &&
                            aSelectedRecs[l].CompUnit === oEle["CompUnit"] &&
                            aSelectedRecs[l].Component === oEle["Component"] &&
                            aSelectedRecs[l].ItemNo === oEle["ItemNo"] &&
                            aSelectedRecs[l].SNo === oEle["SNo"]
                        );
                    }
                });
                var aUniDuplicateData = aAllDuplicateData.map(function (obj) {
                    return obj.Vornr;
                });
                aUniDuplicateData = aUniDuplicateData.filter(function (v, n) {
                    return aUniDuplicateData.indexOf(v) === n;
                });
                if (aUniDuplicateData.length > 1) {
                    var sTxt = sUniqueDuplicate;
                    var sOpNumLoop = "";
                    for (var m = 0; m < aUniDuplicateData.length; m++) {
                        sOpNumLoop = sOpNumLoop + aUniDuplicateData[m] + "\n";
                    }
                    sOpNumLoop = sOpNumLoop.substring(0, sOpNumLoop.length - 1);
                    MessageBox.error(sTxt + "\n" + sOpNumLoop, {
                        title: sErrorTitle,
                        emphasizedAction: sOK,
                        onClose: function (oAction) {
                            if (oAction === sOK) {
                            }
                        },
                    });
                } else {
                    //assign operations to BOM component data after validation
                    var aBOMItemsData = oRoutingModel.getProperty("/BOM/Items/results");
                    for (var i1 = 0; i1 < aBOMItemsData.length; i1++) {
                        for (var j1 = 0; j1 < aSelectedRecs.length; j1++) {
                            if (
                                aSelectedRecs[j1].CompQty ===
                                aBOMItemsData[i1].CompQty.trim() &&
                                aSelectedRecs[j1].CompUnit === aBOMItemsData[i1].CompUnit &&
                                aSelectedRecs[j1].Component === aBOMItemsData[i1].Component &&
                                aSelectedRecs[j1].ItemNo === aBOMItemsData[i1].ItemNo &&
                                aSelectedRecs[j1].SNo === aBOMItemsData[i1].SNo
                            ) {
                                aBOMItemsData[i1].Vornr = aSelectedRecs[j1].Vornr;
                                aBOMItemsData[i1].Modify = "X";
                                aBOMItemsData[i1].UnRead = "Success";
                            }
                        }
                    }
                    this.getModel("oVisibilityModel").setProperty("/bBOMSplitBtnEnabled", false);
                    oOperationItemsModel.updateBindings(true);
                    that.fnCloseListOfProposedBOMItemsDailog();
                }
            },
            /*Description : This method is used to close Proposed BOM items dialog*/
            fnCloseListOfProposedBOMItemsDailog: function () {
                this.oDialogListOfProposedBOMItems.close();
                var iconTabBar = sap.ui.getCore().byId("idIconTabBarProposed");
                var iconTabBarTableLayout = sap.ui.getCore().byId("idProposedDynamicSideContent");
                var QuickScroll = sap.ui.getCore().byId("idQuickScroll");
                iconTabBar.destroy();
                iconTabBarTableLayout.destroy();
                QuickScroll.destroy();
                this.oDialogListOfProposedBOMItems.destroy();
                delete this.oDialogListOfProposedBOMItems;
            },
            /*Description : This method is used to ask confirmation to close Proposed BOM items dialog*/
            fnCloseListOfProposedBOMItemsDailogConfirmation: function () {
                var that = this;
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                var sWarning = oBundle.getText("proposal.warning");
                var sConfirmationMsg = oBundle.getText("proposal.closeProposedItemDialog");
                MessageBox.confirm(sConfirmationMsg, {
                    title: sWarning,
                    actions: [MessageBox.Action.NO, MessageBox.Action.YES],
                    emphasizedAction: MessageBox.Action.YES,
                    onClose: function (oAction) {
                        if (oAction == "YES") {
                            that.fnCloseListOfProposedBOMItemsDailog();
                        }
                    },
                });
            },
            /****************************ProposedMLDialogNewComponent Fragment*********************************/
            /*function for Expand All btn , shows all the components with similar probabilty of new components.*/
            fnExpandCollapseNewCpm: function (oEvent, sAction) {
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel"),
                    oTable = sap.ui.getCore().byId("newCompTab"),
                    oTableItems = oTable.getItems(),
                    oVisibilityModel = this.getView().getModel("oVisibilityModel"),
                    oProposedNewCompData = oRoutingModel.getProperty("/aProposedNewCompPopupData");
                if (sAction === "expand") {
                    oVisibilityModel.setProperty("/bMLClpAll", true);
                    oVisibilityModel.setProperty("/bMLExpAll", false);
                    oProposedNewCompData.forEach(function (newComp) {
                        newComp.Rec_Visible_UI = "X";
                        newComp.Comp_Grp_UI = "X";
                        if (newComp.RecVisible === "X") {
                            newComp.First_Drop_Down = "C";
                        } else {
                            newComp.First_Drop_Down = "";
                        }
                        if (newComp.CompParent === "X" && newComp.Comp_Grp === "X") {
                            newComp.Second_Drop_Down = "C";
                        } else {
                            newComp.Second_Drop_Down = "";
                        }
                    });
                } else {
                    //Collapse
                    oVisibilityModel.setProperty("/bMLClpAll", false);
                    oVisibilityModel.setProperty("/bMLExpAll", true);
                    oVisibilityModel.setProperty("/Comp_Grp_drp", "");
                    oProposedNewCompData.forEach(function (newComp) {
                        if (newComp.RecVisible != "X") {
                            newComp.Rec_Visible_UI = "";
                            newComp.Comp_Grp_UI = "";
                        }
                        newComp.Second_Drop_Down = "";
                        if (newComp.RecVisible === "X") {
                            newComp.First_Drop_Down = "E";
                        } else {
                            newComp.First_Drop_Down = "";
                        }
                    });
                }
                oTable.refreshItems();
                var VisibleRows = oProposedNewCompData.filter(function (oEle) {
                    return ((oEle["Rec_Visible_UI"] === "X") && (oEle["Comp_Grp_UI"] === "X"));
                });
                if (VisibleRows.length > 10) {
                    oVisibilityModel.setProperty("/DialogueHeight", "70%");
                }
                else {
                    oVisibilityModel.setProperty("/DialogueHeight", "auto");
                }
                oRoutingModel.updateBindings(true);
                oVisibilityModel.updateBindings(true);
            },
            /*function to Assign selected New Component's operation number in the popup to the BOM Items.*/
            fnProposedMultiPopupOprSelectNewComp: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").sPath;
                var sSelOpr = oRoutingModel.getProperty(sPath + "/Vornr_c");
                var sSelOprNoAlloc = oRoutingModel.getProperty(sPath + "/AllocNo");
                var sSelOprNoClr = oRoutingModel.getProperty(sPath + "/Colr_Status");
                var sRowPath = oRoutingModel.getProperty("/aProposedNewCompPopupRowPath");
                oRoutingModel.setProperty(sRowPath + "/Vornr_c", sSelOpr);
                oRoutingModel.setProperty(sRowPath + "/AllocNo", sSelOprNoAlloc);
                oRoutingModel.setProperty(sRowPath + "/Colr_Status", sSelOprNoClr);
                this.fnCloseNewCompDialog();
            },
            fnCloseNewCompDialog: function () {
                this.fnExpandCollapseNewCpm(null, 'collapse');
                this._pNewCompPopover.close();
            },
            fnShowHideChild: function (oEvent, sAction) {
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getPath(),
                    oTable = sap.ui.getCore().byId("newCompTab"),
                    oVisibilityModel = this.getView().getModel("oVisibilityModel"),
                    oRoutingModel = this.getView().getModel("oRoutingHeaderModel"),
                    sPrio = oRoutingModel.getProperty(sPath + "/Score"),
                    sParentCompNo = oRoutingModel.getProperty(sPath + "/SmlrComp"),
                    sCompParent = oRoutingModel.getProperty(sPath + "/CompParent"),
                    oPRows = oRoutingModel.getProperty("/aProposedNewCompPopupData");
                for (var i = 0; i < oPRows.length; i++) {
                    var oRow = oPRows[i];
                    if (sAction === "expand") {
                        if (oRow.CompParent === "X" || oRow.Comp_Grp === "X") {
                            oRow.Rec_Visible_UI = "X";
                            oRow.Comp_Grp_UI = "X";
                        }
                        if (oRow.CompParent === "X" && oRow.Comp_Grp === "X") {
                            oRow.Second_Drop_Down = "E";
                        }
                        if (oRow.RecVisible === "X") {
                            oRow.First_Drop_Down = "C";
                        }
                    }
                    else {
                        if (oRow.RecVisible != "X") {
                            oRow.Rec_Visible_UI = "";
                            oRow.Comp_Grp_UI = "";
                            oRow.First_Drop_Down = "";
                        }
                        if (oRow.RecVisible === "X") {
                            oRow.First_Drop_Down = "E";
                        }
                        oRow.Second_Drop_Down = "";
                    }
                }
                oRoutingModel.updateBindings(true);
                oTable.refreshItems();
                var VisibleRows = oPRows.filter(function (oEle) {
                    return ((oEle["Rec_Visible_UI"] === "X") && (oEle["Comp_Grp_UI"] === "X"));
                });
                if (VisibleRows.length === oPRows.length) {
                    oVisibilityModel.setProperty("/bMLClpAll", true);
                    oVisibilityModel.setProperty("/bMLExpAll", false);
                } else {
                    oVisibilityModel.setProperty("/bMLClpAll", false);
                    oVisibilityModel.setProperty("/bMLExpAll", true);
                }
                if (VisibleRows.length >= 10) {
                    oVisibilityModel.setProperty("/DialogueHeight", "70%");
                }
                else {
                    oVisibilityModel.setProperty("/DialogueHeight", "auto");
                }
                oVisibilityModel.updateBindings(true);
            },
            fnExpandCollapseChildGrpComp: function (oEvent, sAction) {
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").getPath(),
                    oTable = sap.ui.getCore().byId("newCompTab"),
                    oVisibilityModel = this.getView().getModel("oVisibilityModel"),
                    oRoutingModel = this.getView().getModel("oRoutingHeaderModel"),
                    sComponent = oRoutingModel.getProperty(sPath + "/SmlrComp"),
                    sSecond_drop_down = oRoutingModel.getProperty(sPath + "/Second_Drop_Down"),
                    oPRows = oRoutingModel.getProperty("/aProposedNewCompPopupData");
                if (sAction === 'expand') {
                    oRoutingModel.setProperty(sPath + "/Second_Drop_Down", "C");
                } else {
                    oRoutingModel.setProperty(sPath + "/Second_Drop_Down", "E");
                }
                for (var i = 0; i < oPRows.length; i++) {
                    var oRow = oPRows[i];
                    if (sAction === "expand") {
                        if (oRow.SmlrComp === sComponent && oRow.CompChild === "X") {
                            oRow.Rec_Visible_UI = "X";
                            oRow.Comp_Grp_UI = "X";
                        }
                    }
                    else {
                        if (oRow.SmlrComp === sComponent && oRow.CompChild === "X") {
                            oRow.Rec_Visible_UI = "";
                            oRow.Comp_Grp_UI = "";
                        }
                    }
                }
                oRoutingModel.updateBindings(true);
                oTable.refreshItems();
                var VisibleRows = oPRows.filter(function (oEle) {
                    return ((oEle["Rec_Visible_UI"] === "X") && (oEle["Comp_Grp_UI"] === "X"));
                });
                if (VisibleRows.length === oPRows.length) {
                    oVisibilityModel.setProperty("/bMLClpAll", true);
                    oVisibilityModel.setProperty("/bMLExpAll", false);
                } else {
                    oVisibilityModel.setProperty("/bMLClpAll", false);
                    oVisibilityModel.setProperty("/bMLExpAll", true);
                }
                if (VisibleRows.length >= 10) {

                    oVisibilityModel.setProperty("/DialogueHeight", "70%");
                }
                else {
                    oVisibilityModel.setProperty("/DialogueHeight", "auto");
                }
                oVisibilityModel.updateBindings(true);
            },
            /****************************ProposedMLPopover Fragment*********************************/
            fnProposedMultiPopupOprSelect: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingHeaderModel");
                var sPath = oEvent.getSource().getBindingContext("oRoutingHeaderModel").sPath;
                var sSelOpr = oRoutingModel.getProperty(sPath + "/Vornr_c");
                var sSelOprNoAlloc = oRoutingModel.getProperty(sPath + "/AllocNo");
                var sSelOprNoClr = oRoutingModel.getProperty(sPath + "/Colr_Status");
                var sRowPath = oRoutingModel.getProperty("/aProposedMultiPopupRowPath");
                oRoutingModel.setProperty(sRowPath + "/Vornr_c", sSelOpr);
                oRoutingModel.setProperty(sRowPath + "/AllocNo", sSelOprNoAlloc);
                oRoutingModel.setProperty(sRowPath + "/Colr_Status", sSelOprNoClr);
                this._pPopover.then(function (oPopover) {
                    oPopover.close();
                });
            },
            /****************************PRTDSValueHelp Fragment************************************/
            /*This method used to set the selected Material.*/
            fnPRTMaterialSelect: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var sPath = oOperationItemsModel.getProperty("/SelectedPRTPath");
                var sPathMaterial = oOperationItemsModel.getProperty("/SelectedPRTPath") + "/Matnr";
                var sMaterial = oSelectedItem.getCells()[0].getTitle();
                oOperationItemsModel.setProperty(sPathMaterial, sMaterial);
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                var sPRTCat = oOperationItemsModel.getProperty(sPath + "/Fhmar");
                if (sPRTCat === "M") {
                    var sPlant = oSelectedItem.getCells()[2].getText();
                    oOperationItemsModel.setProperty(sPath + "/Fhwrk", sPlant);
                }
            },
            /*This method used to search PRT Material.*/
            fnPRTMaterialSearch: function (oEvent) {
                var oFilter = [];
                var sValue = oEvent.getParameter("value");
                //Get first row Title value to check if there only one entry which means mostly no material found.
                if (sValue) {
                    oFilter = [new Filter("Text", FilterOperator.Contains, sValue)];
                    var oBinding = oEvent.getSource().getBinding("items");
                }
                oBinding.filter(oFilter);
            },
            /****************************PRTPlantValueHelp Fragment************************************/
            /*This method used to set the selected plant.*/
            fnPlantPRTSelect: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var sPathPlant = oOperationItemsModel.getProperty("/SelectedPRTPath") + "/Fhwrk";
                var sPlant = oSelectedItem.getCells()[0].getTitle();
                oOperationItemsModel.setProperty(sPathPlant, sPlant);
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
            },
            /*This method used to search PRT plant.*/
            fnPlantPRTSearch: function (oEvent) {
                var oFilter = [];
                var sValue = oEvent.getParameter("value");
                if (sValue) {
                    oFilter = [new Filter("Plant", FilterOperator.Contains, sValue)];
                    var oBinding = oEvent.getSource().getBinding("items");
                }
                oBinding.filter(oFilter);
            },
            /****************************Questions Fragment************************************/
            /*This method used on change of filter in Ticon Variables*/
            fnChangeTiconFilter: function (ref, oEvent) {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var sParentAggName = oEvent.getSource().sParentAggregationName;
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                //To identity whether it is variable category select or header filter bar select
                if (sParentAggName === "items") {
                    var sSelectedKey = oEvent.getSource().getSelectedKey();
                    var sValue = oEvent.getSource().getValue();
                    var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                    if (!sSelectedKey && sValue) {
                        sap.m.MessageToast.show(oBundle.getText("ticon.ticonselect"));
                        oOperationItemsModel.setProperty(sPath + "/FILTER", "");
                        oOperationItemsModel.setProperty(sPath + "/bSelectChangedFlag", "true");
                    } else {
                        oOperationItemsModel.setProperty(sPath + "/bSelectChangedFlag", "true");
                    }
                } else {
                    var oBinding = that._QuestionsDialog.getContent()[0].getBinding("rows"); //Get Bindings for tree table
                    if (oOperationItemsModel.getProperty("/sTiconFilter") !== "All") {
                        var oFilter = new sap.ui.model.Filter([new sap.ui.model.Filter("FILTER", sap.ui.model.FilterOperator.EQ, oOperationItemsModel.getProperty("/sTiconFilter")),
                        new sap.ui.model.Filter("VARIA_CODE", sap.ui.model.FilterOperator.StartsWith, "NOTE")
                        ], false);
                        oBinding.filter(oFilter);
                    } else {
                        oBinding.filter([]); //When ALL is passed clear filters
                    }
                }

            },
            /*Stv calulation - close the fragment let the oData call run in background*/
            fnGenerateAndCloseTicon: function (oEvent) {
                this.fnOnGenerateAndCloseTicon(this.getView().getController(), oEvent, "R");
            },
            /*Stv calulation --Close the fragment let the oData call run in background*/
            fnOnGenerateAndCloseTicon: function (oRef, oEvent) {
                this.bGenerateAndCloseTicon = true;
                this.fnGenerateTiconTimes(oRef, oEvent, "R");
            },
            /*This method used to fetch long Text for questions and open longtext*/
            fnTiconLongText: function (oEvent) {
                var that = this;
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var sTiconText = oOperationItemsModel.getProperty(sPath + "/COMNT");
                var sOprPath = oOperationItemsModel.getProperty("/sTiconOprPath");
                oOperationItemsModel.setProperty("/sComnt", sTiconText.replaceAll("<BR>", "\n"));
                that.getView().getModel("oRoutingModel").setProperty("/sTiconOprPath", sPath);
                if (!that.TiconLongTextDialog) {
                    that.TiconLongTextDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.TiconLongText", that);
                    that.getView().addDependent(this.TiconLongTextDialog);
                    that.TiconLongTextDialog.setModel(oOperationItemsModel);
                }
                that.TiconLongTextDialog.open();
            },
            /*Description: Function to open Multiple Parameter3 in Ticon area.*/
            fnSeeMoreTiconParameter3: function (oEvent) {
                var oSource = oEvent.getSource();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var sCurrentResult = oOperationItemsModel.getProperty(sCurrentPath + "/PARAMETER3_MULTIPLE");
                var aParameter3 = [];
                if (sCurrentResult !== "") {
                    var aParameter3Data = sCurrentResult.split(",");
                    for (var i = 0; i < aParameter3Data.length; i++) {
                        aParameter3.push({ "PARAMETER3": aParameter3Data[i], });
                    }
                    oOperationItemsModel.setProperty("/aMultipleTiconParameter3", aParameter3);
                } else {
                    oOperationItemsModel.setProperty("/aMultipleTiconParameter3", []);
                }
                oOperationItemsModel.updateBindings(true);
                if (!this.oSeeMoreParameter3Frag) {
                    this.oSeeMoreParameter3Frag = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.SeeMoreTiconParameter3", this);
                    this.getView().addDependent(this.oSeeMoreParameter3Frag);
                }
                this.oSeeMoreParameter3Frag.openBy(oSource);
            },
            /*Description: Function to copy values from ticon variable to Material classification set allocation table.*/
            fnCopyButtonForClassifiedRec: function (oEvent) {
                var that = this;
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var oRoutingModel = that.getView().getModel("oRoutingModel");
                var oBundle = that.getView().getModel("i18n").getResourceBundle();
                var sKeyword = oOperationItemsModel.getProperty(sPath + "/KEYWORD");
                var sParameter1 = oOperationItemsModel.getProperty(sPath + "/PARAMETER1");
                var sParameter2 = oOperationItemsModel.getProperty(sPath + "/PARAMETER2");
                var sParameter3 = oOperationItemsModel.getProperty(sPath + "/PARAMETER3");
                var sParameter3Multi = oOperationItemsModel.getProperty(sPath + "/PARAMETER3_MULTIPLE");
                if (sParameter3 === "") {
                    oRoutingModel.setProperty("/sCopyParameter3", sParameter3Multi);
                } else {
                    oRoutingModel.setProperty("/sCopyParameter3", sParameter3);
                }
                oRoutingModel.setProperty("/sCopyKeyword", sKeyword);
                oRoutingModel.setProperty("/sCopyParameter1", sParameter1);
                oRoutingModel.setProperty("/sCopyParameter2", sParameter2);
                sap.m.MessageToast.show(oBundle.getText("itemsCopy"));
            },
            /*This method used to close Ticon Questions Dialog*/
            fnTiconQuestionsClose: function () {
                this._QuestionsDialog.close();
            },
            /****************************RefOpSetValueHelp Fragment************************************/
            /*This method used to set the selected S-Routing.*/
            fnGroupSelect: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var sPathRefOp = oRoutingModel.getProperty("/sPathRefOp");
                var oSource = oRoutingModel.getProperty("/oSource");
                if (oSource === "OperationItem") {
                    var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                    if (oOperationItemsModel.getProperty(sPathRefOp) !== oSelectedItem.getCells()[0].getTitle()) {
                        oOperationItemsModel.setProperty(sPathRefOp + "/USR00", oSelectedItem.getCells()[0].getTitle()); //Group
                        oOperationItemsModel.setProperty(sPathRefOp + "/USR02", oSelectedItem.getCells()[1].getText()); //Group counter
                    }
                } else if (oSource === "Refopset") {
                    var oRefOprSetModel = this.getView().getModel("oRefOprSetModel");
                    oRefOprSetModel.setProperty("/Vplnr", oSelectedItem.getCells()[0].getTitle()); //Group
                    oRefOprSetModel.setProperty("/Vplal", oSelectedItem.getCells()[1].getText()); //Group counter
                }
            },
            /*This method used to search S-Routings*/
            fnGroupSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var oFilter = new Filter("Plnnr", FilterOperator.Contains, sValue);
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            /****************************SmartCopy Fragment************************************/
            /*Description : This method is open Smart Copy Error Pop Over*/
            fnOpenSmartCopyErrorPopover: function (oEvent) {
                var oSource = oEvent.getSource();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sCurrentPath = oSource.getBindingContext("oOperationItemsModel").getPath();
                var sCurrentResult = oOperationItemsModel.getProperty(sCurrentPath + "/Result");
                var sMessage = oOperationItemsModel.getProperty(sCurrentPath + "/Message");
                var aErrorMsg = [];
                if (sMessage !== "") {
                    //For warning condition only one line message passed to front end without <BR>
                    if (sCurrentResult === "Y") {
                        aErrorMsg.push({
                            Message: sMessage,
                        });
                    } else {
                        //For fail condition message is passed to frontend with <BR> to split message
                        var aMessageData = sMessage.split("<BR>");
                        for (var i = 1; i < aMessageData.length; i++) {
                            aErrorMsg.push({
                                Message: aMessageData[i],
                            });
                        }
                    }
                    oOperationItemsModel.setProperty("/aSmartCopyErrorMsg", aErrorMsg);
                } else {
                    oOperationItemsModel.setProperty("/aSmartCopyErrorMsg", []);
                }
                oOperationItemsModel.updateBindings(true);
                if (!this.oSmartCopyPopoverFrag) {
                    this.oSmartCopyPopoverFrag = sap.ui.xmlfragment(
                        "com.airbus.zcfe2meautorc.fragment.SmartCopyErrorPopover", this
                    );
                    this.getView().addDependent(this.oSmartCopyPopoverFrag);
                }
                this.oSmartCopyPopoverFrag.openBy(oSource);
            },
            /*Description : This method is used to set value according to Smart Copy Routing checkbox*/
            fnCheckboxSelectRouting: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    sSelectedValue = oEvent.getSource().getSelected();
                if (sSelectedValue === true) {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Select", "X");
                } else {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Select", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to open Smart Copy Target Group Counter Value help dialog*/
            fnValuehelpSmartCopyTargetGrpCntr: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var aTargetGCounters = oOperationItemsModel.getProperty(sCurrentPath + "/aTargetGroupCounters") || "";
                if (aTargetGCounters === "") {
                    sap.m.MessageToast.show(this.getView().getModel("i18n").getResourceBundle().getText("smart.selectGroup"));
                } else {
                    oOperationItemsModel.setProperty("/sGrpCntrSearch", "");
                    oOperationItemsModel.setProperty("/sGrpCntrSearch_VState", "None");
                    oOperationItemsModel.setProperty("/sGrpCntrSearch_VStateText", "");
                    oOperationItemsModel.setProperty("/aTargetGCounters", aTargetGCounters);
                    if (!this._oSmartCopyTargetGrpCntr) {
                        this._oSmartCopyTargetGrpCntr = sap.ui.xmlfragment(
                            "com.airbus.zcfe2meautorc.fragment.SmartCopyTargetGrpCntrValueHelp", this
                        );
                        this.getView().addDependent(this._oSmartCopyTargetGrpCntr);
                    }
                    this._oSmartCopyTargetGrpCntr.open();
                }
            },
            /*Description : This method is triggered when user changes smart copy target group counter*/
            fnSmartCopyTargetGCounterChange: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sGroup = "";
                var sGroupCounter = oOperationItemsModel.getProperty(sCurrentPath + "/T_Plnal") || "";
                if (sGroupCounter !== "") {
                    var sRegExp = /^[0-9]+$/;
                    var bMatched = sRegExp.test(sGroupCounter);
                    var sInvalidMsg = oBundle.getText("counterinvalifvaluestatemsg");
                    if (bMatched === false) {
                        // Empty the field
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal", "");
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstate", "Error");
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstatetext", sInvalidMsg);
                        return;
                    } else if (sGroupCounter > 99) {
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal", "");
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstate", "Error");
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstatetext", sInvalidMsg);
                        return;
                    } else {
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstate", "None");
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstatetext", "");
                    }
                }
                if (sGroupCounter !== "") {
                    var aTargetGroupCounters = oOperationItemsModel.getProperty(sCurrentPath + "/aTargetGroupCounters");
                    var aCounter = $.grep(aTargetGroupCounters, function (e) {
                        return e.Available_GC === sGroupCounter;
                    });
                    if (aCounter.length > 0) {
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstate", "Error");
                        sGroup = oOperationItemsModel.getProperty(sCurrentPath + "/T_Plnnr");
                        var sMsg = oBundle.getText("countervaluestatemsg", [
                            sGroup,
                            sGroupCounter,
                        ]);
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstatetext", sMsg);
                    } else {
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstate", "None");
                        oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstatetext", "");
                    }
                } else {
                    oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstate", "None");
                    oOperationItemsModel.setProperty(sCurrentPath + "/T_Plnal_Vstatetext", "");
                }
            },
            /*Description : This method is used to set value according to Smart Copy HeaderLongtext checkbox */
            fnCheckboxSelectHeaderLongtext: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    sSelectedValue = oEvent.getSource().getSelected();
                if (sSelectedValue === true) {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Hdr_LongText", "X");
                } else {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Hdr_LongText", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /* Description : This method is used to set value according to Smart Copy HeaderClassification checkbox */
            fnCheckboxSelectHeaderClassification: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    sSelectedValue = oEvent.getSource().getSelected();
                if (sSelectedValue === true) {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Hdr_classification", "X");
                } else {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Hdr_classification", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to set value according to Smart Copy Operation checkbox */
            fnCheckboxSelectOperation: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    sSelectedValue = oEvent.getSource().getSelected();
                if (sSelectedValue === true) {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Operation", "X");
                } else {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Operation", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to set value according to Smart Copy OperationUserFields checkbox*/
            fnCheckboxSelectOperationUserFields: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    sSelectedValue = oEvent.getSource().getSelected();
                if (sSelectedValue === true) {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Opr_Userfields", "X");
                } else {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Opr_Userfields", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to set value according to Smart Copy PRT Document Type checkbox */
            fnCheckboxSelectPRTDocType: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    sSelectedValue = oEvent.getSource().getSelected();
                if (sSelectedValue === true) {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Prt_D", "X");
                } else {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Prt_D", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to set value according to Smart Copy PRT Material checkbox*/
            fnCheckboxSelectPRTMaterial: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    sSelectedValue = oEvent.getSource().getSelected();
                if (sSelectedValue === true) {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Prt_M", "X");
                } else {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Prt_M", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to set value according to Smart Copy OperationLongtext checkbox */
            fnCheckboxSelectOperationLongtext: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    sSelectedValue = oEvent.getSource().getSelected();
                if (sSelectedValue === true) {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Opr_Longtext", "X");
                } else {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Opr_Longtext", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to set value according to Smart Copy Component Assignment checkbox */
            fnCheckboxSelectComponentAssignment: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    sSelectedValue = oEvent.getSource().getSelected();
                if (sSelectedValue === true) {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Comp_Assign", "X");
                } else {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Comp_Assign", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is used to set value according to Smart Copy BOM checkbox */
            fnCheckboxSelectBOM: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sCurrentPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    sSelectedValue = oEvent.getSource().getSelected();
                if (sSelectedValue === true) {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Bom", "X");
                } else {
                    oOperationItemsModel.setProperty(sCurrentPath + "/Bom", "");
                }
                oOperationItemsModel.updateBindings(true);
            },
            /*Description : This method is triggered when Smart Copy Bom num is changed*/
            fnSmartCopyBomNumChange: function (oEvent) {
                var sSelectedKey = oEvent.getSource().getSelectedKey();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var aSmartCopyTemplatesData = oOperationItemsModel.getProperty("/aSmartCopyTemplatesData");
                var altBomNum;
                if (sSelectedKey) {
                    var oBOM = oEvent.getSource().getSelectedItem().getBindingContext("oOperationItemsModel").getObject();
                    oOperationItemsModel.setProperty("/aSmartCopyBomAltNum", oBOM.Items.results);
                    if (oBOM.Items.results.length === 1) {
                        altBomNum = oBOM.Items.results[0].AltBom;
                    } else {
                        altBomNum = "";
                    }
                    for (var i = 0; i < aSmartCopyTemplatesData.length; i++) {
                        aSmartCopyTemplatesData[i].Alt_Bom = altBomNum;
                    }
                    oOperationItemsModel.updateBindings(true);
                }
            },
            /*Description : This method is used to close Smart Copy dialog */
            fnCloseSmartCopyPopup: function (oEvent) {
                this.getModel("oVisibilityModel").setProperty("/bSmartCopySuccessHeaderVisible", false);
                this._oSmartCopy.close();
                this._oSmartCopy.destroy();
                delete this._oSmartCopy;
            },
            /*Description : Function for smart copy proceed button*/
            fnProceedCreatingSmartCopyRoutings: function () {
                var that = this;
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sGroupNum = oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No");
                var sGroupCounter = oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sSmartEmptyMsg = oBundle.getText("smart.emptyMsg");
                var sSmartValidMsg = oBundle.getText("smart.validValueMsg");
                var sSmartDuplicateMsg = oBundle.getText("smart.duplicateMsg");
                var sSmartAtleastOneMsg = oBundle.getText("smart.atleastOneMsg");
                var sSmartBomMsg = oBundle.getText("smart.bomMsg");
                var aSmartCopyDataPayLoadArray = [];
                var aSmartCopyTemplatesData = oOperationItemsModel.getProperty("/aSmartCopyTemplatesData");
                var aSelectedData = aSmartCopyTemplatesData.filter(function (oEle) {
                    return oEle["Select"] === "X";
                });
                if (aSelectedData.length === 0) {
                    MessageBox.warning(sSmartAtleastOneMsg, {
                        icon: MessageBox.Icon.WARNING,
                        actions: [MessageBox.Action.OK],
                        initialFocus: MessageBox.Action.OK,
                        onClose: function (sButton) {
                            //no need
                        },
                    });
                } else {
                    var aCheckEmptyData = aSelectedData.filter(function (oEle) {
                        return oEle["T_Plnnr"] === "" || oEle["T_Plnal"] === "";
                    });
                    if (aCheckEmptyData.length > 0) {
                        MessageBox.warning(sSmartEmptyMsg, {
                            icon: MessageBox.Icon.WARNING,
                            actions: [MessageBox.Action.OK],
                            initialFocus: MessageBox.Action.OK,
                            onClose: function (sButton) {
                                //no need
                            },
                        });
                    } else {
                        var aCheckValueStateErrorData = aSelectedData.filter(function (
                            oEle
                        ) {
                            return (
                                oEle["T_Plnnr_Vstate"] === "Error" ||
                                oEle["T_Plnal_Vstate"] === "Error"
                            );
                        });
                        if (aCheckValueStateErrorData.length > 0) {
                            MessageBox.warning(sSmartValidMsg, {
                                icon: MessageBox.Icon.WARNING,
                                actions: [MessageBox.Action.OK],
                                initialFocus: MessageBox.Action.OK,
                                onClose: function (sButton) {
                                    //no need
                                },
                            });
                        } else {
                            var aDuplicateData = aSelectedData.filter(function (oEle) {
                                for (var i = 0; i < aSelectedData.length; i++) {
                                    return (
                                        aSelectedData[i].T_Plnnr === oEle["T_Plnnr"] &&
                                        aSelectedData[i].T_Plnal === oEle["T_Plnal"]
                                    );
                                }
                            });
                            if (aDuplicateData.length > 1) {
                                MessageBox.warning(sSmartDuplicateMsg, {
                                    icon: MessageBox.Icon.WARNING,
                                    actions: [MessageBox.Action.OK],
                                    initialFocus: MessageBox.Action.OK,
                                    onClose: function (sButton) {
                                        //no need
                                    },
                                });
                            } else {
                                var aBomSelectedData = aSelectedData.filter(function (oEle) {
                                    return oEle["Bom"] === "X";
                                });
                                if (aBomSelectedData.length > 0) {
                                    var aBomSelectedNumData = aBomSelectedData.filter(function (
                                        oEle
                                    ) {
                                        return oEle["Bom_no"] === "" || oEle["Alt_Bom"] === "";
                                    });
                                    if (aBomSelectedNumData.length > 0) {
                                        MessageBox.warning(sSmartBomMsg, {
                                            icon: MessageBox.Icon.WARNING,
                                            actions: [MessageBox.Action.OK],
                                            initialFocus: MessageBox.Action.OK,
                                            onClose: function (sButton) {
                                                //no need
                                            },
                                        });
                                    } else {
                                        that.fnSmartCopySendPayload();
                                    }
                                } else {
                                    that.fnSmartCopySendPayload();
                                }
                            }
                        }
                    }
                }
            },
            /* Description : Sending payload to backend */
            fnSmartCopySendPayload: function () {
                var that = this;
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var sSelTargetGroup = oOperationItemsModel.getProperty("/selTargetGroupNo");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sGroupNum = oRoutingHeaderModel.getProperty("/aHeaderDetails/Group_No");
                var sGroupCounter = oRoutingHeaderModel.getProperty("/aHeaderDetails/Grp_Cntr");
                var aSmartCopyDataPayLoadArray = [];
                var aSmartCopyTemplatesData = oOperationItemsModel.getProperty("/aSmartCopyTemplatesData");
                aSmartCopyTemplatesData.map(function (oEle) {
                    aSmartCopyDataPayLoadArray.push({
                        Plnnr: oEle["Plnnr"],
                        Plnal: oEle["Plnal"],
                        Plnty: oEle["Plnty"],
                        Matnr: oEle["Matnr"],
                        Werks: oEle["Werks"],
                        Aoci: oEle["Aoci"],
                        Plant: oEle["Plant"],
                        S_Plnnr: oEle["S_Plnnr"],
                        S_Plnal: oEle["S_Plnal"],
                        S_Plnty: oEle["S_Plnty"],
                        S_Text: oEle["S_Text"],
                        T_Plnnr: oEle["T_Plnnr"],
                        T_Plnal: oEle["T_Plnal"],
                        T_Plnty: oEle["T_Plnty"],
                        SmallCI_MATNR: oEle["SmallCI_MATNR"],
                        SmalllCI_MAKTX: oEle["SmalllCI_MAKTX"],
                        Hdr_LongText: oEle["Hdr_LongText"],
                        Hdr_classification: oEle["Hdr_classification"],
                        Operation: oEle["Operation"],
                        Opr_Userfields: oEle["Opr_Userfields"],
                        Opr_Longtext: oEle["Opr_Longtext"],
                        Prt_D: oEle["Prt_D"],
                        Prt_M: oEle["Prt_M"],
                        Comp_Assign: oEle["Comp_Assign"],
                        Bom: oEle["Bom"],
                        Bom_no: oEle["Bom_no"],
                        Alt_Bom: oEle["Alt_Bom"],
                        Select: oEle["Select"],
                        Result: "",
                    });
                });
                var aSmartCopyDataPayLoad = {
                    Plnnr: sGroupNum,
                    Plnal: sGroupCounter,
                    Plnty: "N",
                    Smart_Copy: aSmartCopyDataPayLoadArray,
                };
                var oBusyIndicator = new BusyDialog();
                oBusyIndicator.open();
                oDataModel.create("/ET_Smart_Copy_HdrSet", aSmartCopyDataPayLoad, {
                    success: function (oData, oResponse) {
                        oBusyIndicator.close();
                        if (oData.Smart_Copy.results.length > 0) {
                            oOperationItemsModel.setProperty("/aSmartCopyTemplatesData", oData.Smart_Copy.results);
                            aSmartCopyTemplatesData = oOperationItemsModel.getProperty("/aSmartCopyTemplatesData");
                        } else {
                            oOperationItemsModel.setProperty("/aSmartCopyTemplatesData", []);
                        }
                        var aFailedData = aSmartCopyTemplatesData.filter(function (oEle) {
                            return (
                                (oEle["Result"] === "F" && oEle["Select"] === "X") ||
                                (oEle["Result"] === "Y" && oEle["Select"] === "X")
                            );
                        });
                        if (aFailedData.length > 0) {
                            for (var i = 0; i < aSmartCopyTemplatesData.length; i++) {
                                aSmartCopyTemplatesData[i].Select = "";
                            }
                            //This condition satisfies when there is only one Target group number.
                            if (sSelTargetGroup !== "") {
                                this.fnSmartCopyTargetGroupChange("", sSelTargetGroup);
                            }
                            oOperationItemsModel.updateBindings(true);
                        } else {
                            that.fnCloseSmartCopyPopup();
                            that.fnPrefillSmartCopyDataToIntialScreen();
                        }
                    }.bind(this),
                    error: function (error) {
                        oBusyIndicator.close();
                        this.fnCheckError(error);
                    }.bind(this),
                });
            },
            /* Description : This method is used to close Smart Copy dialog */
            fnCloseSmartCopyPopup: function (oEvent) {
                this.getModel("oVisibilityModel").setProperty("/bSmartCopySuccessHeaderVisible", false);
                this._oSmartCopy.close();
                this._oSmartCopy.destroy();
                delete this._oSmartCopy;
            },
            /****************************SmartCopyTargetGrpCntrValueHelp Fragment************************************/
            /*Description : This method for filtering Smart Copy Group Counters*/
            fnFilterSmartCopyGrpCounters: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sInputSearchValue = oOperationItemsModel.getProperty("/sGrpCntrSearch") || "",
                    oFilter = [],
                    oBinding = sap.ui.getCore().byId("scgrpcntrvaltable").getBinding("items");
                var sRegExp = /^\d*$/;
                var bMatched = sRegExp.test(sInputSearchValue);
                if (bMatched) {
                    if (sInputSearchValue > 99) {
                        oOperationItemsModel.setProperty("/sGrpCntrSearch_VState", "Error");
                        oOperationItemsModel.setProperty("/sGrpCntrSearch_VStateText", "Please enter only 2 digit number");
                        oOperationItemsModel.setProperty("/sGrpCntrSearch", "");
                    } else {
                        oOperationItemsModel.setProperty("/sGrpCntrSearch_VState", "None");
                        oOperationItemsModel.setProperty("/sGrpCntrSearch_VStateText", "");
                        oFilter = [
                            new Filter(
                                "Available_GC",
                                FilterOperator.Contains,
                                sInputSearchValue
                            ),
                        ];
                        oBinding.filter(oFilter);
                    }
                } else {
                    oOperationItemsModel.setProperty("/sGrpCntrSearch_VState", "Error");
                    oOperationItemsModel.setProperty("/sGrpCntrSearch_VStateText", "Please enter only 2 digit number");
                    oOperationItemsModel.setProperty("/sGrpCntrSearch", "");
                }
            },
            /* Description : Routing to initial screen depending on the response result*/
            fnPrefillSmartCopyDataToIntialScreen: function () {
                var that = this;
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var oRoutingModel = that.getOwnerComponent().getModel("oRoutingModel");
                var oRoutingHeaderModel = that.getView().getModel("oRoutingHeaderModel");
                var oVisibilityModel = that.getView().getModel("oVisibilityModel");
                var aSmartCopyTemplatesData = oOperationItemsModel.getProperty("/aSmartCopyTemplatesData");
                var aSuccessData = aSmartCopyTemplatesData.filter(function (oEle) {
                    return oEle["Result"] === "S" && oEle["Select"] === "X";
                });
                //Searching with material and plant
                var sMaterial = oRoutingHeaderModel.getProperty("/aHeaderDetails/Material");
                var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant");
                that.getOwnerComponent().getRouter().navTo("CreateRouting");
                oRoutingModel.setProperty("/sCreateChangeIndex", 1);
                oVisibilityModel.setProperty("/bCreateSelectedEndUser", false);
                oVisibilityModel.setProperty("/bChangeSelectedSimpleForm", true);
                oRoutingModel.setProperty("/selectedMaterial", sMaterial);
                oRoutingModel.setProperty("/selectedChangePlant", sPlant);
                oRoutingModel.setProperty("/selectedChangeGroup", "");
                oRoutingModel.setProperty("/groupCounter", "");
                oRoutingModel.setProperty("/TaskListDesc", "");
                oRoutingModel.updateBindings(true);
                that.fnSearchByMultipleParams();
            },
            /*Description : This method is used to close Smart Copy Target Group Counter Value help dialog */
            fnCloseSmartCopyTargetGrpCntrValueHelp: function (oEvent) {
                this._oSmartCopyTargetGrpCntr.close();
                this._oSmartCopyTargetGrpCntr.destroy();
                delete this._oSmartCopyTargetGrpCntr;
            },
            /****************************StandardText Fragment************************************/
            /*This method used to search the Include Text in dialog*/
            fnSearchTexts: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sText = oRoutingHeaderModel.getProperty("/searchText");
                var sLang = oRoutingHeaderModel.getProperty("/searchLang");
                var oFilter = [];
                var oBinding = sap.ui.getCore().byId("tableIncTexts").getBinding("items");
                oBinding.filter();
                if (sLang === "ES") {
                    sLang = "S";
                }
                if (sLang) {
                    oFilter.push(new Filter("Lang", FilterOperator.EQ, sLang));
                }
                if (sText) {
                    oFilter.push(new Filter("Name", FilterOperator.Contains, sText));
                }
                if (oFilter.length > 0) {
                    oBinding.filter(oFilter);
                } else {
                    oBinding.filter([new Filter("Lang", FilterOperator.EQ, '')]);
                }
            },
            /*This method used to set the selected Text to rich rext editor*/
            fnStandardTextSelect: function (oEvent) {
                var oSelectedItem = oEvent.getSource().getSelectedItem();
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var sSelectedText = oSelectedItem.getBindingContext("oSrvModel").getObject().Name;
                var sLang = oSelectedItem.getBindingContext("oSrvModel").getObject().Lang;
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oRoutingModel.setProperty("/selectedStandardText", sSelectedText);
                this._oStandardTextDialog.close();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                oRoutingHeaderModel.setProperty("/searchText", "");
                var oBinding = sap.ui.getCore().byId("tableIncTexts").getBinding("items");
                oBinding.filter([]);
                oEvent.getSource().removeSelections();
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.setUseBatch(false);
                var aFilters = [new sap.ui.model.Filter("Name", FilterOperator.EQ, sSelectedText),
                new sap.ui.model.Filter("Lang", FilterOperator.EQ, sLang)
                ];
                oDataModel.read("/ET_Std_TxtSet", {
                    filters: aFilters,
                    async: true,
                    urlParameters: {
                        "$expand": ["Long_Text"]
                    },
                    success: function (oData) {
                        if (oData.results.length > 0) {
                            oRoutingHeaderModel.setProperty("/aINCText", oData.results[0].Long_Text.results);
                            var sIncText = formatter.fnHTMLFormat(oData.results[0].Long_Text.results); //Format to HTML text
                            tinyMCE.execCommand('mceInsertContent', false, sIncText); //Global Method tinyMCE
                        }
                        oDataModel.setUseBatch(true);
                    }.bind(this),
                    error: function (error) {
                        this.fnCheckError(error);
                    }.bind(this)
                });
            },
            /*This method used to close standard text dialog.*/
            fnStandardTextClose: function () {
                this._oStandardTextDialog.close();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                oRoutingHeaderModel.setProperty("/searchText", "");
                var oBinding = sap.ui.getCore().byId("tableIncTexts").getBinding("items");
                oBinding.filter([]);
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.setUseBatch(true);
            },
            /****************************StatusValuehelp Fragment************************************/
            /*This method search for status from available status's*/
            fnSearchStatus: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sText = oRoutingHeaderModel.getProperty("/searchStatusText");
                var oFilter = [new Filter("Status", FilterOperator.Contains, sText)];
                var oBinding = sap.ui.getCore().byId("tableStatusId").getBinding("items");
                if (sText) {
                    oBinding.filter(oFilter);
                } else {
                    oBinding.filter([]);
                }
            },
            /*This method used tp  select a status froma vailables status's.*/
            fnSelectStatus: function (oEvent) {
                var oSelectedItem = oEvent.getSource().getSelectedItem();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sSelectedStatus = oSelectedItem.getBindingContext("oRoutingModel").getObject().Status;
                var sSelectedText = oSelectedItem.getBindingContext("oRoutingModel").getObject().Text;
                var oBundle = this.geti18nModel().getResourceBundle();
                if (
                    sSelectedStatus === "MA" ||
                    sSelectedStatus === "MC" ||
                    sSelectedStatus === "MD" ||
                    sSelectedStatus === "MG" ||
                    sSelectedStatus === "ME"
                ) {
                    sap.m.MessageToast.show(oBundle.getText("update.StatusRestriciton"));
                } else {
                    oRoutingHeaderModel.setProperty("/aHeaderDetails/Status", sSelectedStatus);
                    oRoutingHeaderModel.setProperty("/aHeaderDetails/TlExtid", sSelectedText);
                    var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                    oVisibilityModel.setProperty("/bUnsavedChange", true);
                    oEvent.getSource().removeSelections();
                    this.oStatusDialog.close();
                    oRoutingHeaderModel.setProperty("/searchStatusText", "");
                    var oBinding = sap.ui.getCore().byId("tableStatusId").getBinding("items");
                    oBinding.filter([]);
                    oRoutingHeaderModel.setProperty("/aHeaderDetails/statusState", "None");
                }
            },
            /*This method used to close status dialog*/
            fnCloseStatus: function () {
                this.oStatusDialog.close();
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                oRoutingHeaderModel.setProperty("/searchStatusText", "");
                var oBinding = sap.ui.getCore().byId("tableStatusId").getBinding("items");
                oBinding.filter([]);
            },
            /****************************TiconLongText Fragment************************************/
            /*This method used for sending changed GSW's in case long text change*/
            // SP001581 Date:8th April,2022 Changes done for Ticon MIP with changed FM's
            //unCommented below line as a part of Ticon reversal Date:19th APril,2022
            fnTiconLngTextliveChange: function (oEvent) {
                var that = this;
                var xx = "";
                var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                var oRoutingModel = that.getView().getModel("oRoutingModel");
                var sOprPath = oRoutingModel.getProperty("/sTiconOprPath");
                var sPath = sOprPath + "/" + "COMNT";
                var oValue1 = oEvent.getSource().getValue();
                if (oValue1 !== "" && Number(oValue1) !== 0) {
                    try {
                        if (oValue1) {
                            oOperationItemsModel.setProperty(sPath + "_Vstate", "None");
                            oOperationItemsModel.setProperty(sPath + "_bChangedFlag", "true");
                            if (oEvent.getId() === "change") {
                                oOperationItemsModel.setProperty(sPath, oValue1);
                            }
                        }
                    } catch (ex) { }
                } else {
                    oOperationItemsModel.setProperty(sPath + "_Vstate", "None");
                    oOperationItemsModel.setProperty(sPath + "_bChangedFlag", "true");
                    if (oEvent.getId() === "change") {
                        oOperationItemsModel.setProperty(sPath, oValue1);
                    }
                }
                that.getModel("oOperationItemsModel").setProperty(sPath, oValue1);
            },
            /*This method used to close longtext*/
            fnTiconLngTextclose: function () {
                var that = this;
                if (that.TiconLongTextDialog) {
                    var sLongText = that.TiconLongTextDialog.getContent()[0].getValue();
                    var oRoutingModel = that.getView().getModel("oRoutingModel");
                    var oOperationItemsModel = that.getView().getModel("oOperationItemsModel");
                    var sPath = oRoutingModel.getProperty("/sTiconOprPath");
                    sLongText = sLongText.replaceAll("\n", "<BR>");
                    var sTiconTextPath = sPath + "/COMNT";
                    oOperationItemsModel.setProperty(sTiconTextPath, sLongText);
                    that.TiconLongTextDialog.close();
                }
            },
            /****************************UnitValueHelp Fragment************************************/
            fnTargetUnitDailogClose: function () {
                this.oUnitHelpDialog.close();
                this.oUnitHelpDialog.destroy();
                delete this.oUnitHelpDialog;
            },
            fnTargetUnitF4Search: function (oEvent) {
                var oEvtSrc = oEvent.getSource();
                var sValue = oEvtSrc.getValue().trim();
                var oTable = sap.ui.getCore().byId("idTargetUnitF4Table");
                var oBinding = oTable.getBinding("items");
                var aFilters = [];
                aFilters.push(
                    new sap.ui.model.Filter(
                        "Unit", sap.ui.model.FilterOperator.Contains, sValue
                    )
                );
                oBinding.filter(
                    new sap.ui.model.Filter({
                        filters: aFilters,
                        and: false,
                    })
                );
            },
            fnSelectUnit: function (oEvent) {
                var oEvtSrc = oEvent.getSource();
                var sPath = oEvtSrc._aSelectedPaths[0],
                    oModel = this.oDialogAddBom.getModel("addBomModel");
                var sUnitValue = this.getView().getModel("oOperationItemsModel").getProperty(sPath + "/Unit");
                oModel.setProperty(oModel.getData().SelectedRow + "/CompUnit", sUnitValue);
                oModel.setProperty(oModel.getData().SelectedRow + "/CompUnitVS", "None");
                this.oUnitHelpDialog.close();
                this.oUnitHelpDialog.destroy();
                delete this.oUnitHelpDialog;
            },
            /****************************UOMValueHelp Fragment************************************/
            /*This method used to set the selected UOM */
            fnSelectUOM: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var sUOMtype = oRoutingModel.getProperty("/sUOMtype");
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPath = oOperationItemsModel.getProperty("/SelectedUOMPath");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                if (this.unitField !== undefined) {
                    oModel.setProperty(oModel.getData().SelectedRow + "/VsiSzunit", value);
                    oModel.setProperty(oModel.getData().SelectedRow + "/VsiSzunitVS", "None");
                } else {
                    /*added if else condition to reuse this function for User field UOM search help
                    check if user field pop is opened and set the selected value to input*/
                    if (this._oOperationHeader && this._oOperationHeader.isOpen()) {
                        this.oUsrFieldSource.setValue(oSelectedItem.getCells()[0].getTitle());
                    } else {
                        oVisibilityModel.setProperty("/bUnsavedChange", true);
                        if (sUOMtype === "setup") {
                            oOperationItemsModel.setProperty(sPath + "/Vge01", oSelectedItem.getCells()[0].getTitle());
                        } else if (sUOMtype === "labor") {
                            oOperationItemsModel.setProperty(sPath + "/Vge02", oSelectedItem.getCells()[0].getTitle());
                        }
                    }
                }
            },
            /*This method used to search UOM*/
            fnSearchUOM: function (oEvent) {
                var oFilter = [];
                var sValue = oEvent.getParameter("value");
                oFilter = [new Filter("MSEHL", FilterOperator.Contains, sValue)];
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            /****************************VarUnitVH Fragment************************************/
            fnSelectVarUnit: function (oEvent) {
                var t = oEvent.getParameter("selectedItem"),
                    value = t.getCells()[0].getTitle(),
                    oModel = this.oDialogAddBom.getModel("addBomModel");
                if (this.unitField === "VsiSzunit") {
                    oModel.setProperty(oModel.getData().SelectedRow + "/VsiSzunit", value);
                    oModel.setProperty(oModel.getData().SelectedRow + "/VsiSzunitVS", "None");
                } else if (this.unitField === "VsiQtySzunit") {
                    oModel.setProperty(oModel.getData().SelectedRow + "/VsiSzunit", value);
                }
            },
            /****************************WorkCenterF4 Fragment************************************/
            //Method for filtering by Language in Work center value help
            fnFilterWorkcentre: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel"),
                    oOperationItemsModel = this.getView().getModel("oOperationItemsModel"),
                    sPathPlant = oOperationItemsModel.getData().sPathPlant,
                    sPlant = oOperationItemsModel.getProperty(sPathPlant);
                //Get value of Input search box
                var sInputSearchValue = oRoutingHeaderModel.getProperty("/workSearchText") || "",
                    sLang = oRoutingHeaderModel.getProperty("/searchLangDocValueHelp"),
                    sCat = oRoutingHeaderModel.getProperty("/searchWCCategory"),
                    oFilter = [],
                    oBinding = sap.ui.getCore().byId("tableworTexts").getBinding("items");
                if (sLang === "ES") {
                    sLang = "S";
                }
                oFilter = [new sap.ui.model.Filter("Plant", FilterOperator.EQ, sPlant),
                new Filter("Text", FilterOperator.Contains, sInputSearchValue),
                new Filter("Lang", FilterOperator.EQ, sLang),
                new Filter("Category", FilterOperator.EQ, sCat)
                ];
                //if (oFilter.length > 0) {
                oBinding.filter(oFilter);
                //} 
            },
            /*This method used to set the selected workcenter*/
            fnWrkCntrSelect: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                //Get exact path of corresponding operation where processing block needs to be freezed
                var sTiconOprPath = oOperationItemsModel.getProperty("/sOprPathWorkCenter");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oSelectedItem = oEvent.getParameter("listItem");
                var sPathWrkCntr = oOperationItemsModel.getProperty("/SelectedWorkcenterPath");
                var sPathWrkCntrDesc = oOperationItemsModel.getProperty("/SelectedWorkcenterDescPath");
                oOperationItemsModel.setProperty(sPathWrkCntr, oSelectedItem.getCells()[0].getTitle());
                oOperationItemsModel.setProperty(sPathWrkCntrDesc, oSelectedItem.getCells()[1].getText());
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                //Get the standard key vale from F4 help OData service and compare it on selection change method.
                var sStandardKey = oSelectedItem.getCells()[3].getText();
                oOperationItemsModel.setProperty(sTiconOprPath + "/StdValKey", sStandardKey);
                //If it is equal to "Z000", then disable Processing times block.
                //Refresh the model to disable processing block fields using formatter.
                oOperationItemsModel.refresh();
                oEvent.getSource().removeSelections(true);
                //Close the dialog and empty the search text
                this._oWrkCntrValueHelpDialog.close();
                //sWrkSource.fireChange();
                oRoutingHeaderModel.setProperty("/workSearchText", "");
            },
            fnWCvalueClose: function () {
                this._oWrkCntrValueHelpDialog.close();
                var oBinding = sap.ui.getCore().byId("tableworTexts").getBinding("items");
                oBinding.filter([]);
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.setUseBatch(true);
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                oRoutingHeaderModel.setProperty("/workSearchText", '');
            },
            fnCAPPorderLivechange: function (oEvent) {
                var sValue = oEvent.getSource().getValue();
                var oCAPPorderSrc = oEvent.getSource();
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                if (sValue) {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilter = [
                        new sap.ui.model.Filter("Value", FilterOperator.EQ, sValue)
                    ];
                    oDataModel.read("/ET_CAPPord_hdrSet", {
                        filters: aFilter,
                        success: function (oData) {
                            if (oData.results.length > 0) {
                                oRoutingHeaderModel.setProperty("/aHeaderDetails/FlgCapo", sValue);
                                oCAPPorderSrc.setValueState("None");
                                oCAPPorderSrc.setValue(sValue);
                            }
                        }.bind(this),
                        error: function (error) {
                            oCAPPorderSrc.setValueState("Error");
                            oCAPPorderSrc.setValue(sValue);
                        },
                    });
                } else {
                    oRoutingHeaderModel.setProperty("/aHeaderDetails/FlgCapo", "");
                    oCAPPorderSrc.setValueState("None");
                    oCAPPorderSrc.setValue("");
                }
                oRoutingModel.refresh();
            },
            fnCAPPorderChange: function (oEvent) {
                var oCAPPordSrc = oEvent.getSource();
                var sValue = oEvent.getParameter("value");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                oRoutingHeaderModel.setProperty("/aHeaderDetails/FlgCapo", "");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (sValue.trim() !== "") {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilter = [
                        new sap.ui.model.Filter("Value", FilterOperator.EQ, sValue)
                    ];
                    oDataModel.read("/ET_CAPPord_hdrSet", {
                        filters: aFilter,
                        success: function (oData) {
                            oCAPPordSrc.setValue(sValue);
                            if (oData.results.length > 0) {
                                oRoutingHeaderModel.setProperty("/aHeaderDetails/FlgCapo", oData.results[0].Value);
                            }
                        }.bind(this),
                        error: function (error) {
                            oCAPPordSrc.setValue("");
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                }
            },
            /*To open Header CAPP order value help for selection*/
            fnValuehelpCAPPorder: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oSrvModel = this.getOwnerComponent().getModel("oSrvModel");
                if (!this._oCAPPhdrHelpDialog) {
                    this._oCAPPhdrHelpDialog = sap.ui.xmlfragment("com.airbus.meauto.fragment.CAPPordHdrValueHelp", this);
                    this.getView().addDependent(this._oCAPPhdrHelpDialog);
                    this._oCAPPhdrHelpDialog.setModel(oSrvModel, "oSrvModel");
                    this._oCAPPhdrHelpDialog.setModel(oRoutingModel, "oRoutingModel");
                    this._oCAPPhdrHelpDialog.setModel("i18n");
                }
                var oBinding = this._oCAPPhdrHelpDialog.getBinding("items");
                oBinding.filter([]);
                var oCAPPordvalSrc = oEvent.getSource();
                oCAPPordvalSrc.setValueState("None");
                this._oCAPPhdrHelpDialog.open();
            },
            fnCAPPordSelect: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oSelectedItem = oEvent.getParameter("selectedItem");
                oRoutingHeaderModel.setProperty("/aHeaderDetails/FlgCapo", oSelectedItem.getCells()[0].getTitle());
            },
            fnCAPPordSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var oFilter = new Filter("Value", FilterOperator.EQ, sValue);
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            fnValuehelpCAPPWC: function (oEvent) {
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                if (!this._oCAPPWCHelpDialog) {
                    this._oCAPPWCHelpDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.CAPPWCHdrValueHelp", this);
                    this.getView().addDependent(this._oCAPPWCHelpDialog);
                    this._oCAPPWCHelpDialog.setModel("i18n");
                }
                if (sap.ui.getCore().getConfiguration()) {
                    oRoutingHeaderModel.setProperty("/searchLangDocValueHelp", sap.ui.getCore().getConfiguration().getLanguage().toLocaleUpperCase());
                } else {
                    oRoutingHeaderModel.setProperty("/searchLangDocValueHelp", "");
                }
                // Set default selectedKey to Category combobox in work center dialog
                oRoutingHeaderModel.setProperty("/searchWCCategory", " ");
                var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant");
                var sLanguage = oRoutingHeaderModel.getProperty("/searchLangDocValueHelp");
                if (sLanguage === "ES") {
                    var sLang = "S";
                } else {
                    sLang = sLanguage;
                }
                var oBinding = sap.ui.getCore().byId("CAPPWC").getBinding("items");
                var aFilter = [
                    new sap.ui.model.Filter("Plant", FilterOperator.EQ, sPlant),
                    new Filter("Text", FilterOperator.Contains, ""),
                    new Filter("Lang", FilterOperator.EQ, sLang),
                    new Filter("Category", FilterOperator.EQ, " "),
                ];
                oBinding.filter(aFilter);
                oRoutingModel.setProperty("/sCAPPWCSoruce", oEvent.getSource());
                this._oCAPPWCHelpDialog.open();
            },
            fnCAPPWCChange: function (oEvent) {
                var oCAPPWCSrc = oEvent.getSource();
                var sValue = oEvent.getParameter("value");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                if (sValue) {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilter = [
                        new sap.ui.model.Filter("Text", FilterOperator.Contains, sValue),
                        new Filter("Plant", FilterOperator.EQ, oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant")),
                        new Filter("Lang", FilterOperator.EQ, oRoutingHeaderModel.getProperty("/searchLangDocValueHelp")),
                        new Filter("Category", FilterOperator.EQ, oRoutingHeaderModel.getProperty("/searchWCCategory")),
                    ];
                    oDataModel.read("/ET_CAPPWC_hdrSet", {
                        filters: aFilter,
                        success: function (oData) {
                            oCAPPordSrc.setValueState("None");
                            if (oData.results.length > 0) {
                                oRoutingHeaderModel.setProperty("/aHeaderDetails/KapArbpl", oData.results[0].Value);
                            }
                        }.bind(this),
                        error: function (error) {
                            oCAPPWCSrc.setValueState("Error");
                            oCAPPWCSrc.setValueStateText("");
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                }
                else {
                    oCAPPWCSrc.setValueState("None");
                }
            },
            fnCAPPWCLivechange: function (oEvent) {
                var that = this;
                var sValue = oEvent.getSource().getValue();
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant") || "";
                var oCAPPWCSrc = oEvent.getSource();
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oRoutingModel.setProperty("/aSuggestCAPPWC", []);
                if (sValue) {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilter = [
                        new sap.ui.model.Filter("Plant", FilterOperator.EQ, sPlant),
                        new Filter("Text", FilterOperator.Contains, sValue),
                        new Filter("Lang", FilterOperator.EQ, oRoutingHeaderModel.getProperty("/searchLangDocValueHelp")),
                        new Filter("Category", FilterOperator.EQ, oRoutingHeaderModel.getProperty("/searchWCCategory")),
                    ];
                    oDataModel.read("/ET_CAPPWC_hdrSet", {
                        filters: aFilter,
                        success: function (oData) {
                            if (oData.results.length > 0) {
                                oRoutingModel.setProperty("/aSuggestCAPPWC", oData.results);
                                oRoutingHeaderModel.setProperty("/aHeaderDetails/KapArbpl", sValue)
                                oRoutingModel.setProperty("/aValidCAPPWC", true);
                                oCAPPWCSrc.setValue(sValue);
                            }
                        }.bind(this),
                        error: function (error) {
                            oRoutingModel.setProperty("/aValidCAPPWC", false);
                            oCAPPWCSrc.setValue("");
                            that.fnCheckError(error);
                        },
                    });
                }
                oRoutingModel.refresh();
            },
            fnCAPPFilterWorkcentre: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel"),
                    sPlant = oRoutingHeaderModel.getProperty("/aHeaderDetails/Plant");
                //Get value of Input search box
                var sInputSearchValue = oRoutingHeaderModel.getProperty("/workSearchText") || "",
                    sLang = oRoutingHeaderModel.getProperty("/searchLangDocValueHelp"),
                    sCat = oRoutingHeaderModel.getProperty("/searchWCCategory"),
                    oBinding = sap.ui.getCore().byId("CAPPWC").getBinding("items");
                if (sLang === "ES") {
                    sLang = "S";
                }
                var oFilter = [new sap.ui.model.Filter("Plant", FilterOperator.EQ, sPlant),
                new Filter("Text", FilterOperator.Contains, sInputSearchValue),
                new Filter("Lang", FilterOperator.EQ, sLang),
                new Filter("Category", FilterOperator.EQ, sCat)
                ];
                oBinding.filter(oFilter);
            },
            fnCAPPWrkCntrSelect: function (oEvent) {
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                var oRoutingModel = this.getView().getModel("oRoutingModel");
                var oSelectedItem = oEvent.getParameter("listItem");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                var sCAPPWCSource = oRoutingModel.getProperty("/sCAPPWCSoruce");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oRoutingHeaderModel.setProperty("/aHeaderDetails/KapArbpl", oSelectedItem.getCells()[0].getTitle());
                //Refresh the model to disable processing block fields using formatter.
                oRoutingHeaderModel.refresh();
                oEvent.getSource().removeSelections(true);
                //Close the dialog and empty the search text
                this._oCAPPWCHelpDialog.close();
                oRoutingHeaderModel.setProperty("/workSearchText", '');
                sCAPPWCSource.fireChange();
            },
            fnCAPPWCvalueClose: function () {
                this._oCAPPWCHelpDialog.close();
                var oBinding = sap.ui.getCore().byId("CAPPWC").getBinding("items");
                oBinding.filter([]);
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oDataModel.setUseBatch(true);
                var oRoutingHeaderModel = this.getView().getModel("oRoutingHeaderModel");
                oRoutingHeaderModel.setProperty("/workSearchText", '');
            },
            /*To open Operation CAPP order value help for selection*/
            fnValuehelpCAPPopr: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPathCAPP = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Capoc";
                var oSrvModel = this.getOwnerComponent().getModel("oSrvModel");
                if (!this._oCAPPorpHelpDialog) {
                    this._oCAPPorpHelpDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.CAPPordOprValueHelp", this);
                    this.getView().addDependent(this._oCAPPorpHelpDialog);
                    this._oCAPPorpHelpDialog.setModel(oSrvModel, "oSrvModel");
                    this._oCAPPorpHelpDialog.setModel(oOperationItemsModel, "oOperationItemsModel");
                    this._oCAPPorpHelpDialog.setModel("i18n");
                }
                var oBinding = this._oCAPPorpHelpDialog.getBinding("items");
                oBinding.filter([]);
                oOperationItemsModel.setProperty("/sPathCAPP", sPathCAPP);
                oOperationItemsModel.setProperty("/sCAPPSoruce", oEvent.getSource());
                this._oCAPPorpHelpDialog.open();
            },
            fnChangeOprCAPP: function (oEvent) {
                var oCAPPorpSrc = oEvent.getSource();
                var sValue = oEvent.getParameter("value");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                oOperationItemsModel.setProperty(sPath + "Capoc", "");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (sValue.trim() !== "") {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilter = [
                        new sap.ui.model.Filter("Value", FilterOperator.EQ, sValue)
                    ];
                    oDataModel.read("/ET_CAPPord_oprSet", {
                        filters: aFilter,
                        success: function (oData) {
                            if (oData.results.length > 0) {
                                oOperationItemsModel.setProperty("/aSuggestOperationCAPPord", oData.results);
                                oOperationItemsModel.setProperty(sPath + "/Capoc", oData.results[0].Value);
                                oOperationItemsModel.updateBindings(true);
                            }
                        }.bind(this),
                        error: function (error) {
                            oOperationItemsModel.setProperty(sPath + "/Capoc", "");
                            oOperationItemsModel.updateBindings(true);
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                }
                else {
                    oOperationItemsModel.setProperty(sPath + "Capoc", "");
                }
            },
            fnOperationCAPPLivechange: function (oEvent) {
                var oCAPPorpSrc = oEvent.getSource();
                var sValue = oEvent.getSource().getValue();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                oOperationItemsModel.setProperty(sPath + "/aSuggestOperationCAPPord", []);
                oOperationItemsModel.setProperty(sPath + "/Capoc", "");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                oOperationItemsModel.setProperty("/aSuggestOperationCAPPord", []);
                if (sValue) {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilter = [
                        new sap.ui.model.Filter("Value", FilterOperator.EQ, sValue)
                    ];
                    oDataModel.read("/ET_CAPPord_oprSet", {
                        filters: aFilter,
                        success: function (oData) {
                            if (oData.results.length > 0) {
                                oOperationItemsModel.setProperty("/aSuggestOperationCAPPord", oData.results);
                                oCAPPorpSrc.setValueState("None");
                                oCAPPorpSrc.setValueStateText("");
                                oOperationItemsModel.refresh();
                            }
                        }.bind(this),
                        error: function (error) {
                            oOperationItemsModel.setProperty(sPath + "/Capoc", sValue);
                            oCAPPorpSrc.setValueState("Error");
                            oCAPPorpSrc.setValueStateText("");
                        },
                    });
                } else {
                    oOperationItemsModel.setProperty(sPath + "/Capoc", "");
                }
            },
            fnCAPPoprSelect: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sCAPPSource = oOperationItemsModel.getProperty("/sCAPPSoruce");
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var sPathCAPP = oOperationItemsModel.getProperty("/sPathCAPP");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (oOperationItemsModel.getProperty(sPathCAPP) !== oSelectedItem.getCells()[0].getTitle()) {
                    oOperationItemsModel.setProperty(sPathCAPP, oSelectedItem.getCells()[0].getTitle());
                    sCAPPSource.fireChange();
                }
            },
            fnCAPPoprSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var oFilter = new Filter("Value", FilterOperator.EQ, sValue);
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            fnValuehelpStdKeyOpr: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPathPrtStdKeyOpr = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Ktsch_Opr";
                var oSrvModel = this.getOwnerComponent().getModel("oSrvModel");
                oOperationItemsModel.setProperty("/sStdvalue", oEvent.oSource.mAggregations.tooltip);
                var sAddrapPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Add_Replace"
                if (!this._oPrtStdKeyOprDialog) {
                    this._oPrtStdKeyOprDialog = sap.ui.xmlfragment("com.airbus.meauto.fragment.PrtStdKeyOpr", this);
                    this.getView().addDependent(this._oPrtStdKeyOprDialog);
                    this._oPrtStdKeyOprDialog.setModel(oSrvModel, "oSrvModel");
                    this._oPrtStdKeyOprDialog.setModel(oOperationItemsModel, "oOperationItemsModel");
                    this._oPrtStdKeyOprDialog.setModel("i18n");
                }
                var oBinding = this._oPrtStdKeyOprDialog.getBinding("items");
                oBinding.filter([]);
                oOperationItemsModel.setProperty("/sPathPrtStdKeyOpr", sPathPrtStdKeyOpr);
                oOperationItemsModel.setProperty("/sAddrapPath", sAddrapPath);
                oOperationItemsModel.setProperty("/sPrtStdKeyOpr", oEvent.getSource());
                this._oPrtStdKeyOprDialog.open();
            },
            fnChangeStdKeyOpr: function (oEvent) {
                var that = this;
                var sValue = oEvent.getParameter("value");
                var oPrtStdKeyOprliveSrc = oEvent.getSource();
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (sValue) {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilter = [
                        new sap.ui.model.Filter("KTSCH", FilterOperator.EQ, sValue)
                    ];
                    oDataModel.read("/ET_Opr_Std_Txt_Key_F4Set", {
                        filters: aFilter,
                        success: function (oData) {
                            oPrtStdKeyOprliveSrc.setValueState("None");
                        }.bind(this),
                        error: function (error) {
                            oPrtStdKeyOprliveSrc.setValueState("Error");
                            oPrtStdKeyOprliveSrc.setValueStateText(" ");
                            this.fnCheckError(error);
                        }.bind(this),
                    });
                } else {
                    oPrtStdKeyOprliveSrc.setValueState("None");
                }
            },
            fnLiveChangeStdKeyOpr: function (oEvent) {
                var that = this;
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oOperationItemsModel = this.getOwnerComponent().getModel("oOperationItemsModel");
                var sTxt = oEvent.getSource().getValue();
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                oOperationItemsModel.setProperty(sPath + "/aSuggestStdKeyOpr", []);
                oOperationItemsModel.setProperty("/sStdvalueSelect", oEvent.getSource().mAggregations.tooltip);
                oOperationItemsModel.setProperty("/sAddrapPathSelect", sPath + "/Ktsch_Opr");
                var aFilters = [];
                aFilters.push(new sap.ui.model.Filter("KTSCH", sap.ui.model.FilterOperator.Contains, sTxt));
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                var oParameters = {
                    filters: aFilters,
                    async: true,
                    success: function (oData, oResponse) {
                        if (oData.results.length > 0) {
                            oOperationItemsModel.setProperty(sPath + "/aSuggestStdKeyOpr", oData.results);
                            oOperationItemsModel.refresh();
                        }
                    },
                    error: function (err) {
                        this.fnCheckError(error);
                    }
                };
                oDataModel.read("/ET_Opr_Std_Txt_Key_F4Set", oParameters);
            },
            fnStdKeyOprSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var oFilter = new Filter("KTSCH", FilterOperator.EQ, sValue);
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            fnStdKeyOprSelect: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var sPathPrtStdKeyOpr = oOperationItemsModel.getProperty("/sPathPrtStdKeyOpr");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                if (oOperationItemsModel.getProperty(sPathPrtStdKeyOpr) !== oSelectedItem.getCells()[0].getTitle()) {
                    oOperationItemsModel.setProperty(sPathPrtStdKeyOpr, oSelectedItem.getCells()[0].getTitle());
                }
                this.fnGetPrtStdKeyDialog();
            },
            fnStdKeySuggestionSelect: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPathPrtStdKeyOpr = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Ktsch_Opr"
                var oSelectedItem = oEvent.mParameters.selectedItem.mProperties.text;
                oOperationItemsModel.setProperty(sPathPrtStdKeyOpr, oSelectedItem);
                this.fnGetPrtStdKeyDialog();
            },
            fnGetPrtStdKeyDialog: function (oEvent) {
                if (!this._oOprstdKeyLongText) {
                    this._oOprstdKeyLongText = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.AddReplaceStdKeyLongText", this);
                    this.getView().addDependent(this._oOprstdKeyLongText);
                }
                this._oOprstdKeyLongText.open();
            },
            fnStdKeyOperAdd: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sAddrapPath = oOperationItemsModel.getProperty("/sAddrapPath");
                oOperationItemsModel.setProperty(sAddrapPath, "ADD");
                this.fnStdKeyOprDialogclose();
            },
            fnStdkeyOprReplace: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sAddrapPath = oOperationItemsModel.getProperty("/sAddrapPath");
                oOperationItemsModel.setProperty(sAddrapPath, "REP");
                this.fnStdKeyOprDialogclose();
            },
            fnStdKeyOprDialogclose: function (oEvent) {
                this._oOprstdKeyLongText.close();
            },
            // Method to show Object Dependecies on click of Obj. Dep. icon.
            fnOnPressObjDep: function (oEvent) {
                var oRoutingHeaderModel = this.getOwnerComponent().getModel("oRoutingHeaderModel");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath(),
                    oOperationItem = oOperationItemsModel.getProperty(sPath),
                    sOperPlnty = oOperationItem.Plnty, //N or S
                    sOperPlnnr = oOperationItem.Plnnr,//group
                    sOperPlnal = oOperationItem.Plnal,//groupcounter
                    sOperVornr = oOperationItem.Vornr,//opr no
                    sOperIdent = oOperationItem.Ident,//
                    sOperKnobj = oOperationItem.Knobj;//
                if (sOperKnobj !== '' && sOperKnobj !== '000000000000000000') {
                    var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                    var aFilters = [new sap.ui.model.Filter("TCode", FilterOperator.EQ, "ZMD_MARS_OBJ_DEP"),];
                    oDataModel.read("/ET_Web_GuiSet", {
                        filters: aFilters,
                        success: function (oData) {
                            var sLink = oData.results[0].Link;
                            sap.m.URLHelper.redirect(
                                sLink +
                                "?PLNTY=" +
                                sOperPlnty +
                                "&PLNNR=" +
                                sOperPlnnr +
                                "&PLNAL=" +
                                sOperPlnal +
                                "&VORNR=" +
                                sOperVornr +
                                "&IDENT=" +
                                sOperIdent +
                                "&KNOBJ=" +
                                sOperKnobj +
                                "&~OKCODE=ONLI/#",
                                true
                            );
                        },
                    });
                }
            },
            // Method to show Inspection characteristics on click of Bulb icon.
            fnOpenInspChar: function (oEvent) {
                // Based on Bulb color (orange or grey), we are opening popup.
                // If Bulb is active, we open opoup otherwise no popup.
                var sColor = oEvent.getSource().mProperties.color;
                var idControl = oEvent.getSource().getId();
                var iOperationSequence = idControl.split("listBindingOpr-").pop();
                var oObj = this.getView().getModel("oRoutingModel").getProperty("/oRouteDetailsObj");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var aOperations = oOperationItemsModel.getProperty("/aOperationItems");
                if (aOperations[iOperationSequence].S_Plnnr !== "") {
                    var sMsgNoDTimportOpr = this.getView().getModel("i18n").getResourceBundle().getText("insp.MsgNoDTimportOpr");
                    sap.m.MessageToast.show(sMsgNoDTimportOpr, {
                        duration: 7000,
                        width: "68em",
                    });
                } else {
                    var iOperationNo = aOperations[iOperationSequence].Vornr;
                    var iRefGrpNumber = aOperations[iOperationSequence].Vplnr;
                    var iRefGrpCounter = aOperations[iOperationSequence].Vplal;
                    oOperationItemsModel.setProperty("/aOprPlantForInspChar", aOperations[iOperationSequence].Werks);
                    oOperationItemsModel.setProperty("/aOprPlnknForInspChar", aOperations[iOperationSequence].Plnkn);
                    oOperationItemsModel.setProperty("/aOprPlnnrForInspChar", aOperations[iOperationSequence].Plnnr);
                    oOperationItemsModel.setProperty("/aOprPlnalForInspChar", aOperations[iOperationSequence].Plnal);
                    oOperationItemsModel.setProperty("/aOprPlantForInspCharRouting", oObj.Plant);
                    oOperationItemsModel.setProperty("/aOprMaterialForInspChar", oObj.Material);
                    oOperationItemsModel.setProperty("/aOprGrpNoForInspChar", oObj.Group_No);
                    oOperationItemsModel.setProperty("/aOprGrpCntForInspChar", oObj.Grp_Cntr);
                    oOperationItemsModel.setProperty("/aOprTaskTypeForInspChar", oObj.Task_type);
                    oOperationItemsModel.setProperty("/aOprOprNoForInspChar", iOperationNo);
                    var oRoutingModel = this.getView().getModel("oRoutingModel");
                    var sKeyUser = oRoutingModel.getProperty("/keyUser");
                    if (sKeyUser === "X") {
                        oObj.Task_type = "S";
                    } else {
                        oObj.Task_type = "N";
                    }
                    if (oObj.Material && oObj.Plant && oObj.Group_No && oObj.Grp_Cntr) {
                        var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                        var aFilters = [
                            new sap.ui.model.Filter("Material", "EQ", oObj.Material.toString()),
                            new sap.ui.model.Filter("Plant", "EQ", oObj.Plant.toString()),
                            new sap.ui.model.Filter("Group_No", "EQ", oObj.Group_No.toString()),
                            new sap.ui.model.Filter("Grp_Cntr", "EQ", oObj.Grp_Cntr.toString()),
                            new sap.ui.model.Filter("Task_type", "EQ", oObj.Task_type.toString()),
                            new sap.ui.model.Filter("Vornr", "EQ", iOperationNo.toString()),
                            new sap.ui.model.Filter("S_Ref_Group_No", "EQ", iRefGrpNumber.toString()),
                            new sap.ui.model.Filter("S_Ref_Grp_Cntr", "EQ", iRefGrpCounter.toString()),
                        ];
                        var oBusyIndicator = new BusyDialog();
                        oBusyIndicator.open();
                        oDataModel.read("/ET_Insp_CharSet", {
                            filters: aFilters,
                            async: true,
                            urlParameters: {
                                "$expand": ["Long_Text"],
                            },
                            success: function (oData) {
                                oBusyIndicator.close();
                                // Get IC of each operation by passing sequence number                        
                                for (var i = 0; i < oData.results.length; i++) {
                                    var aInspCharLngTxtFormat = formatter.fnHTMLFormat(oData.results[i].Long_Text.results);
                                    oData.results[i].InspChar_Item_LtxtFormat = aInspCharLngTxtFormat;
                                }
                                oOperationItemsModel.setProperty("/aOperationInspChar", oData.results);
                                oOperationItemsModel.setProperty("/bDelInspCharBtnEnable", false);
                                if (!this._InspectionCharDialog) {
                                    this._InspectionCharDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.InspectionCharTable", this);
                                    this.getView().addDependent(this._InspectionCharDialog);
                                    this._InspectionCharDialog.setModel(oOperationItemsModel);
                                    this._InspectionCharDialog.getContent()[0].setModel(oOperationItemsModel);
                                    this._InspectionCharDialog.setModel("i18n");
                                }
                                this._InspectionCharDialog.open();
                                setTimeout(function () {
                                    // dynamic height to PRT Matrix table
                                    var oInspTable = sap.ui.getCore().byId("idInspectionCharTable"),
                                        parent = oInspTable.getParent(),
                                        availableHeight = parent.getDomRef().clientHeight;
                                    var footerElement = sap.ui.getCore().byId("idInspCharDialog-footer");
                                    availableHeight -= footerElement.getDomRef().clientHeight;
                                    var visibleRows = Math.round((availableHeight / 38) - 0);
                                    oInspTable.setVisibleRowCount(visibleRows);
                                }, 0);
                                oOperationItemsModel.refresh();
                            }.bind(this),
                            error: function (error) {
                                oBusyIndicator.close();
                                this.fnCheckError(error);
                            }.bind(this),
                        });
                    }
                }
            },
            /* Method : fnPastCopiedMasterIC
            Description : This method is used to open inspection characteristics plant value help. */
            fnPastCopiedMasterIC: function (oEvent) {
                var that = this;
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var oTable = sap.ui.getCore().byId("idInspectionCharTable");
                navigator.clipboard.readText().then(function (text) {
                    var aRowData = text.split("\r\n");
                    var aOperationItems = that.getView().getModel("oOperationItemsModel");
                    var aInspCharData = aOperationItems.getProperty("/aOperationInspChar") || [];
                    var sPlant = aOperationItems.getProperty("/aOprPlantForInspChar");
                    var oDataModel = that.getOwnerComponent().getModel("oSrvModel");
                    var oBundle = that.getView().getModel("i18n").getResourceBundle();
                    var aInspData = aRowData.filter(function (item) {
                        return item.trim() !== "";
                    });
                    var cleanedArray = that.fnremoveDuplicates(aInspData);
                    var aInspData = cleanedArray;
                    var aInspData = aInspData.map(function (item) {
                        return item.length > 8 ? item.substring(0, 8) : item;
                    });
                    var aResult = that.fnValidateDuplicateMasterIC(aInspCharData, aInspData);
                    var aInspCharFinalData = aResult.newArray;
                    aOperationItems.setProperty("/bDuplicateIC", aResult.aData.join(", "));
                    var sValue = aOperationItems.getProperty("/bDuplicateIC");
                    if (sValue !== "") {
                        MessageBox.error(oBundle.getText("insp.duplicateMasterIC", [sValue]));
                    }
                    for (var i = 0; aInspCharData.length > i; i++) {
                        delete aInspCharData[i].aMasterCIValueState;
                        delete aInspCharData[i].enabled;
                        delete aInspCharData[i].Psnfh_Vstate;
                        delete aInspCharData[i].Samp_value;
                        delete aInspCharData[i].InspChar_Item_LtxtFormat;
                        delete aInspCharData[i].masterinvalid;
                    }
                    var aData = [];
                    var iInspCharNumber;
                    for (var i = 0; i < aInspCharFinalData.length; i++) {
                        var info = aInspCharFinalData[i].trim();
                        if (i === 0) {
                            if (aInspCharData.length > 0) {
                                var firstMerknr = Number(aInspCharData[0].Merknr);
                                var lastMerknr = Number(aInspCharData[aInspCharData.length - 1].Merknr);
                                iInspCharNumber = firstMerknr > lastMerknr ? firstMerknr : lastMerknr || 10;
                                iInspCharNumber += 10;
                                iInspCharNumber = iInspCharNumber.toString();
                            } else {
                                iInspCharNumber = "10";
                            }
                        } else {
                            if (aData.length > 0) {
                                var firstMerknr = Number(aData[0].Merknr);
                                var lastMerknr = Number(aData[aData.length - 1].Merknr);
                                iInspCharNumber = firstMerknr > lastMerknr ? firstMerknr : lastMerknr || 10;
                                iInspCharNumber += 10;
                                iInspCharNumber = iInspCharNumber.toString();
                            } else {
                                iInspCharNumber = "10";
                            }
                        }
                        var newItem = {
                            "Material": "",
                            "Plant": sPlant,
                            "Group_No": "",
                            "Grp_Cntr": "",
                            "Task_type": "",
                            "Vornr": aOperationItems.getProperty("/aOprOprNoForInspChar"),
                            "Verwmerkm": info,
                            "Front_flag": "X",
                            "Merknr": iInspCharNumber,
                            "Stichprver": "100%",
                            "Loekz": "",
                        };
                        aData.push(newItem);
                    }
                    aData.forEach(function (item) {
                        aInspCharData.unshift(item);
                    });
                    var oPayload = {
                        "Material": aOperationItems.getProperty("/aOprMaterialForInspChar"),
                        "Plant": aOperationItems.getProperty("/aOprPlantForInspCharRouting"),
                        "Group_No": aOperationItems.getProperty("/aOprGrpNoForInspChar"),
                        "Grp_Cntr": aOperationItems.getProperty("/aOprGrpCntForInspChar"),
                        "Task_type": aOperationItems.getProperty("/aOprTaskTypeForInspChar"),
                        "Vornr": aOperationItems.getProperty("/aOprOprNoForInspChar"),
                        "Insp_Char": aInspCharData,
                    }
                    oDataModel.create("/ET_Insp_Char_HdrSet", oPayload, {
                        success: function (oData) {
                            aOperationItems.setProperty("/aOperationInspChar", oData.Insp_Char.results);
                            var aOperationInspChar = aOperationItems.getProperty("/aOperationInspChar");
                            aOperationInspChar.forEach(function (item) {
                                item.aMasterCIValueState = "None";
                            });
                            for (var i = 0; i < aOperationInspChar.length; i++) {
                                if (aOperationInspChar[i].Back_flag === "E") {
                                    aOperationInspChar[i].aMasterCIValueState = "Error";
                                } if (aOperationInspChar[i].Merknr === "") {
                                    aOperationInspChar[i].Psnfh_Vstate = "Error";
                                }
                            }
                            aOperationItems.updateBindings(true);
                        }.bind(this),
                        error: function (error) {
                            that.fnCheckError(error);
                        }.bind(this)
                    });
                    aOperationItems.refresh();
                });

            },
            /*Method : fnremoveDuplicates
            Description : This method is used to remove duplicate Master IC when copied from clipboard.*/
            fnremoveDuplicates: function (arr) {
                return arr.filter(function (item, index) {
                    return arr.indexOf(item) === index;
                });
            },
            /*Method : fnValidateDuplicateMasterIC
            Description : This method is used to validate  Master IC when copied from clipboard.*/
            fnValidateDuplicateMasterIC: function (aInspCharData, aInspData) {
                var newArray = aInspData.slice();
                var aData = [];
                aInspCharData.forEach(function (item) {
                    newArray.forEach(function (value, index) {
                        if (value === item.Verwmerkm) {
                            aData.push(value);
                            newArray.splice(index, 1);
                        }
                    });
                });
                return { newArray, aData };
            },
            /*Method : fnDelInspChar
            Description : This method is used to delete selected rows from inspection characteristics table. */
            fnDelInspChar: function (oEvent) {
                var oTable = sap.ui.getCore().byId("idInspectionCharTable");
                var aSelectedItems = oTable.getSelectedIndices();
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("insp.SelectRow");
                if (aSelectedItems.length > 0) {
                    aSelectedItems = aSelectedItems.reverse();
                    aSelectedItems.map(function (index) {
                        var sMerknr = oTable.getContextByIndex(index).getProperty("Merknr");
                        var bFlag = oTable.getContextByIndex(index).getProperty("Loekz");
                        var Front_flag = oTable.getContextByIndex(index).getProperty("Front_flag");
                        var sVerwmerkm = oTable.getContextByIndex(index).getProperty("Verwmerkm");
                        var sPlant = oTable.getContextByIndex(index).getProperty("Plant");
                        var sStichprver = oTable.getContextByIndex(index).getProperty("Stichprver");
                        var sKurztext = oTable.getContextByIndex(index).getProperty("Kurztext");
                        var sType = oTable.getContextByIndex(index).getProperty("Type");
                        var sMerkgew = oTable.getContextByIndex(index).getProperty("Merkgew");
                        var sCriteria = oTable.getContextByIndex(index).getProperty("Criteria");
                        var aData = [];
                        aData = aOperationItems.getProperty("/aOperationInspChar") || [];
                        var oInspCharIndex = aData.findIndex(function (oInspCharItem) {
                            return (
                                oInspCharItem.Merknr === sMerknr && oInspCharItem.Loekz === bFlag &&
                                oInspCharItem.Verwmerkm === sVerwmerkm && oInspCharItem.Plant === sPlant &&
                                oInspCharItem.Stichprver === sStichprver && oInspCharItem.Kurztext === sKurztext &&
                                oInspCharItem.Type === sType && oInspCharItem.Merkgew === sMerkgew &&
                                oInspCharItem.Criteria === sCriteria
                            );
                        });
                        if (Front_flag !== "X") {
                            var oBinding = oTable.getBinding("rows");
                            aData[oInspCharIndex].Loekz = "X";
                            var filter = new sap.ui.model.Filter("Loekz", sap.ui.model.FilterOperator.NE, 'X');
                            oBinding.filter([filter]);
                        } else {
                            aData.splice(oInspCharIndex, 1);
                        }
                        aOperationItems.refresh();
                        oTable.clearSelection();
                    });
                }
                else {
                    MessageToast.show(sMsg);
                }
            },
            /*** Params : oEvent
             * This method used for validation of item number in PRT area */
            fnValidateItemNumber: function (oEvent, sAction) {
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsgEmpty = oBundle.getText("update.itemnumberemptymsgs");
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var oVisibilityModel = this.getView().getModel("oVisibilityModel");
                oVisibilityModel.setProperty("/bUnsavedChange", true);
                var sMsg = oBundle.getText("update.itemnumber");
                var sValue = parseInt(oEvent.getSource().getValue(), 0);
                var sRegExp = /^\d*$/;
                var bMatched = sRegExp.test(sValue);
                var sPRTItemPath = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath();
                if (sValue === "") {
                    oEvent.getSource().setValueState("Error");
                    oEvent.getSource().setValue(" ");
                } else if (!bMatched) {
                    oEvent.getSource().setValueState("Error");
                    oEvent.getSource().setValueStateText(sMsgEmpty);
                    oEvent.getSource().setValue("");
                } else if (sValue > 9999) {
                    oEvent.getSource().setValueState("Error");
                    oEvent.getSource().setValueStateText(sMsg);
                    oEvent.getSource().setValue("");
                } else {
                    oEvent.getSource().setValueState("None");
                    oEvent.getSource().setValueStateText(" ");
                    if (sAction === 'PRT') {
                        oOperationItemsModel.setProperty(sPRTItemPath + "/isChange", true);
                    }
                }
            },
            /*Method : fnChangeMasterIC
            Description : This method is used to validate inspection characteristics master CI values while changing.*/
            fnChangeMasterIC: function (oEvent) {
                var that = this;
                var oTable = sap.ui.getCore().byId("idInspectionCharTable");
                var sValue = oEvent.getParameter("value");
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var aInspCharData = aOperationItems.getProperty("/aOperationInspChar");
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").sPath;
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sNum = sPath.split("/")[2];
                aOperationItems.setProperty("/sNumData", sNum);
                aOperationItems.setProperty(sPath + "/Front_flag", "X");
                var bFalg = this.fnValidData(aInspCharData, sValue);
                if (bFalg === true) {
                    MessageBox.error(oBundle.getText("insp.ValidationChangeMasterIC", [sValue]));
                    aOperationItems.setProperty(sPath + "/aMasterCIValueState", "Error");
                    aOperationItems.setProperty(sPath + "/Back_flag", "E");
                } else {
                    if (sValue !== "") {
                        for (var i = 0; aInspCharData.length > i; i++) {
                            delete aInspCharData[i].aMasterCIValueState;
                            delete aInspCharData[i].masterinvalid;
                            delete aInspCharData[i].enabled;
                            delete aInspCharData[i].Psnfh_Vstate;
                            delete aInspCharData[i].Samp_value;
                            delete aInspCharData[i].InspChar_Item_LtxtFormat;
                            aInspCharData[i].Back_flag = "";
                        }
                        var oPayload = {
                            "Material": aOperationItems.getProperty("/aOprMaterialForInspChar"),
                            "Plant": aOperationItems.getProperty("/aOprPlantForInspCharRouting"),
                            "Group_No": aOperationItems.getProperty("/aOprGrpNoForInspChar"),
                            "Grp_Cntr": aOperationItems.getProperty("/aOprGrpCntForInspChar"),
                            "Task_type": aOperationItems.getProperty("/aOprTaskTypeForInspChar"),
                            "Vornr": aOperationItems.getProperty("/aOprOprNoForInspChar"),
                            "Insp_Char": aInspCharData,
                        }
                        oDataModel.create("/ET_Insp_Char_HdrSet", oPayload, {
                            success: function (oData) {
                                aOperationItems.setProperty("/aOperationInspChar", oData.Insp_Char.results);
                                var aOperationInspChar = aOperationItems.getProperty("/aOperationInspChar");
                                aOperationInspChar.forEach(function (item) {
                                    item.aMasterCIValueState = "None";
                                });
                                for (var i = 0; i < aOperationInspChar.length; i++) {
                                    if (aOperationInspChar[i].Back_flag === "E") {
                                        aOperationInspChar[i].aMasterCIValueState = "Error";
                                    } if (aOperationInspChar[i].Merknr === "") {
                                        aOperationInspChar[i].Psnfh_Vstate = "Error";
                                    }
                                }
                                aOperationItems.updateBindings(true);
                            }.bind(this),
                            error: function (error) {
                                that.fnCheckError(error);
                            }.bind(this)
                        });
                    } else {
                        aOperationItems.setProperty(sPath + "/aMasterCIValueState", "Error");
                        aOperationItems.setProperty(sPath + "/Back_flag", "E");
                        aOperationItems.setProperty(sPath + "/Kurztext", "");
                        aOperationItems.setProperty(sPath + "/Type", "");
                        aOperationItems.setProperty(sPath + "/Merkgew", "");
                        aOperationItems.setProperty(sPath + "/Criteria", "");
                    }
                }
                aOperationItems.refresh();
                aOperationItems.updateBindings(true);
            },
            /*Method : fnGetRTCData
            Description : This method is used to validate manulally entered Master IC. */
            fnValidData: function (aInspCharData, sValue) {
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var bFlag = false;
                for (var i = 0; i < aInspCharData.length; i++) {
                    if (aOperationItems.getProperty("/sNumData") !== i.toString()) {
                        if (aInspCharData[i].Verwmerkm === sValue) {
                            bFlag = true;
                        }
                    }
                }
                return bFlag;
            },
            /*Method : fnInspCharPlantValueHelp
            Description : This method is used to open inspection characteristics plant value help. */
            fnInspCharPlantValueHelp: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPathInspCharPlant = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Plant";
                var aMasterCIValueState = oOperationItemsModel.getProperty(oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/aMasterCIValueState");
                var sMasterIC = oEvent.getSource().getParent().getCells()[1].getValue();
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsg = oBundle.getText("insp.InvalidIC");
                oOperationItemsModel.setProperty("/sPathInspCharPlant", sPathInspCharPlant);
                if (aMasterCIValueState === "Error") {
                    MessageBox.error(sMsg);
                } else {
                    var aFilters = [new sap.ui.model.Filter("Verwmerkm", FilterOperator.EQ, sMasterIC)];
                    oDataModel.read("/ET_Insp_Char_Plant_F4Set", {
                        filters: aFilters,
                        async: true,
                        success: function (oData) {
                            oOperationItemsModel.setProperty("/sPathInspCharPlantData", oData.results);
                            if (!this._oPlantValueHelpDialog) {
                                this._oPlantValueHelpDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.InspCharPlantValuehelp", this);
                                this.getView().addDependent(this._oPlantValueHelpDialog);
                            }
                            this._oPlantValueHelpDialog.open();
                        }.bind(this),
                        error: function (error) {
                            oDialogOpen.close();
                            this.fnCheckError(error);
                        }.bind(this)
                    });
                }
            },
            /*Method : fnInspCharPlantSelect
            Description : This method is used to select inspection characteristics plant value. */
            fnInspCharPlantSelect: function (oEvent) {
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var sPathInspCharPlant = aOperationItems.getProperty("/sPathInspCharPlant");
                aOperationItems.setProperty(sPathInspCharPlant, oSelectedItem.getCells()[0].getTitle());
            },
            /*Method : fnInspCharPlantSearch
            Description : This method is used to search inspection characteristics plant value. */
            fnInspCharPlantSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var oFilter = new Filter("Plant", FilterOperator.Contains, sValue);
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            /*Method : fnValidateSamplingNumber
            Description : This method is used to open inspection characteristics sampling procedure value help. */
            fnValidateSamplingNumber: function (oEvent) {
                var oOperationItemsModel = this.getView().getModel("oOperationItemsModel");
                var sPathInspCharSampling = oEvent.getSource().getBindingContext("oOperationItemsModel").getPath() + "/Stichprver";
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                oOperationItemsModel.setProperty("/sPathInspCharSampling", sPathInspCharSampling);
                oDataModel.read("/ET_Insp_Char_Sampling_F4Set", {
                    success: function (oData) {
                        oOperationItemsModel.setProperty("/sPathInspCharSamplingData", oData.results);
                        if (!this._oSamplingValueHelpDialog) {
                            this._oSamplingValueHelpDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.InspCharSamplingValuehelp", this);
                            this.getView().addDependent(this._oSamplingValueHelpDialog);
                        }
                        this._oSamplingValueHelpDialog.open();
                    }.bind(this),
                    error: function (error) {
                        oDialogOpen.close();
                        this.fnCheckError(error);
                    }.bind(this)
                });
            },
            /*Method : fnInspCharSamplingSelect
            Description : This method is used to select Sampling procedure value.  */
            fnInspCharSamplingSelect: function (oEvent) {
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var oSelectedItem = oEvent.getParameter("selectedItem");
                var sPathInspCharSampling = aOperationItems.getProperty("/sPathInspCharSampling");
                aOperationItems.setProperty(sPathInspCharSampling, oSelectedItem.getCells()[0].getTitle());
            },
            /*Method : fnInspCharSamplingSearch
            Description : This method is used to search Sampling procedure value. */
            fnInspCharSamplingSearch: function (oEvent) {
                var sValue = oEvent.getParameter("value");
                var oFilter = new Filter("STICHPRVER", FilterOperator.Contains, sValue);
                var oBinding = oEvent.getSource().getBinding("items");
                oBinding.filter(oFilter);
            },
            /*Method : fnInspCharLongTextDialog
            Description : This method is used to open long text dialog in inspection characteristics.*/
            fnInspCharLongTextDialog: function (oEvent) {
                var that = this;
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var sPath = oEvent.getSource().getBindingContext("oOperationItemsModel").sPath;
                var aInspCharLngTxt = aOperationItems.getProperty(sPath + "/InspChar_Item_LtxtFormat");
                var aLongTextLang = aOperationItems.getProperty(sPath + "/Ltextspr");
                aOperationItems.setProperty("/sInspCharLongTextLang", aLongTextLang);
                aOperationItems.setProperty("/sInspCharLongText", aInspCharLngTxt);
                if (!this._InspCharLongTxtDialog) {
                    this._InspCharLongTxtDialog = sap.ui.xmlfragment("com.airbus.zcfe2meautorc.fragment.InspCharLongText", this);
                    this.getView().addDependent(this._InspCharLongTxtDialog);
                }
                this._InspCharLongTxtDialog.open();
            },
            /*Method : fnGetRTCData
            Description : This method is used to dclose Inspection char. long text dialog.*/
            fnInspCharLongTextClosing: function (oEvent) {
                this._InspCharLongTxtDialog.close();
            },
            /*Method : fnSaveAndCloseInspChar
            Description : This method is used to save the inspection characteristics table data and close the popup.*/
            fnSaveAndCloseInspChar: function (oEvent) {
                var that = this;
                var oTable = sap.ui.getCore().byId("idInspectionCharTable");
                var aOperationItems = this.getView().getModel("oOperationItemsModel");
                var aInspCharData = aOperationItems.getProperty("/aOperationInspChar");
                var oDataModel = this.getOwnerComponent().getModel("oSrvModel");
                var oBundle = this.getView().getModel("i18n").getResourceBundle();
                var sMsgInspCharSaved = oBundle.getText("insp.SavedSucessfully");
                var sICValidationtMsg = oBundle.getText("insp.MasterICvalidation");
                var bValidData = this.fnValidateMasterIC(aInspCharData);
                if (bValidData === false) {
                    MessageBox.error(sICValidationtMsg);
                } else {
                    for (var i = 0; aInspCharData.length > i; i++) {
                        aInspCharData[i].Plnkn = aOperationItems.getProperty("/aOprPlnknForInspChar");
                        aInspCharData[i].Group_No = aOperationItems.getProperty("/aOprGrpNoForInspChar");
                        aInspCharData[i].Grp_Cntr = aOperationItems.getProperty("/aOprGrpCntForInspChar");
                        aInspCharData[i].Front_flag = "";
                        delete aInspCharData[i].aMasterCIValueState;
                        delete aInspCharData[i].masterinvalid;
                        delete aInspCharData[i].enabled;
                        delete aInspCharData[i].Psnfh_Vstate;
                        delete aInspCharData[i].Samp_value;
                        delete aInspCharData[i].InspChar_Item_LtxtFormat;
                    }
                    var oPayload = {
                        "Material": aOperationItems.getProperty("/aOprMaterialForInspChar"),
                        "Plant": aOperationItems.getProperty("/aOprPlantForInspCharRouting"),
                        "Group_No": aOperationItems.getProperty("/aOprGrpNoForInspChar"),
                        "Grp_Cntr": aOperationItems.getProperty("/aOprGrpCntForInspChar"),
                        "Task_type": aOperationItems.getProperty("/aOprTaskTypeForInspChar"),
                        "Vornr": aOperationItems.getProperty("/aOprOprNoForInspChar"),
                        "Insp_Char": aInspCharData,
                    }
                    var oDialogOpen = new sap.m.BusyDialog();
                    oDialogOpen.open();
                    oDataModel.create("/ET_Insp_Char_HdrSet", oPayload, {
                        success: function (oData) {
                            this.fnInspectionCharDialogClose();
                            oDialogOpen.close();
                            MessageToast.show(sMsgInspCharSaved);
                            aOperationItems.updateBindings(true);
                        }.bind(this),
                        error: function (error) {
                            oDialogOpen.close();
                            that.fnCheckError(error);
                        }.bind(this)
                    });
                }
                aOperationItems.refresh();
            },
            /*Method : fnValidateMasterIC
            Description : This method is used to validate inspection characteristics data bemore save.*/
            fnValidateMasterIC: function (aInspCharData) {
                var that = this;
                var bValidData = true;
                for (var i = 0; aInspCharData.length > i; i++) {
                    if (aInspCharData[i].Back_flag === "E" && aInspCharData[i].Loekz !== "X") {
                        aInspCharData[i].aMasterCIValueState = "Error";
                        bValidData = false;
                    } if (aInspCharData[i].Psnfh_Vstate === "Error" && aInspCharData[i].Loekz !== "X") {
                        bValidData = false;
                    }
                }
                return bValidData;
            },
        });
    }
);
